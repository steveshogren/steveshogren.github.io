<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Deliberate Software]]></title>
  <link href="http://deliberate-software.com/atom.xml" rel="self"/>
  <link href="http://deliberate-software.com/"/>
  <updated>2016-02-19T07:08:38-05:00</updated>
  <id>http://deliberate-software.com/</id>
  <author>
    <name><![CDATA[Steve Shogren]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Pop Culture Architecture]]></title>
    <link href="http://deliberate-software.com/pop-culture-architecture/"/>
    <updated>2016-02-19T06:55:30-05:00</updated>
    <id>http://deliberate-software.com/pop-culture-architecture</id>
    <content type="html"><![CDATA[<blockquote><p>&ldquo;ActiveRecord is so hot right now!&rdquo; - comment in 2006</p></blockquote>

<p>Pop Culture Architecture is the current &ldquo;fad&rdquo; of the day. I have seen it be
microservices, business capabilities, CQRS, test driven development,
service-oriented architecture, ORMs, and ActiveRecord. Each of these have been
fashionable at some point.</p>

<p>Fashion is ultimately a signaling mechanism for status. We are attracted to
fashionable architectures because they signal we have worked on elite teams. The
more difficult or costly the trade-offs of the architecture, the more elite and
special our team must have been to implement it successfully.</p>

<h2>Example: Microservices</h2>

<p>Microservices is a current fashionable design. Microservices have very clear
pros and cons. They come with the ability to have a huge team or a fragmented
deployment that potentially allows for horizontal scaling. For that ability, you
will pay the immense costs: loss of strong consistency and transactions, a
labyrinthine operational footprint and deployment, increased communication
effort, expensive integration testing, and a code base that takes longer to
program. <a href="http://martinfowler.com/articles/microservice-trade-offs.html">(1)</a>.</p>

<p>If you have a small team or system that does not need horizontal scaling on
every single component, a microservice architecture is unlikely to solve your
communication or trust issues. You will spend dollars on deployment, consistency
issues, distributed debugging, and basic programming just to save a penny on
communication and teamwork.
<a href="http://www.stackbuilders.com/news/the-hidden-costs-of-microservices">(2)</a></p>

<p>For most teams, the logical conclusion probably will be: a microservice
architecture solves problems we don&rsquo;t have.</p>

<p>Microservices remain fashionable because they indicate work at the size and
scale of a handful of elite companies. You would only likely encounter a couple
hundred companies in the world that have a development staff so large or loads
so high as to truly require such a system. Because of the rarity of actual need,
it is a perfect signaling mechanism for status.</p>

<p>Saying that you implemented a microservice architecture implies &ldquo;my team was so
large or my product so popular, my team could afford to pay almost any cost to
meet the demand.&rdquo;</p>

<p>Carefully consider your architecture decisions. Do not allow fashion to dictate
your choices. Take pride in selecting the appropriate architecture for the
project, no matter how unpopular.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Haskell Is the Dark Souls of Programming]]></title>
    <link href="http://deliberate-software.com/haskell-is-the-dark-souls-of-programming/"/>
    <updated>2016-02-06T11:22:29-05:00</updated>
    <id>http://deliberate-software.com/haskell-is-the-dark-souls-of-programming</id>
    <content type="html"><![CDATA[<p>HUMOROUS POST AHEAD. Please don&rsquo;t hit me, Haskell does a great job of that
already.</p>

<p><img class="center solaire" src="http://deliberate-software.com/images/altar_of_sunlight.gif" width="500" title="solaire" alt="solaire"></p>

<p>I decided to start the next version of my safety score posts. This time,
however, I decided to do it in Haskell. I love Haskell for the same reasons I
love Dark Souls. Fantastic and inscrutable lore, a great <del>combat</del> type
system, a cliff-wall difficulty curve, and unending punishment.</p>

<p>I want to collect some statistics from the GitHub API. Watch as I retrace my
steps attempting the Tomb of the Dread HTTPS GET Request.</p>

<h3>Step One - Stack (aka Pride Comes Before The Fall)</h3>

<p>I download stack and start a project:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&gt; cd /home/jack/programming && stack new github-stats && cd github-stats
</span><span class='line'>Downloading template "new-template" to create project "github-stats" in github-stats/ ...
</span><span class='line'> ......
</span><span class='line'>All done.</span></code></pre></td></tr></table></div></figure>


<p>So far so good. Does it work?</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>  &gt; stack build && stack exec -- github-stats-exe 
</span><span class='line'>   github-stats-0.1.0.0: configure
</span><span class='line'>   ..... 
</span><span class='line'>   Registering github-stats-0.1.0.0...
</span><span class='line'>   someFunc</span></code></pre></td></tr></table></div></figure>


<p>Awww yisss. This is going to be so easy!</p>

<h3>Step Two - HTTPS GET Request (aka The Fall After The Pride)</h3>

<p><img class="center giants" src="http://deliberate-software.com/images/tomb_of_the_giants.gif" width="450" title="giants" alt="giants"></p>

<p>Now I need to query the GitHub API. Not my first time to the rodeo, I generate a
personal access token from GitHub and copy it to a local file. What query should
I run first? How about the count for all ASM tetris repositories? Poking around
the <a href="https://developer.github.com/v3/search/#search-repositories">docs</a> comes up
with:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>GET https://api.github.com/search/repositories?q=tetris+language:assembly&sort=stars&order=desc
</span><span class='line'>User-Agent: steveshogren
</span><span class='line'>Authorization: token PUT_TOKEN_HERE</span></code></pre></td></tr></table></div></figure>


<blockquote><p>{.. &ldquo;total_count&rdquo;: 354}</p></blockquote>

<p>Easy life. Now how do you GET a resource in Haskell? Ah,
<a href="https://hackage.haskell.org/package/HTTP-4000.3.2/docs/Network-HTTP.html">Network.HTTP</a>!
I copy the front page sample into <code>src/Lib.hs</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'><span class="kr">module</span> <span class="nn">Lib</span>
</span><span class='line'>    <span class="p">(</span> <span class="nf">someFunc</span>
</span><span class='line'>    <span class="p">)</span> <span class="kr">where</span>
</span><span class='line'>
</span><span class='line'><span class="nf">x</span> <span class="ow">=</span> <span class="n">simpleHTTP</span> <span class="p">(</span><span class="n">getRequest</span> <span class="s">&quot;https://www.github.com/&quot;</span><span class="p">)</span> <span class="o">&gt;&gt;=</span> <span class="n">fmap</span> <span class="p">(</span><span class="n">take</span> <span class="mi">100</span><span class="p">)</span> <span class="o">.</span> <span class="n">getResponseBody</span>
</span><span class='line'>
</span><span class='line'><span class="nf">someFunc</span> <span class="ow">::</span> <span class="kt">IO</span> <span class="nb">()</span>
</span><span class='line'><span class="nf">someFunc</span> <span class="ow">=</span>
</span><span class='line'>   <span class="n">print</span> <span class="n">x</span>
</span></code></pre></td></tr></table></div></figure>


<p>So simple! This is why laugh at my NodeJS loving friends! What a bunch of cretins.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'><span class="o">&gt;</span> <span class="n">stack</span> <span class="n">build</span>
</span><span class='line'><span class="nf">src</span><span class="o">/</span><span class="kt">Lib</span><span class="o">.</span><span class="n">hs</span><span class="kt">:</span><span class="mi">5</span><span class="kt">:</span><span class="mi">5</span><span class="kt">:</span> <span class="kt">Not</span> <span class="kr">in</span> <span class="n">scope</span><span class="kt">:</span> <span class="err">â€˜</span><span class="n">simpleHTTP</span><span class="err">â€™</span>
</span><span class='line'><span class="nf">src</span><span class="o">/</span><span class="kt">Lib</span><span class="o">.</span><span class="n">hs</span><span class="kt">:</span><span class="mi">5</span><span class="kt">:</span><span class="mi">17</span><span class="kt">:</span> <span class="kt">Not</span> <span class="kr">in</span> <span class="n">scope</span><span class="kt">:</span> <span class="err">â€˜</span><span class="n">getRequest</span><span class="err">â€™</span>
</span><span class='line'><span class="nf">src</span><span class="o">/</span><span class="kt">Lib</span><span class="o">.</span><span class="n">hs</span><span class="kt">:</span><span class="mi">5</span><span class="kt">:</span><span class="mi">77</span><span class="kt">:</span> <span class="kt">Not</span> <span class="kr">in</span> <span class="n">scope</span><span class="kt">:</span> <span class="err">â€˜</span><span class="n">getResponseBody</span><span class="err">â€™</span>
</span><span class='line'><span class="kt">Compilation</span> <span class="n">failed</span><span class="o">.</span>
</span></code></pre></td></tr></table></div></figure>


<p>Doesn&rsquo;t compile. Durp, hackage is a package library, I need to add this to my
cabal. What is the name of the package? HTTP-4000? HTTP-4000.3.2? Nothing in
hackage seems to indicate what goes into the cabal file. I discover it is just
HTTP through trial and error. I update my cabal file&hellip; in all three
build-depends&hellip;?</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'>  <span class="n">build</span><span class="o">-</span><span class="n">depends</span><span class="kt">:</span>       <span class="n">base</span> <span class="o">&gt;=</span> <span class="mf">4.7</span> <span class="o">&amp;&amp;</span> <span class="o">&lt;</span> <span class="mi">5</span>
</span><span class='line'>                       <span class="p">,</span> <span class="kt">HTTP</span>
</span></code></pre></td></tr></table></div></figure>


<p>Hrm, same error.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'><span class="o">&gt;</span> <span class="n">stack</span> <span class="n">build</span>
</span><span class='line'><span class="nf">src</span><span class="o">/</span><span class="kt">Lib</span><span class="o">.</span><span class="n">hs</span><span class="kt">:</span><span class="mi">5</span><span class="kt">:</span><span class="mi">5</span><span class="kt">:</span> <span class="kt">Not</span> <span class="kr">in</span> <span class="n">scope</span><span class="kt">:</span> <span class="err">â€˜</span><span class="n">simpleHTTP</span><span class="err">â€™</span>
</span><span class='line'><span class="nf">src</span><span class="o">/</span><span class="kt">Lib</span><span class="o">.</span><span class="n">hs</span><span class="kt">:</span><span class="mi">5</span><span class="kt">:</span><span class="mi">17</span><span class="kt">:</span> <span class="kt">Not</span> <span class="kr">in</span> <span class="n">scope</span><span class="kt">:</span> <span class="err">â€˜</span><span class="n">getRequest</span><span class="err">â€™</span>
</span><span class='line'><span class="nf">src</span><span class="o">/</span><span class="kt">Lib</span><span class="o">.</span><span class="n">hs</span><span class="kt">:</span><span class="mi">5</span><span class="kt">:</span><span class="mi">77</span><span class="kt">:</span> <span class="kt">Not</span> <span class="kr">in</span> <span class="n">scope</span><span class="kt">:</span> <span class="err">â€˜</span><span class="n">getResponseBody</span><span class="err">â€™</span>
</span><span class='line'><span class="kt">Compilation</span> <span class="n">failed</span><span class="o">.</span>
</span></code></pre></td></tr></table></div></figure>


<p>Oh, durp, I&rsquo;d need an import. (WHY ISN&rsquo;T THIS IN THE CODE SAMPLE?!) Also, print
doesn&rsquo;t work, I need <code>putStrLn</code>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'><span class="kr">import</span> <span class="nn">Network.HTTP</span>
</span><span class='line'>
</span><span class='line'><span class="nf">x</span> <span class="ow">=</span> <span class="n">simpleHTTP</span> <span class="p">(</span><span class="n">getRequest</span> <span class="s">&quot;https://www.github.com/&quot;</span><span class="p">)</span> <span class="o">&gt;&gt;=</span> <span class="n">fmap</span> <span class="p">(</span><span class="n">take</span> <span class="mi">100</span><span class="p">)</span> <span class="o">.</span> <span class="n">getResponseBody</span>
</span><span class='line'>
</span><span class='line'><span class="nf">someFunc</span> <span class="ow">::</span> <span class="kt">IO</span> <span class="nb">()</span>
</span><span class='line'><span class="nf">someFunc</span> <span class="ow">=</span> <span class="n">x</span> <span class="o">&gt;&gt;=</span> <span class="n">putStrLn</span>
</span></code></pre></td></tr></table></div></figure>


<p>Here goes!!!</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'> <span class="o">&gt;</span> <span class="n">stack</span> <span class="n">build</span> <span class="o">&amp;&amp;</span> <span class="n">stack</span> <span class="n">exec</span> <span class="c1">-- github-stats-exe</span>
</span><span class='line'><span class="nf">github</span><span class="o">-</span><span class="n">stats</span><span class="o">-</span><span class="n">exe</span><span class="kt">:</span> <span class="n">user</span> <span class="ne">error</span> <span class="p">(</span><span class="n">https</span> <span class="n">not</span> <span class="n">supported</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Wat. Further inspection of the docs shows a line WAAY DOWN in paragraph 5.</p>

<blockquote><p>NOTE: This package only supports HTTP;</p></blockquote>

<p><img class="center giants" src="http://deliberate-software.com/images/nope_better.gif" width="250" title="giants" alt="giants"></p>

<p>When <del>playing Dark Souls</del>programming Haskell, sometimes the best move
is to run away. I search again. <code>haskell https request</code> returns
&ldquo;http-conduit&rdquo; as the best choice. After adding http-conduit to my cabal, I come
up with this beast without any surprises:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'><span class="nf">query</span> <span class="ow">::</span> <span class="kt">IO</span> <span class="kt">String</span>
</span><span class='line'><span class="nf">query</span> <span class="ow">=</span> <span class="kr">do</span>
</span><span class='line'>    <span class="n">initReq</span> <span class="ow">&lt;-</span> <span class="n">parseUrl</span> <span class="s">&quot;https://api.github.com/search/repositories&quot;</span>
</span><span class='line'>    <span class="kr">let</span> <span class="n">r</span> <span class="ow">=</span> <span class="n">initReq</span>
</span><span class='line'>                   <span class="p">{</span> <span class="n">method</span> <span class="ow">=</span> <span class="s">&quot;GET&quot;</span>
</span><span class='line'>                    <span class="p">,</span> <span class="n">requestHeaders</span> <span class="ow">=</span> <span class="p">[(</span><span class="n">hUserAgent</span><span class="p">,</span> <span class="s">&quot;steveshogren&quot;</span><span class="p">)</span>
</span><span class='line'>                                      <span class="p">,</span> <span class="p">(</span><span class="n">hAuthorization</span><span class="p">,</span> <span class="s">&quot;token PUT_TOKEN_HERE&quot;</span><span class="p">)]}</span>
</span><span class='line'>    <span class="kr">let</span> <span class="n">request</span> <span class="ow">=</span> <span class="n">setQueryString</span> <span class="p">[(</span><span class="s">&quot;q&quot;</span><span class="p">,</span> <span class="kt">Just</span> <span class="s">&quot;tetris+language:assembly&quot;</span><span class="p">)</span>
</span><span class='line'>                                 <span class="p">,(</span><span class="s">&quot;order&quot;</span><span class="p">,</span> <span class="kt">Just</span> <span class="s">&quot;desc&quot;</span><span class="p">)</span>
</span><span class='line'>                                 <span class="p">,(</span><span class="s">&quot;sort&quot;</span><span class="p">,</span> <span class="kt">Just</span> <span class="s">&quot;stars&quot;</span><span class="p">)]</span> <span class="n">r</span>
</span><span class='line'>    <span class="n">manager</span> <span class="ow">&lt;-</span> <span class="n">newManager</span> <span class="n">tlsManagerSettings</span>
</span><span class='line'>    <span class="n">res</span> <span class="ow">&lt;-</span> <span class="n">httpLbs</span> <span class="n">request</span> <span class="n">manager</span>
</span><span class='line'>    <span class="n">return</span> <span class="o">.</span> <span class="n">show</span> <span class="o">.</span> <span class="n">responseBody</span> <span class="o">$</span> <span class="n">res</span>
</span><span class='line'>
</span><span class='line'><span class="nf">someFunc</span> <span class="ow">::</span> <span class="kt">IO</span> <span class="nb">()</span>
</span><span class='line'><span class="nf">someFunc</span> <span class="ow">=</span> <span class="kr">do</span>
</span><span class='line'>   <span class="n">query</span> <span class="o">&gt;&gt;=</span> <span class="n">putStrLn</span>
</span></code></pre></td></tr></table></div></figure>


<p>Huzzah! Results! I&rsquo;m getting back a monster string of json data.</p>

<blockquote><p>&ldquo;\&rdquo;{\\&ldquo;total_count\\&rdquo;:66, &hellip;.}\"</p></blockquote>

<p><img class="center solaire" src="http://deliberate-software.com/images/praisethesun.gif" width="150" title="solaire" alt="solaire"></p>

<h3>Step Three - Parsing JSON</h3>

<p>Time to parse this mega JSON string. Aeson seems to be the biggest contender. To
use Aeson and get the total_count value from the return, I needed the following
additions:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'><span class="cm">{-# LANGUAGE OverloadedStrings #-}</span>
</span><span class='line'><span class="cm">{-# LANGUAGE DeriveGeneric #-}</span>
</span><span class='line'>
</span><span class='line'><span class="kr">import</span> <span class="nn">GHC.Generics</span>
</span><span class='line'><span class="kr">import</span> <span class="nn">Data.Aeson</span>
</span><span class='line'>
</span><span class='line'><span class="kr">data</span> <span class="kt">ResultCount</span> <span class="ow">=</span> <span class="kt">ResultCount</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">total_count</span> <span class="ow">::</span> <span class="kt">Int</span> <span class="p">}</span>
</span><span class='line'>  <span class="kr">deriving</span> <span class="p">(</span><span class="kt">Generic</span><span class="p">,</span> <span class="kt">Show</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="kr">instance</span> <span class="kt">ToJSON</span> <span class="kt">ResultCount</span>
</span><span class='line'><span class="kr">instance</span> <span class="kt">FromJSON</span> <span class="kt">ResultCount</span>
</span></code></pre></td></tr></table></div></figure>


<p>ResultCount allows me to use <code>decode</code> from aeson instead of <code>show</code> to
parse the &ldquo;total_count&rdquo; from the JSON response into an Int. Sure enough, it
does!</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'><span class="cm">{-# LANGUAGE OverloadedStrings #-}</span>
</span><span class='line'><span class="cm">{-# LANGUAGE DeriveGeneric #-}</span>
</span><span class='line'><span class="kr">module</span> <span class="nn">Lib</span>
</span><span class='line'>    <span class="p">(</span> <span class="nf">someFunc</span>
</span><span class='line'>    <span class="p">)</span> <span class="kr">where</span>
</span><span class='line'>
</span><span class='line'><span class="kr">import</span> <span class="nn">Control.Monad</span>
</span><span class='line'><span class="kr">import</span> <span class="nn">Network</span>
</span><span class='line'><span class="kr">import</span> <span class="nn">Network.HTTP.Conduit</span>
</span><span class='line'><span class="kr">import</span> <span class="nn">Network.HTTP.Types.Header</span>
</span><span class='line'><span class="kr">import</span> <span class="nn">GHC.Generics</span>
</span><span class='line'><span class="kr">import</span> <span class="nn">Data.Aeson</span>
</span><span class='line'>
</span><span class='line'><span class="kr">data</span> <span class="kt">ResultCount</span> <span class="ow">=</span> <span class="kt">ResultCount</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">total_count</span> <span class="ow">::</span> <span class="kt">Int</span> <span class="p">}</span>
</span><span class='line'>  <span class="kr">deriving</span> <span class="p">(</span><span class="kt">Generic</span><span class="p">,</span> <span class="kt">Show</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="kr">instance</span> <span class="kt">ToJSON</span> <span class="kt">ResultCount</span>
</span><span class='line'><span class="kr">instance</span> <span class="kt">FromJSON</span> <span class="kt">ResultCount</span>
</span><span class='line'>
</span><span class='line'><span class="nf">query</span> <span class="ow">::</span> <span class="kt">IO</span> <span class="p">(</span><span class="kt">Maybe</span> <span class="kt">Int</span><span class="p">)</span>
</span><span class='line'><span class="nf">query</span> <span class="ow">=</span> <span class="kr">do</span>
</span><span class='line'>    <span class="n">initReq</span> <span class="ow">&lt;-</span> <span class="n">parseUrl</span> <span class="s">&quot;https://api.github.com/search/repositories&quot;</span>
</span><span class='line'>    <span class="kr">let</span> <span class="n">r</span> <span class="ow">=</span> <span class="n">initReq</span>
</span><span class='line'>                   <span class="p">{</span> <span class="n">method</span> <span class="ow">=</span> <span class="s">&quot;GET&quot;</span>
</span><span class='line'>                    <span class="p">,</span> <span class="n">requestHeaders</span> <span class="ow">=</span> <span class="p">[(</span><span class="n">hUserAgent</span><span class="p">,</span> <span class="s">&quot;steveshogren&quot;</span><span class="p">)</span>
</span><span class='line'>                                      <span class="p">,</span> <span class="p">(</span><span class="n">hAuthorization</span><span class="p">,</span> <span class="s">&quot;token PUT_TOKEN_HERE&quot;</span><span class="p">)]}</span>
</span><span class='line'>    <span class="kr">let</span> <span class="n">request</span> <span class="ow">=</span> <span class="n">setQueryString</span> <span class="p">[(</span><span class="s">&quot;q&quot;</span><span class="p">,</span> <span class="kt">Just</span> <span class="s">&quot;tetris+language:assembly&quot;</span><span class="p">)</span>
</span><span class='line'>                                 <span class="p">,(</span><span class="s">&quot;order&quot;</span><span class="p">,</span> <span class="kt">Just</span> <span class="s">&quot;desc&quot;</span><span class="p">)</span>
</span><span class='line'>                                 <span class="p">,(</span><span class="s">&quot;sort&quot;</span><span class="p">,</span> <span class="kt">Just</span> <span class="s">&quot;stars&quot;</span><span class="p">)]</span> <span class="n">r</span>
</span><span class='line'>    <span class="n">manager</span> <span class="ow">&lt;-</span> <span class="n">newManager</span> <span class="n">tlsManagerSettings</span>
</span><span class='line'>    <span class="n">res</span> <span class="ow">&lt;-</span> <span class="n">httpLbs</span> <span class="n">request</span> <span class="n">manager</span>
</span><span class='line'>    <span class="n">return</span> <span class="o">.</span> <span class="n">liftM</span> <span class="n">total_count</span> <span class="o">.</span> <span class="n">decode</span> <span class="o">.</span> <span class="n">responseBody</span> <span class="o">$</span> <span class="n">res</span>
</span><span class='line'>
</span><span class='line'><span class="nf">someFunc</span> <span class="ow">::</span> <span class="kt">IO</span> <span class="nb">()</span>
</span><span class='line'><span class="nf">someFunc</span> <span class="ow">=</span> <span class="n">query</span> <span class="o">&gt;&gt;=</span> <span class="n">print</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>Puts out: <code>Just 66</code>. Success! Wait. 66 isn&rsquo;t the same count I got when
running from the browser. Check again. Sure enough, browser comes up with a
totally different count.</p>

<p><img class="center solaire" src="http://deliberate-software.com/images/come_at_me_bro.gif" width="400" title="solaire" alt="solaire"></p>

<p>Maybe the query request isn&rsquo;t correct? Adding a <code>print request</code> on line 31
after building the request shows:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'><span class="kt">Request</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">host</span>                 <span class="ow">=</span> <span class="s">&quot;api.github.com&quot;</span>
</span><span class='line'>  <span class="n">port</span>                 <span class="ow">=</span> <span class="mi">443</span>
</span><span class='line'>  <span class="n">secure</span>               <span class="ow">=</span> <span class="kt">True</span>
</span><span class='line'>  <span class="n">requestHeaders</span>       <span class="ow">=</span> <span class="p">[(</span><span class="s">&quot;User-Agent&quot;</span><span class="p">,</span><span class="s">&quot;steveshogren&quot;</span><span class="p">),(</span><span class="s">&quot;Authorization&quot;</span><span class="p">,</span><span class="s">&quot;token PUT_TOKEN_HERE&quot;</span><span class="p">)]</span>
</span><span class='line'>  <span class="n">path</span>                 <span class="ow">=</span> <span class="s">&quot;/search/repositories&quot;</span>
</span><span class='line'>  <span class="n">queryString</span>          <span class="ow">=</span> <span class="s">&quot;?q=tetris%2Blanguage%3Aassembly&amp;order=desc&amp;sort=stars&quot;</span>
</span><span class='line'>  <span class="n">method</span>               <span class="ow">=</span> <span class="s">&quot;GET&quot;</span>
</span><span class='line'>  <span class="n">proxy</span>                <span class="ow">=</span> <span class="kt">Nothing</span>
</span><span class='line'>  <span class="n">rawBody</span>              <span class="ow">=</span> <span class="kt">False</span>
</span><span class='line'>  <span class="n">redirectCount</span>        <span class="ow">=</span> <span class="mi">10</span>
</span><span class='line'>  <span class="n">responseTimeout</span>      <span class="ow">=</span> <span class="kt">Just</span> <span class="p">(</span><span class="o">-</span><span class="mi">3425</span><span class="p">)</span>
</span><span class='line'>  <span class="n">requestVersion</span>       <span class="ow">=</span> <span class="kt">HTTP</span><span class="o">/</span><span class="mf">1.1</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The queryString isn&rsquo;t right! <code>?q=tetris%2Blanguage%3Aassembly&amp;order=desc&amp;sort=stars</code> It encoded my <code>+</code>
and <code>:</code>! After an hour of reading through docs and researching URL encoding
specs, it dawns on me. <code>+</code> is an encoded whitespace.</p>

<blockquote><p>No face-palm gif could ever represent the shear magnitude of my current
emotions&hellip; You&rsquo;ll have to use your imagination</p></blockquote>

<p>I change my query to <code>("q", Just "tetris language:assembly")</code> and the right
count comes back! <code>Just 354</code></p>

<p>I finally have something that correctly fetches a count of repositories from
GitHub and parses it into an Int. After over four hours of <del>Dark
Souls</del>Haskell punishment, we deserve to enjoy a bonfire!</p>

<p><img class="center solaire" src="http://deliberate-software.com/images/solaire_sitting.gif" width="400" title="solaire" alt="solaire"></p>

<h2>Edit: Bonus Round!</h2>

<p>Thanks to
<a href="http://bitemyapp.com/posts/2016-02-06-haskell-is-not-trivial-not-unfair.html">Chris Allen</a>
and
<a href="https://www.reddit.com/r/programming/comments/44hdl6/haskell_is_the_dark_souls_of_programming/czqaxfu">/u/JeanParker</a>
for pointing me towards <a href="http://www.serpentine.com/wreq/">wreq</a>, which weirdly
didn&rsquo;t come up when I looked around for libs yesterday. Yep, it was 6th on the
Google when searching for <code>haskell https get</code>. <code>Network.HTTP</code> is the
top three results, and that doesn&rsquo;t even <em>do</em> https.</p>

<p>Â¯\<em>(ãƒ„)</em>/Â¯</p>

<p>Armed with their helpful suggestions, I knocked this out this morning.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'><span class="kr">import</span> <span class="nn">Network.Wreq</span>
</span><span class='line'><span class="kr">import</span> <span class="nn">Control.Lens</span>
</span><span class='line'><span class="kr">import</span> <span class="nn">Data.Aeson</span>
</span><span class='line'><span class="kr">import</span> <span class="nn">Data.Aeson.Lens</span>
</span><span class='line'><span class="kr">import</span> <span class="k">qualified</span> <span class="nn">Data.Text</span> <span class="k">as</span> <span class="n">T</span>
</span><span class='line'><span class="kr">import</span> <span class="k">qualified</span> <span class="nn">Data.ByteString.Char8</span> <span class="k">as</span> <span class="n">BS</span>
</span><span class='line'>
</span><span class='line'><span class="nf">opts</span> <span class="ow">::</span> <span class="kt">String</span> <span class="ow">-&gt;</span> <span class="kt">String</span> <span class="ow">-&gt;</span> <span class="kt">Options</span>
</span><span class='line'><span class="nf">opts</span> <span class="n">lang</span> <span class="n">token</span> <span class="ow">=</span> <span class="n">defaults</span> <span class="o">&amp;</span> <span class="n">param</span> <span class="s">&quot;q&quot;</span> <span class="o">.~</span> <span class="p">[</span><span class="kt">T</span><span class="o">.</span><span class="n">pack</span> <span class="o">$</span> <span class="s">&quot;tetris language:&quot;</span> <span class="o">++</span> <span class="n">lang</span><span class="p">]</span>
</span><span class='line'>                        <span class="o">&amp;</span> <span class="n">param</span> <span class="s">&quot;order&quot;</span> <span class="o">.~</span> <span class="p">[</span><span class="s">&quot;desc&quot;</span><span class="p">]</span>
</span><span class='line'>                        <span class="o">&amp;</span> <span class="n">param</span> <span class="s">&quot;sort&quot;</span> <span class="o">.~</span> <span class="p">[</span><span class="s">&quot;stars&quot;</span><span class="p">]</span>
</span><span class='line'>                        <span class="o">&amp;</span> <span class="n">header</span> <span class="s">&quot;Authorization&quot;</span> <span class="o">.~</span> <span class="p">[</span><span class="kt">BS</span><span class="o">.</span><span class="n">pack</span> <span class="o">$</span> <span class="s">&quot;token &quot;</span> <span class="o">++</span> <span class="n">token</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'><span class="nf">query</span> <span class="n">lang</span> <span class="ow">=</span> <span class="kr">do</span>
</span><span class='line'>    <span class="n">token</span> <span class="ow">&lt;-</span> <span class="n">readFile</span> <span class="s">&quot;token&quot;</span>
</span><span class='line'>    <span class="n">r</span> <span class="ow">&lt;-</span> <span class="n">getWith</span> <span class="p">(</span><span class="n">opts</span> <span class="n">lang</span> <span class="n">token</span><span class="p">)</span> <span class="s">&quot;https://api.github.com/search/repositories&quot;</span>
</span><span class='line'>    <span class="n">return</span> <span class="o">$</span> <span class="n">r</span> <span class="o">^?</span> <span class="n">responseBody</span> <span class="o">.</span> <span class="n">key</span> <span class="s">&quot;total_count&quot;</span> <span class="o">.</span> <span class="n">_Number</span>
</span></code></pre></td></tr></table></div></figure>


<p>MUCH better. This includes reading my token from file called &ldquo;token&rdquo; so I don&rsquo;t
accidentally commit it. Also includes building up the different query options
based on inputs, which was the next step. Thanks y'all.</p>

<p><img class="center solaire" src="http://deliberate-software.com/images/solaire_idle.gif" width="200" title="solaire" alt="solaire"></p>

<blockquote><p>Pixel gifs sourced from
<a href="http://zedotagger.deviantart.com/gallery/54317550/Dark-Souls">zedotagger</a> on
deviantart, thanks zedotagger!</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Development Disappointment Disorder]]></title>
    <link href="http://deliberate-software.com/development-disappointment-disorder/"/>
    <updated>2016-02-04T16:58:25-05:00</updated>
    <id>http://deliberate-software.com/development-disappointment-disorder</id>
    <content type="html"><![CDATA[<blockquote><p>&ldquo;We&rsquo;ve never had a successful release&rdquo;</p></blockquote>

<p>You just finished this really hard feature. The whole thing was worse than
anyone realized. Not only that, but the feature wasn&rsquo;t clearly explained, so you
lost time churning on the actual requirements. Despite all the confusion,
iteration, and technical challenges, you managed to get it working! You look
back, savoring how much you have learned and grown.</p>

<p>You show it off to the product owner. He barely seems to hear you. His shoulders
slump in disappointment.</p>

<blockquote><p>&ldquo;Great, but we are still four weeks behind.&rdquo;</p></blockquote>

<p>Your team is infected with <strong>Development Disappointment Disorder</strong>.</p>

<p>It looks different in every team. The manager who sets unreasonable deadlines
then demands overtime. The project manager who gets angry at every little thing.
Developers who feel they need to point fingers to shift the blame. The boss who
is never happy no matter what is achieved. The team that feels they have never
had a successful release.</p>

<h2>Unreasonable Expectations</h2>

<p><strong>Development Disappointment Disorder is caused by unreasonable expectations.</strong>
Someone thinks, hopes, or wishes they can get 100 units of productivity from a
team and codebase that only can sustain 30-40 units. They want the impossible,
and no amount of cajoling, pressuring, yelling, or passive aggressive comments
will change reality.</p>

<p>Productivity is not completely a people problem. Every team has an upper limit
to what they can produce in a system. The human mind has boundaries. Very real
limits exist given the team&rsquo;s size and existing codebases. While new technical
tools and libraries enable more productive teams, these changes often are
hindered by an existing codebase. The team with a multi-million line C# codebase
is not going to get much value from the productivity gains possible with
Haskell&rsquo;s type system.</p>

<p>You cannot rush software development without incurring a drop in quality,
stability, or maintainability. The work is complex and difficult: every expert
in our field agrees with adages like &ldquo;adding developers to a late project makes
it later.&rdquo;</p>

<h2>Suggestions</h2>

<ul>
<li><p><strong>For the technical staff:</strong> How accurate are your estimates? How consistent
is your throughput? Do you regularly under-estimate your features? Do
developers often say, &ldquo;oh, that&rsquo;s only&hellip;&rdquo;? Are some types of features &ldquo;always
late&rdquo;?</p>

<p>You must learn to be blameless in this situation, and that means striving to
give as accurate an estimate as you can with what you have. Throwing estimates
out without much thought only makes things worse. How long did a similar
feature take last time? If you regularly have inaccurate estimates in a
certain area of the system, put extra care into those estimates, working to
provide the best estimate you can.</p></li>
<li><p><strong>For the business:</strong> There is only so many units of productivity that fit
into a given time frame.You need to assess every feature and estimate, and
consider the risk with each.</p>

<p>Acting disappointed, angry, or passive aggressive will not get you more
features, it will only demotivate the technical staff. You will get more
consistency, because they will consistently work slower. You will get more
hours, but each hour will see a
<a href="http://www.igda.org/?page=crunchsixlessons">massive drop in valuable work.</a></p></li>
</ul>


<blockquote><p>Acting disappointed, angry, or passive aggressive will not get you more features</p></blockquote>

<p>  If you are unhappy with the work produced, you need to consider why. Were you
  told it would be sooner? Did you promise that to someone? What changed since
  then? If the feature isn&rsquo;t actually needed, why did you pick it? If spending
  twice as much made it not worthwhile, was it really a good choice?</p>

<p>  What would happen if you didn&rsquo;t promise <em>when</em> the features would be done?
  Either way, your promise doesn&rsquo;t change when it will be done, it just adds
  risk to your credibility. Often the only thing to be gained by giving out
  estimates and time-lines is risk. Unless the customer is truly blocked on your
  estimate, simply communicate what you are doing, not when you hope it will be
  done.</p>

<blockquote><p>Often the only thing to be gained by telling customers an estimate is risk</p></blockquote>

<ul>
<li><strong>For the team:</strong> Celebrate your successes. Abolish the notion of a &ldquo;failed
release&rdquo;. Build up a culture that finds little victories throughout the
release.</li>
</ul>


<p>With these tools you can fight Development Disappointment Disorder. You can
start to celebrate what you do accomplish. <strong>A team that is energized and motivated will accomplish more.</strong> The team that celebrates their work will strive for more.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Designing a Compassionate Interview for a High Performing Individual]]></title>
    <link href="http://deliberate-software.com/compassionate-interviewing/"/>
    <updated>2016-01-11T07:01:58-05:00</updated>
    <id>http://deliberate-software.com/compassionate-interviewing</id>
    <content type="html"><![CDATA[<p><img class="right emailImage" src="http://deliberate-software.com/images/2.Why_Algorithm_Important.png" width="400" title="finding" alt="finding"></p>

<p>After my post <a href="http://deliberate-software.com/on-defeat/">Interview Humiliation</a>, a number of
people have asked me how I interview compassionately. I strive to make my interviews as
stress-free and respectful as possible while still rendering a yes/no at the end.</p>

<p>Any good interview process needs to start with goals:</p>

<ul>
<li>Respect the candidate&rsquo;s time</li>
<li>Make the candidate comfortable</li>
<li>Under-skilled candidates should feel no shame</li>
<li>Both passing and failing candidates should want to tell their friends to
apply</li>
<li>We should render the same decision if the interview is repeated multiple
times (with different exercises each time)</li>
<li>The candidate should know the process in advance and not be able to earn a
pass through short term &ldquo;cramming&rdquo;</li>
<li>The candidate should feel we are all working collaboratively, instead of us
against them</li>
</ul>


<h2>The Ideal Candidate</h2>

<p><img class="right emailImage" src="http://deliberate-software.com/images/whiteboards2.jpg" width="400" title="'whiteboard 'whiteboard'" ></p>

<p>We want to hire for high-level skills. Fast learning, strategic thinking, good
design, and emotional intelligence are more important than rote memorization. We
care more about &ldquo;ability to grow&rdquo; than &ldquo;current skills&rdquo;. Our job does not
involve whiteboard coding, puzzle questions, or anything that can be discovered
with a decent IDE, so those are left out.</p>

<p>We care a lot about &ldquo;no jerks&rdquo;. We want our workplace to be fun, relaxing, and
supportive. We want candidates who are comfortable being wrong and corrected
regularly, and who can correct others politely.</p>

<p>We do not care about any question that could be easily be answered by Google. If
an internet search can easily answer the question, it is pointless to care if
the human in front of me happens to know it. Given the search revolution of the
last decade, the value of memorized facts falls to almost zero. Facts as a proxy
for actual job skill probably used to be accurate until the internet allowed
every interview question to become public record.</p>

<h2>Scoring</h2>

<p>I hope someone one day invents a perfect productivity score! For now, counting
bugs, features, correct answers, etc, are all proxies that poorly represent
actual productivity. If those actually worked, why don&rsquo;t we use them for raises,
bonuses, and reviews? Because. They. Do. Not. Work.</p>

<blockquote><p>Counting bugs, features, correct answers, etc, are all proxies that poorly
represent actual productivity</p></blockquote>

<p>A well-designed rubric <em>can</em> work. A rubric is a way of measuring the
&ldquo;un-measurable&rdquo;. You probably have seen them in year-end reviews. A grid with
categories on one side, and a 1-5 score with a paragraph explanation for each.
We only score what has to be explained with a description from the interviewers.</p>

<blockquote><p>&ldquo;How was the candidate&rsquo;s communication skills?&rdquo;</p>

<p>&ldquo;They misunderstood me only a few times, and I only had trouble understanding
them once or twice. The watchers all felt like the communication was pretty
good. They were definitely above average: &frac34;.&rdquo;</p>

<p>&ldquo;How about design skills?&rdquo;</p>

<p>&ldquo;They were able to clearly design every abstraction. They deeply understood
passing functions as values, see how this takes a function for polymorphism?
We prodded a bit, and they were able to give a couple other ways to achieve
the same behavior. We all agreed it was best the way it was. All said, they
did most of the heavy lifting for this whole project, and it is superbly
designed: 4/4&rdquo;</p></blockquote>

<h2>Our Process</h2>

<p>To &ldquo;level-set&rdquo; our expectations, we had several of our developers at different
levels perform the interview live in front of the team. We made them use various
languages and exercises they had never seen before. This &ldquo;level-setting&rdquo; helped
us to see how known good developers perform when way out of their element and
uncomfortable.</p>

<p>All interviews are assigned to developers randomly, and all are expected to
participate. The candidate should have two developers around at all time, to
prevent bias by any individual. One pairs while the others rotate watching
silently. The watchers are expected to stay quiet, to prevent confusion.</p>

<p>Before the first interview, the candidate is sent something very much like this
document. We think there is no way someone could &ldquo;fake us out&rdquo; on any criteria.
The things we look for take years of practice to cultivate, so &ldquo;cramming&rdquo; should
not help much (if at all). The one exception to that is if they have never heard
of Test Driven Development, we do recommend they Google it for a few minutes, as
prior knowledge helps smooth the phone screen considerably.</p>

<h3>Phone Screen</h3>

<p>We pair program over the internet using a shared programming environment called
<a href="c9.io">Cloud9</a>. We (currently) have projects set up for Java, JavaScript,
Python, Ruby, and C#. The candidate may choose their desired language. We then
pair program using Test Driven Development to build out a well defined exercise.
The candidate may entirely verbally &ldquo;navigate&rdquo;, while one of our programmers
entirely &ldquo;drives&rdquo; and types out the code. This is acceptable.</p>

<p>If the candidate has never seen any of those languages, Google or asking the
interviewer is totally fair game, and does not count against them. If the
candidate has completely no idea, the interviewer is expected to politely
complete the task while keeping the candidate engaged.</p>

<p>The phone screen is under an hour, with 30 minutes for the pair programming.
The remaining time is for questions about our office. We let them drive the
second half of the interview, asking us questions about what our team and
process is like. We attempt to answer clearly and honestly, both good and bad.</p>

<h3>In-Person</h3>

<p>The in-person interview is from 9:30 to 3:00. We are not thrilled with how much
time it takes and would like to shorten it, but so far have no superior
alternatives.</p>

<p>At the start of the day, we spend 30 minutes chatting and asking questions back
and forth. Our questions are meant to tell us about the candidate&rsquo;s background
and &ldquo;programming philosophy&rdquo;: books read, favorite languages, interesting
projects they&rsquo;ve worked on, etc. We allow them as many questions as they would
like.</p>

<p>The rest of the day is very much like a &ldquo;typical day at work&rdquo;, but with
programming exercises instead of production code. We pair program on the
exercises, following the same flow from the phone screen. The exercises have no
&ldquo;tricks&rdquo;, they are reasonably straightforward and don&rsquo;t require any prior domain
or CS theory knowledge. Throughout the day, the candidate is free to get food,
drinks, and run to the restroom.</p>

<p>The developer who is pairing has a primary role of making the candidate feel
comfortable and accomplish any effort with a 50/50 split of effort. If the
candidate really is struggling, the developer is expected to keep working with
the candidate, even to the point of doing the hard parts and giving them the
easy parts. A completely unskilled candidate will see their pair doing all the
work with a smile and politely asking for &ldquo;help&rdquo; with variable names and such.</p>

<p>The developer pair is also expected to give the candidate some time to think
if they are lost. The candidate at the end of the interview should feel like
they have a complete understanding of what happened. The exercises are
designed to be &ldquo;too much to finish&rdquo;, and as such finishing the exercises is
not a success criteria as much as working well together and writing
maintainable code.</p>

<p>We feel this gives us a highly accurate understanding of a candidate&rsquo;s skill,
while still putting them at ease. Many times we&rsquo;ve seen a terrified candidate
light up fifteen minutes into a pairing session while watching their developer
pair do most of the work. Something about seeing code written &ldquo;activates&rdquo; even
the most nervous candidate. All the thoughts of nerves turn into a concrete
&ldquo;oh, wait, I know what he just did, and I&rsquo;ve got an opinion on that!&rdquo;</p>

<h2>Conclusion</h2>

<p>We like this process because it is exactly what our job is like. We pair program
for a lot of work, and the interview is meant to give candidates a sample of
that. No one should show up for their first day of work and say, &ldquo;wait, I
actually hate pair programming.&rdquo; By thinking through our goals and an &ldquo;ideal
candidate&rdquo;, we were able to design a process that meets those goals.</p>

<p>I recommend you take an hour to write out your goals and needs. Then see how
your interview process matches. Are you looking for a &ldquo;human Google&rdquo;? Does your
job involve whiteboard coding? Would telling the candidate the exact process in
advance with all the questions let them game the system? Because every single
interview question I&rsquo;ve seen is up on Google to be found and memorized on easy
to read lists. How much time does your process take? Could it be shortened? Does
it require the candidate to spend a lot of time at home? You might be surprised
at what you find!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How Daily Meditation Improved My Technical Leadership]]></title>
    <link href="http://deliberate-software.com/daily-meditation-greatly-improved-my-technical-leadership/"/>
    <updated>2015-12-14T07:50:38-05:00</updated>
    <id>http://deliberate-software.com/daily-meditation-greatly-improved-my-technical-leadership</id>
    <content type="html"><![CDATA[<p><img class="right emailImage" src="http://deliberate-software.com/images/meditation.jpg" width="200" title="meditation" alt="meditation"></p>

<p>A couple years ago, a coworker told me a success story about mindful meditation.
He explained how his wife took a class that required an hour of daily meditation
for a whole month. He reported that she found it uncomfortable, but the effects
were astounding. She claimed to feel more relaxed, more focused, and more
&ldquo;herself&rdquo;. She found new reserves of motivation. She dropped the book she&rsquo;d been
trying to write for years, and started a business. After that business failed,
she started another, this time successfully.</p>

<p>Immediately convinced, I started by listening to guided
<a href="https://en.wikipedia.org/wiki/Mindfulness#Mindfulness_meditation">mindfulness meditations</a>
on YouTube and <a href="https://www.headspace.com/science">phone apps</a>. After a couple
weeks of that, I started doing breathing exercises on my own while sitting
listening to rain sounds. I made a habit of doing it for about an hour every day
on my lunch break. A few months later, I hated it.</p>

<p>For whatever reason, after each session I would feel very uncomfortable. I would
be confronted with emotions that made me feel worthless and embarrassed. My mind
was bringing forward all these painful memories and feelings. Over time, I
started to dread the lunch break.</p>

<h2>The Revelation</h2>

<p>Then, one day, I had a profound sense of understanding. I realized what was
causing these negative emotions. I was in the middle of a major push to guide
our team to adopt a new programming language. While I&rsquo;d led many such
initiatives before, I saw that I&rsquo;d always had the same struggles. My ego and
self-worth were so tied into &ldquo;my&rdquo; campaigns that I wasn&rsquo;t able to clearly hear
criticism. When people pointed out legitimate concerns or weaknesses, I would
get embarrassed and take it as a personal failure.</p>

<p>I could see, from the very beginning, my current &ldquo;campaign&rdquo; had been poorly
executed. After researching the new technology for a long time, I felt like I
saw a place where it could solve some of our needs. Instead of carefully writing
out a proposal, I &ldquo;half-jokingly&rdquo; brought it up whenever I could. When the
listeners didn&rsquo;t immediately react positively, I quickly retracted the idea,
&ldquo;just kidding&rdquo;. Over weeks I dropped not-so-subtle hints, &ldquo;this would be better
with&hellip;&rdquo;, or, &ldquo;we wouldn&rsquo;t have this problem if&hellip;&rdquo;. Instead of convincing
anyone of anything, I just broadcasted to everyone how insecure I felt about the
issue. Everyone could clearly see that I cared, but I was too afraid to put
myself out there and make a serious suggestion. For months nothing changed, and
I felt more and more bitter that &ldquo;my idea&rdquo; wasn&rsquo;t being listened to. In reality,
I hadn&rsquo;t even made a serious suggestion yet!</p>

<p>Eventually, the people around me started to listen and research the new
language. They agreed it really did solve a need we had. After a while, enough
people got on board that we started using it more. Even then, I held tightly to
&ldquo;my idea&rdquo;, afraid that it would prove to be a failure. When someone ran into
issues, I would get defensive. Even though I tried to keep my emotions in check,
I clearly took any criticism of the language as if it was a personal failing, no
matter how legitimate. I&rsquo;d tightly coupled my ego to my ideas, and I always had.</p>

<p>After a few months of meditating, this idea rocked my world. My negative
emotions came from a realization that my actions were not in line with my
values. I don&rsquo;t want my self-worth to be tied to a simple tool. No tool is worth
it. Every tool fails. I&rsquo;d sold myself short, lowered my self-worth to that of a
tool. This completely blocked my ability to be an effective technical leader.</p>

<p>I couldn&rsquo;t hear criticism of my ideas without getting defensive, so I couldn&rsquo;t
think critically. I couldn&rsquo;t help work out solutions to the best of my ability,
because that would mean admitting personal failure. Every side comment or
momentary struggle felt like a catastrophe.</p>

<p>After realizing this, I felt a wave of relief. My emotional struggle leading
this programming language change made sense! And I had an easy way out! I simply
had to distance myself from my ideas, separate my self-worth from my tools. The
more I meditated, the easier it got.</p>

<h2>Present Day</h2>

<p>While I still sometimes get the old pang of embarrassment or defensiveness, now
I understand where it comes from, and how to move forward. I can let my ideas
go. I can consider ideas critically. I can make changes and adjustments if the
ideas are not working.</p>

<p>This summer I decided to write up my learning. I wanted to always be able to
look back and remember these important lessons. My write-up was the seed for the
book <a href="https://leanpub.com/convincingcoworkers">Convincing Coworkers</a>. I explain
the lessons learned from implementing a half dozen major technical changes, and
how I learned to lead without letting my ego cloud my thinking.</p>

<p>If you want to become a more effective leader, I highly recommend a practice of
daily meditation. Meditation gives your mind a chance to deeply consider your
actions and values. It allows your subconscious to reflect on what and why you
act.</p>

<p>Not everyone will struggle from the same issues as me. Every leader has a
different set of challenges and situations. Meditation lets your mind analyze
your unique weaknesses and strengths, coming up with a tailored perspective.
Meditating allows your mind to creatively look for ways to improve itself. While
rarely comfortable, this process can have incredible benefits.</p>

<h2>Appendix: &ldquo;I&rsquo;m uncomfortable with the connotations of meditation&rdquo;</h2>

<p>You may feel uncomfortable with meditation because of its current strong
associations with religion. Meditation is not inherently religious. I consider
meditation like an exercise routine for the mind. If you are religious, and
exercise your body as a form of religious expression, exercise is a religious
practice. If you are not religious, and you exercise to improve your health and
well-being, exercise is a secular practice. Meditation is just a form of mental
exercise. Simple as that.</p>

<p>Meditation is a tool, and the tool wielder determines its use. Don&rsquo;t let a fear
of the connotations of meditation stop you from experiencing improved
leadership, creativity, and focus!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Conj 2015 - Teaching Clojure]]></title>
    <link href="http://deliberate-software.com/teaching-clojure/"/>
    <updated>2015-11-18T11:19:10-05:00</updated>
    <id>http://deliberate-software.com/teaching-clojure</id>
    <content type="html"><![CDATA[<p>My talk at Conj 2015, enjoy!
<a href="https://www.youtube.com/watch?v=BsLiPt90HDo">Teaching Clojure</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Interview Humiliation]]></title>
    <link href="http://deliberate-software.com/on-defeat/"/>
    <updated>2015-10-29T19:01:00-04:00</updated>
    <id>http://deliberate-software.com/on-defeat</id>
    <content type="html"><![CDATA[<p>(All these great ideas, but no one is listening? Check out my
book: <a href="https://leanpub.com/convincingcoworkers">Convincing Coworkers</a>)</p>

<p>One day, I went into an interview, and I was humiliated.</p>

<h3>The Setup</h3>

<p>I used to think very highly of myself. This was early on in the Test Driven
Development (TDD) craze, and I was one of the best I knew at it. I knew
interfaces, classes, mocking frameworks, and best practices. I&rsquo;d been taught all
the tricks from some very smart people, and my confidence was high. Not only
that, but I&rsquo;d just finished at work the restoration of an abandoned legacy
codebase to a bug-free, fully tested state completely on my own.</p>

<p>I&rsquo;d shipped Java, PHP, Perl, C#, and VB.NET, and I hadn&rsquo;t been programming more
than a couple years. My first job, they&rsquo;d made me a team lead over some very
senior developers within a year of my hire date. I was learning Clojure and
Common Lisp, and had just shipped an Android game I made entirely alone
(including the 2D physics engine).</p>

<p>I thought I was incredible. Yet, due to an overwhelming sense of Imposter
Syndrome, I keenly knew that there were things I didn&rsquo;t know. I&rsquo;m mostly self
taught, so a lot of common CS concepts felt alien. I was waking up before work
and teaching myself algorithms, lisps, and math.</p>

<p>Enter Company A.</p>

<p>I flew through the phone screen &ldquo;this is the best phone screen we&rsquo;ve seen!&rdquo; Of
course it is. &ldquo;Your resume is very impressive.&rdquo; Oh, I know!</p>

<p>I get to the on-site interview.</p>

<h3>The On-Site</h3>

<p>I hadn&rsquo;t been thoughtful enough to ask what to wear, so I wore a suit. I was
asked to present a project I&rsquo;d worked on, and I picked my recently shipped
physics game that was up on Google Play. I walked into the reception area a few
minutes early.</p>

<pre><code>"You are 25 minutes late."
</code></pre>

<p>What?! I explain that I have the email saying 9:30! No matter, &ldquo;hurry, they are
waiting!&rdquo; Maybe I can salvage this. I walk into a conference room with a dozen
people sitting around a table looking bored and pissed.</p>

<pre><code>"Let's see your presentation."
</code></pre>

<p>I start to open up my laptop. Meanwhile, they start to joke around to each other:</p>

<pre><code>"Oh, wow, Linux, what is this, 2003? I'd hoped I'd never have to see the
grub boot screen again! Can't you afford a real machine?"
</code></pre>

<p>I try to joke back while multitasking with my laptop. They only have the Mac
projector cable. No adapter. I&rsquo;d thought ahead, and handed one of the developers
a thumb drive with the presentation and code. The interviewers are joking and
laughing to each other at my choice of clothes.</p>

<pre><code>"A suit, classic, where are you interviewing after this, a sales job?"
</code></pre>

<p>I roll with it, make some joke about &ldquo;styling&rdquo;. I start presenting about the 2D
physics engine I&rsquo;d written as a learning project for my game. One of the most
interesting parts to me was how I&rsquo;d first written it without any unit testing,
following just Clean Code practices. I then re-wrote it using heavy TDD. The
design turned out very different both times, which I thought was interesting to
see how TDD had influenced the design.</p>

<p>About five minutes in, I am cut off:</p>

<pre><code>"This presentation is bullshit. You have no evidence, nothing valuable to
show, just spurious subjective opinions. You've put up a straw man and now
are trying to knock it down assuming we are idiots. I've seen enough."
</code></pre>

<p>At this point, it has been barely 15 minutes since I walked in. I remain calm
and professional, and start to address the raised concerns. I play the
meta-game, wondering if perhaps this is a test to see how I&rsquo;ll react when
questioned and embarrassed. Even if this wasn&rsquo;t a test, I was determined to be
at my most professional and finish with my head held high.</p>

<p>Five developers walk out before I can finish my first sentence. One of the
remaining six interviewers looks embarrassed and asks if I could live code them
a web scraper in any language instead of the presentation. I turn my laptop
around (still no projector) and ask if PHP is acceptable. They are a Python
shop, and PHP is the closest to what they use that I am comfortable using when
this nervous.</p>

<pre><code>"PHP? Gross. I suppose if it is all you know..."
</code></pre>

<p>Unfortunately, I&rsquo;ve got so much adrenaline in me that it takes me a few tries to
log in. I get on a roll after five minutes, and write the scraper. They throw me
a few more requirements, and within a half hour I&rsquo;ve written stories for and
completed them all. At least two of the interviewers seem quite impressed.
Someone looks at their watch, &ldquo;well, that&rsquo;s all the stories we have, I guess
let&rsquo;s break for lunch.&rdquo;</p>

<p>Lunch is a 35 minute walk up a hill in humid 93F weather, and I am wearing a
suit and dress shoes. When we get back from lunch I am hot, tired, and
foot-sore. I distinctly remember my feet blistering inside my sweat-soaked
patent leather shoes. I am called into the conference room again. At this point,
I am genuinely curious if this is some sort of extreme patience/calmness test,
or if I am being filmed for a reality show. No such luck.</p>

<p>At the head of the table is the developer who &ldquo;called me out&rdquo; for my
presentation. Apparently my lunch mates were supposed to only take an hour, we
took almost 90 minutes. He looks at me, rolls his eyes, and asks in the most
sarcastic tone I have ever heard:</p>

<pre><code>"So, got any questions for me?"
</code></pre>

<p>I ask a few normal questions, meanwhile he is constantly checking his watch and
rolling his eyes. He answers briefly and rudely. I thank him for his time, and
ask him if there is more. He laughs.</p>

<pre><code>"Oh, we are done here."
</code></pre>

<p>I am shown to the door.</p>

<p>I sit in the car for a half hour, wondering what just happened. I look over to
the passenger seat piled high with text books I have been studying, books on
language design, compilers, algorithms, physics engines, TDD, and productivity.</p>

<p>I was asked none of it. I threw up from stress out the car door into their
parking lot.</p>

<h3>Aftermath</h3>

<p>I found out later their recruiter had given me and many other candidates the
wrong time. She was fired shortly after.</p>

<p>I never found out if I had done something to make everyone so angry. I now
suspect that they were massively turned off by a host of things. Polyglot
programming, practicing TDD, the suit, the not Mac, the late arrival, and a bad
presentation probably all contributed to an immediate disqualification. I
rationally realize they were terrible and treated me terribly, but the
embarrassment is still there. I suspect my presentation was terrible from the
get go: that they were expecting some rock-star and instead got me.</p>

<p>A number of times I have woken up in a cold sweat having dreamt about that
interview. In the large scheme of things, a bad interview is such a small thing,
but fear is fear. I still to this day wonder what I did wrong. Was I arrogant,
cocky, insufferable? Did my ego cause them to treat me that way, or was it all
them? What could I have done differently? I was only in there for a few minutes!</p>

<p>Few events in my professional life have shaped me as much as that interview. I
have turned it into a forge for my talent, the anvil on which I beat my pride.
When I don&rsquo;t know something, I am more willing to shrug and laugh it off, all
while learning as fast as I can. When I am humiliated professionally, I know
I&rsquo;ve come through worse and thrived.</p>

<h3>Break The Cycle</h3>

<p>This story fills me with an overwhelming desire to never continue the cycle of
abuse. I strive every interview to try to respectfully work with the candidate,
and never humiliate them. I want every person I interview to leave feeling loved
as a human and respected, even if they are completely incapable to perform the
duties of the job.</p>

<p>When I ask a question, if they struggle, we work it out together. When I ask for
code, we write it together, even if that means I have to do all the work. I can
make myself their servant, while still assessing their skill with accuracy and
dispassion. Those with the skill will show it, and those without will not feel
humiliated. I let them interview me, and if that means they want me to go up to
the whiteboard and struggle through a merge sort, so be it. In this way, I push
back against the interview culture that normalizes degradation and humiliation.</p>

<p>If you are interviewing others, take a serious look at your practices. Would a
failed candidate feel humiliated and disrespected? What will they tell their
coworkers and friends at meetups about your company? Will they talk about
feeling respected, and how they hope to get the chance to work with you one day?
Or will they talk of a group of self-righteous jerks who abuse their power to
make others feel small? You can break the cycle.</p>

<p>(All these great ideas, but no one is listening? Check out my
book: <a href="https://leanpub.com/convincingcoworkers">Convincing Coworkers</a>)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[F# Unit Testing With SimpleMock]]></title>
    <link href="http://deliberate-software.com/f-number-unit-testing/"/>
    <updated>2015-10-21T16:41:00-04:00</updated>
    <id>http://deliberate-software.com/f-number-unit-testing</id>
    <content type="html"><![CDATA[<p>If you are considering using F#, you might be curious how to handle unit test
mocking, especially if you want to use both modules and classes. In a language
like C# or Java, the common method is to a DI container or handmade constructor
injection on a class. These &ldquo;entry points&rdquo; allow for a unit test to replace a
real dependency with a test-only replacement.</p>

<p>I previously posted an example that shows a much simpler way to inject
dependencies called the <a href="http://deliberate-software.com/simplemock-unit-test-mocking/">SimpleMock pattern</a>. The SimpleMock pattern can also be
used in F#, even if you are only using modules.</p>

<h2>SimpleMock in F# Modules</h2>

<p>We will assume you are mocking inside a module and not a class. Mocking inside
an F# class would look much the same as it does in C#, which we showed in the
SimpleMock post. Here is a sample program that does some work and persists the
results.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">let</span> <span class="nv">addAndSave</span> <span class="n">x</span> <span class="n">y</span> <span class="o">=</span>
</span><span class='line'>  <span class="k">let</span> <span class="nv">sum</span> <span class="o">=</span> <span class="n">x</span> <span class="o">+</span> <span class="n">y</span>
</span><span class='line'>  <span class="nn">DBModule</span><span class="p">.</span><span class="n">saveSum</span> <span class="n">sum</span>
</span><span class='line'>  <span class="n">sum</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>To apply the SimpleMock pattern, we can use argument currying by adding a simple
function wrapper.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">let</span> <span class="nv">addAndSave</span><span class="k">&#39;</span> <span class="n">saveSum</span> <span class="n">x</span> <span class="n">y</span> <span class="o">=</span>
</span><span class='line'>  <span class="k">let</span> <span class="nv">sum</span> <span class="o">=</span> <span class="n">x</span> <span class="o">+</span> <span class="n">y</span>
</span><span class='line'>  <span class="n">saveSum</span> <span class="n">sum</span>
</span><span class='line'>  <span class="n">sum</span>
</span><span class='line'><span class="k">let</span> <span class="nv">addAndSave</span> <span class="o">=</span> <span class="n">addAndSave&#39;</span> <span class="nn">DBModule</span><span class="p">.</span><span class="n">saveSum</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Test code</span>
</span><span class='line'><span class="k">let</span> <span class="nv">addAndSave_Test</span> <span class="o">=</span>
</span><span class='line'>  <span class="k">let</span> <span class="nv">calledVar</span> <span class="o">=</span> <span class="n">ref</span> <span class="mi">0</span>
</span><span class='line'>  <span class="k">let</span> <span class="nv">result</span> <span class="o">=</span> <span class="n">addAndSave&#39;</span> <span class="o">(</span><span class="k">fun</span> <span class="n">sum</span> <span class="o">-&gt;</span> <span class="n">calledVar</span> <span class="o">:=</span> <span class="n">sum</span><span class="o">)</span> <span class="mi">1</span> <span class="mi">2</span>
</span><span class='line'>  <span class="nn">Assert</span><span class="p">.</span><span class="n">AreEqual</span><span class="o">(</span><span class="mi">3</span><span class="o">,</span> <span class="n">result</span><span class="o">)</span>
</span><span class='line'>  <span class="nn">Assert</span><span class="p">.</span><span class="n">AreEqual</span><span class="o">(</span><span class="mi">3</span><span class="o">,</span> <span class="o">!</span><span class="n">calledVar</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>We started by renaming the <code>addAndSave</code> function with a trailing <code>'</code>. We
created a new <code>addAndSave</code> that calls <code>addAndSave'</code> with the correct
dependency for the first argument, leaving the rest of the arguments to be
called later. Currying is what allows this ability. The new <code>addAndSave</code>
function only needs the <code>x</code> and <code>y</code> parameters. At test time, we called <code>addAndSave'</code>, passing in the needed dependency, but using a lambda as the
&ldquo;fake&rdquo;. The injection is as close to the dependency use as possible!</p>

<h2>Bonus: SimpleMock Fake Helper</h2>

<p>The earlier replacement for DBModule.saveSum is a bit complex, and it does not
show us how many times the fake was called. We can easily make a helper that
takes parameters and returns them when called, along withe count of times it was
called.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">type</span> <span class="nc">TestFakeResults</span><span class="bp">()</span> <span class="o">=</span>
</span><span class='line'>  <span class="k">member</span> <span class="k">val</span> <span class="n">timesCalled</span> <span class="o">=</span> <span class="mi">0</span> <span class="k">with</span> <span class="n">get</span><span class="o">,</span><span class="n">set</span>
</span><span class='line'>  <span class="k">member</span> <span class="k">val</span> <span class="n">args</span><span class="o">:</span> <span class="kt">obj</span> <span class="kt">list</span> <span class="o">=</span> <span class="bp">[]</span> <span class="k">with</span> <span class="n">get</span><span class="o">,</span><span class="n">set</span>
</span><span class='line'>
</span><span class='line'><span class="k">let</span> <span class="nv">makeFake_OneArg</span> <span class="bp">()</span> <span class="o">=</span>
</span><span class='line'>  <span class="k">let</span> <span class="nv">results</span> <span class="o">=</span> <span class="k">new</span> <span class="n">TestFakeResults</span><span class="bp">()</span>
</span><span class='line'>  <span class="k">let</span> <span class="nv">fake</span> <span class="o">=</span> <span class="o">(</span><span class="k">fun</span> <span class="n">p1</span> <span class="o">-&gt;</span>
</span><span class='line'>                  <span class="n">results</span><span class="o">.</span><span class="n">args</span> <span class="o">&lt;-</span> <span class="n">p1</span> <span class="o">::</span> <span class="n">results</span><span class="o">.</span><span class="n">args</span>
</span><span class='line'>                  <span class="n">results</span><span class="o">.</span><span class="n">timesCalled</span> <span class="o">&lt;-</span> <span class="n">results</span><span class="o">.</span><span class="n">timesCalled</span> <span class="o">+</span> <span class="mi">1</span>
</span><span class='line'>                  <span class="bp">()</span><span class="o">)</span>
</span><span class='line'>  <span class="o">(</span><span class="n">fake</span><span class="o">,</span> <span class="n">results</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>The above code might be hard to comprehend at first! We have made a generic
helper that can create any single argument fake we need. We return a tuple,
containing the fake lambda and an instance of <code>TestFakeResults</code>. The fake
lambda will populate the <code>TestFakeResults</code>, which we can access in the test
via the second arg of the tuple.</p>

<p>We can now re-write the previous test using <code>makeFake_OneArg</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="c1">// Test code</span>
</span><span class='line'><span class="k">let</span> <span class="nv">addAndSave_Test</span> <span class="o">=</span>
</span><span class='line'>  <span class="k">let</span> <span class="o">(</span><span class="n">fakeSave</span><span class="o">,</span> <span class="n">fakeSaveCalling</span><span class="o">)</span> <span class="o">=</span> <span class="n">makeFake_OneArg</span><span class="bp">()</span>
</span><span class='line'>  <span class="k">let</span> <span class="nv">result</span> <span class="o">=</span> <span class="n">addAndSave&#39;</span> <span class="n">fakeSave</span> <span class="mi">1</span> <span class="mi">2</span>
</span><span class='line'>  <span class="nn">Assert</span><span class="p">.</span><span class="n">AreEqual</span><span class="o">(</span><span class="mi">3</span><span class="o">,</span> <span class="n">result</span><span class="o">)</span>
</span><span class='line'>  <span class="nn">Assert</span><span class="p">.</span><span class="n">AreEqual</span><span class="o">(</span><span class="mi">3</span><span class="o">,</span> <span class="n">fakeSaveCalling</span><span class="o">.</span><span class="n">args</span><span class="o">.[</span><span class="mi">0</span><span class="o">])</span>
</span><span class='line'>  <span class="nn">Assert</span><span class="p">.</span><span class="n">AreEqual</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span> <span class="n">fakeSaveCalling</span><span class="o">.</span><span class="n">timesCalled</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>The TestFakeResults can return information about the way it was called,
including the list of all arguments. If we felt we needed the extra
expressiveness, we could also use a mocking library like RhinoMocks or Moq. The
TestFakeResults and its constructor are not essential to the pattern. The most
important part is learning to unit test in F# with confidence.</p>

<h1>Double Bonus: When to Use a Class Instead of a Record</h1>

<p>When I first wrote this post, I used a record instead of a class for the <code>TestFakeResults</code> type. If you have been bitten by the functional programming bug,
you might have wondered at my usage of a mutable class. Here are two alternates
of <code>makeFake_OneArg</code> which use records. You can probably see why I switched to a class:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">type</span> <span class="nc">TestFakeResults</span> <span class="o">=</span> <span class="o">{</span><span class="n">timesCalled</span><span class="o">:</span><span class="n">int</span><span class="o">,</span> <span class="n">args</span> <span class="kt">obj</span> <span class="kt">list</span><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Using Record Alternate 1</span>
</span><span class='line'><span class="k">let</span> <span class="nv">makeFake_OneArg_RecordAlternate1</span> <span class="bp">()</span> <span class="o">=</span>
</span><span class='line'>  <span class="k">let</span> <span class="nv">t</span> <span class="o">=</span> <span class="n">ref</span> <span class="mi">0</span>
</span><span class='line'>  <span class="k">let</span> <span class="nv">a</span> <span class="o">:</span> <span class="kt">obj</span> <span class="kt">list</span> <span class="n">ref</span> <span class="o">=</span> <span class="n">ref</span> <span class="bp">[]</span>
</span><span class='line'>  <span class="k">let</span> <span class="nv">fake</span> <span class="o">=</span> <span class="o">(</span><span class="k">fun</span> <span class="n">p1</span> <span class="o">-&gt;</span>
</span><span class='line'>                  <span class="n">a</span> <span class="o">:=</span> <span class="n">p1</span> <span class="o">::</span> <span class="o">!</span><span class="n">a</span>
</span><span class='line'>                  <span class="n">t</span> <span class="o">:=</span> <span class="o">!</span><span class="n">t</span> <span class="o">+</span> <span class="mi">1</span>
</span><span class='line'>                  <span class="bp">()</span><span class="o">)</span>
</span><span class='line'>  <span class="o">(</span><span class="n">fake</span><span class="o">,</span> <span class="o">(</span><span class="k">fun</span> <span class="bp">()</span> <span class="o">-&gt;</span>
</span><span class='line'>                <span class="o">{</span><span class="nn">TestFakeRecord</span><span class="p">.</span><span class="n">timesCalled</span> <span class="o">=</span> <span class="o">!</span><span class="n">t</span><span class="o">;</span>
</span><span class='line'>                 <span class="n">args</span> <span class="o">=</span> <span class="o">!</span><span class="n">a</span><span class="o">}))</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Using Record Alternate 2</span>
</span><span class='line'><span class="k">let</span> <span class="nv">makeFake_OneArg_RecordAlternate2</span> <span class="bp">()</span> <span class="o">=</span>
</span><span class='line'>  <span class="k">let</span> <span class="nv">result</span> <span class="o">=</span> <span class="n">ref</span> <span class="o">{</span><span class="nn">TestFakeRecord</span><span class="p">.</span><span class="n">timesCalled</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">args</span> <span class="o">=</span> <span class="bp">[]</span><span class="o">}</span>
</span><span class='line'>  <span class="k">let</span> <span class="nv">fake</span> <span class="o">=</span> <span class="o">(</span><span class="k">fun</span> <span class="n">p1</span> <span class="o">-&gt;</span>
</span><span class='line'>              <span class="n">result</span> <span class="o">:=</span> <span class="o">{</span><span class="n">timesCalled</span> <span class="o">=</span> <span class="o">(!</span><span class="n">result</span><span class="o">).</span><span class="n">timesCalled</span> <span class="o">+</span> <span class="mi">1</span><span class="o">;</span>
</span><span class='line'>                         <span class="n">args</span> <span class="o">=</span> <span class="n">p1</span> <span class="o">::</span> <span class="o">(!</span><span class="n">result</span><span class="o">).</span><span class="n">args</span><span class="o">}</span>
</span><span class='line'>              <span class="bp">()</span><span class="o">)</span>
</span><span class='line'>  <span class="o">(</span><span class="n">fake</span><span class="o">,</span> <span class="o">(</span><span class="k">fun</span> <span class="bp">()</span> <span class="o">-&gt;</span> <span class="o">!</span><span class="n">result</span><span class="o">))</span>
</span></code></pre></td></tr></table></div></figure>


<p>The only way to use a record is to delay its construction via a lambda which
must be executed by the test code. Both are complex: what we need is a mutable
data structure which we can access via a reference. A record is not that. We can
approximate it using tricks, but ultimately I find both alternatives to be too
complex to justify their use. Sometimes a mutable data structure is the best
choice to solve your problem efficiently. The power of F# is that it gives us
the ability to choose the best tool for the job: records for immutability,
classes for mutability.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SimpleMock: Language Agnostic Unit Test Mocking]]></title>
    <link href="http://deliberate-software.com/simplemock-unit-test-mocking/"/>
    <updated>2015-08-13T06:53:00-04:00</updated>
    <id>http://deliberate-software.com/simplemock-unit-test-mocking</id>
    <content type="html"><![CDATA[<p>SimpleMock is a pattern for reducing TDD damage. You can use the pattern to
organize your testing code without mocking or complicated dependency injection.</p>

<p>SimpleMock works in any language with closures that can be passed around by
reference, so off the top of my head: C#, Java, F#, Scala, PHP, C++, Ruby, and
Python. I&rsquo;m sure you can think of others.</p>

<h2>Example:</h2>

<p>Here is a brief (if a bit silly) example of the final pattern:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">public</span> <span class="k">class</span> <span class="nc">LineCounter</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">internal</span> <span class="n">Func</span><span class="p">&lt;</span><span class="kt">string</span><span class="p">,</span> <span class="n">IEnumerable</span><span class="p">&lt;</span><span class="kt">string</span><span class="p">&gt;&gt;</span> <span class="n">_readLines</span> <span class="p">=</span> <span class="n">File</span><span class="p">.</span><span class="n">ReadLines</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">public</span> <span class="kt">string</span> <span class="nf">CountLines</span><span class="p">(</span><span class="kt">string</span> <span class="n">filename</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="nf">_readLines</span><span class="p">(</span><span class="n">filename</span><span class="p">).</span><span class="n">Count</span><span class="p">();</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">/// Test Code</span>
</span><span class='line'><span class="na">[TestCase]</span>
</span><span class='line'><span class="k">public</span> <span class="k">void</span> <span class="nf">TestLineCounter</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="kt">var</span> <span class="n">sut</span> <span class="p">=</span> <span class="k">new</span> <span class="n">LineCounter</span><span class="p">();</span>
</span><span class='line'>    <span class="c1">// &quot;SimpleMock&quot; of File.ReadLines</span>
</span><span class='line'>    <span class="n">sut</span><span class="p">.</span><span class="n">_readLines</span> <span class="p">=</span> <span class="p">(</span><span class="kt">string</span> <span class="n">x</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="k">new</span> <span class="n">List</span><span class="p">&lt;</span><span class="kt">string</span><span class="p">&gt;{</span><span class="s">&quot;test&quot;</span><span class="p">,</span> <span class="s">&quot;that&quot;</span><span class="p">};</span>
</span><span class='line'>
</span><span class='line'>    <span class="kt">var</span> <span class="n">result</span> <span class="p">=</span> <span class="n">sut</span><span class="p">.</span><span class="n">CountLines</span><span class="p">(</span><span class="s">&quot;test&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">Assert</span><span class="p">.</span><span class="n">AreEqual</span><span class="p">(</span><span class="m">2</span><span class="p">,</span> <span class="n">result</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Benefits</h2>

<ul>
<li>Reduced boilerplate</li>
<li>Saves interfaces for real polymorphism</li>
<li>Simplifies test code</li>
<li>Reduces testing concerns in production code</li>
<li>Removes need for fragile IoC containers</li>
<li>Encourages better abstraction design</li>
<li>Can convert one class at a time!</li>
</ul>


<p>The SimpleMock pattern promotes a better design of your abstractions and simpler
tests. The pattern also reduces boilerplate and the pollution of your production
code with testing concerns.</p>

<p>If you aren&rsquo;t familiar with the normal pattern of unit test mocking using
interfaces, dependency injection, and mock libraries, scroll down to &ldquo;The
Non-SimpleMock Way&rdquo; at the end of the post.</p>

<h2>SimpleMock Pattern</h2>

<p>The SimpleMock pattern is aptly named.</p>

<ol>
<li>Replace Test-Only Interfaces With Functions</li>
<li>Define Dependencies Inline</li>
<li>Write Better Abstractions</li>
</ol>


<h2>Step One: Replace Test-Only Interfaces With Functions</h2>

<p>My examples are in C# because that is what I got paid to write today - it is
freshest in memory. C# has an incredible ability to create and pass around
lambdas and function references. Here is an example of using functions instead
of interfaces.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">public</span> <span class="k">class</span> <span class="nc">CurrentTime</span> <span class="p">:</span> <span class="n">ICurrentTime</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">public</span> <span class="n">DateTime</span> <span class="nf">GetCurrentTime</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">DateTime</span><span class="p">.</span><span class="n">Now</span><span class="p">();</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="k">public</span> <span class="k">class</span> <span class="nc">Translator</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">private</span> <span class="n">Func</span><span class="p">&lt;</span><span class="n">DateTime</span><span class="p">&gt;</span> <span class="n">_getCurrentTime</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">public</span> <span class="nf">Translator</span><span class="p">()</span> <span class="p">:</span> <span class="k">this</span><span class="p">(</span><span class="k">new</span> <span class="n">CurrentTime</span><span class="p">().</span><span class="n">GetCurrentTime</span><span class="p">)</span> <span class="p">{}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">public</span> <span class="nf">Translator</span><span class="p">(</span><span class="n">Func</span><span class="p">&lt;</span><span class="n">DateTime</span><span class="p">&gt;</span> <span class="n">getCurrentTime</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">this</span><span class="p">.</span><span class="n">_getCurrentTime</span> <span class="p">=</span> <span class="n">getCurrentTime</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">public</span> <span class="kt">string</span> <span class="nf">Translate</span><span class="p">(</span><span class="kt">string</span> <span class="n">input</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="kt">string</span><span class="p">.</span><span class="n">Format</span><span class="p">(</span><span class="s">&quot;{0}: {1}&quot;</span><span class="p">,</span> <span class="n">_getCurrentTime</span><span class="p">().</span><span class="n">ToString</span><span class="p">(),</span> <span class="n">input</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">/// Test Code</span>
</span><span class='line'><span class="na">[TestCase]</span>
</span><span class='line'><span class="k">public</span> <span class="k">void</span> <span class="nf">TestCurrentTimeTranslator</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="kt">var</span> <span class="n">now</span> <span class="p">=</span> <span class="n">DateTime</span><span class="p">.</span><span class="n">Now</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kt">var</span> <span class="n">sut</span> <span class="p">=</span> <span class="k">new</span> <span class="n">Translator</span><span class="p">(()</span> <span class="p">=&gt;</span> <span class="n">now</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="kt">var</span> <span class="n">result</span> <span class="p">=</span> <span class="n">sut</span><span class="p">.</span><span class="n">Translate</span><span class="p">(</span><span class="s">&quot;test&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">Assert</span><span class="p">.</span><span class="n">AreEqual</span><span class="p">(</span><span class="n">now</span><span class="p">.</span><span class="n">ToString</span><span class="p">()</span> <span class="p">+</span> <span class="s">&quot;: test&quot;</span><span class="p">,</span> <span class="n">result</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The test code is quite simple! No longer do we need the dependency on third
party mocking libraries, or the relatively complicated setup logic. Instead we
can simply inject the lambda at runtime, replacing that pointer. We didn&rsquo;t need
the whole interface, really we just needed the simple signature of the function.</p>

<h2>Step 2: Define Dependencies Inline</h2>

<p>We can take it even a step further. Why use constructor injection at all? Since
all we really want is a single mutable dispatch table row, why not just make it
that way?</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">public</span> <span class="k">class</span> <span class="nc">Translator</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">internal</span> <span class="n">Func</span><span class="p">&lt;</span><span class="n">DateTime</span><span class="p">&gt;</span> <span class="n">_getCurrentTime</span> <span class="p">=</span> <span class="k">new</span> <span class="n">CurrentTime</span><span class="p">().</span><span class="n">GetCurrentTime</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">public</span> <span class="kt">string</span> <span class="nf">Translate</span><span class="p">(</span><span class="kt">string</span> <span class="n">input</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="kt">string</span><span class="p">.</span><span class="n">Format</span><span class="p">(</span><span class="s">&quot;{0}: {1}&quot;</span><span class="p">,</span> <span class="n">_getCurrentTime</span><span class="p">().</span><span class="n">ToString</span><span class="p">(),</span> <span class="n">input</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">/// Test Code</span>
</span><span class='line'><span class="na">[TestCase]</span>
</span><span class='line'><span class="k">public</span> <span class="k">void</span> <span class="nf">TestCurrentTimeTranslator</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="kt">var</span> <span class="n">now</span> <span class="p">=</span> <span class="n">DateTime</span><span class="p">.</span><span class="n">Now</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">var</span> <span class="n">sut</span> <span class="p">=</span> <span class="k">new</span> <span class="n">Translator</span><span class="p">();</span>
</span><span class='line'>    <span class="n">sut</span><span class="p">.</span><span class="n">_getCurrentTime</span> <span class="p">=</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="n">now</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kt">var</span> <span class="n">result</span> <span class="p">=</span> <span class="n">sut</span><span class="p">.</span><span class="n">Translate</span><span class="p">(</span><span class="s">&quot;test&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">Assert</span><span class="p">.</span><span class="n">AreEqual</span><span class="p">(</span><span class="n">now</span><span class="p">.</span><span class="n">ToString</span><span class="p">()</span> <span class="p">+</span> <span class="s">&quot;: test&quot;</span><span class="p">,</span> <span class="n">result</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>We&rsquo;ve cleaned up our nasty multi-line indirection into a single dispatch line.
&ldquo;Go to definition&rdquo; now takes me to the actual line with the actual called
function. We&rsquo;ve replaced a dependency on a class based interface with a function
signature. The function signature <em>is</em> the interface!</p>

<p>You probably noticed we have lost something with this final version. We have
lost the ability to inject polymorphic behavior through the constructor. If you
need it, simply go back to injecting the interface in the constructor or by
passing it into the function itself. In practice, I have found this is needed
very rarely, making the SimpleMock pattern a better tool to reach for first.</p>

<h2>Step 3: Write Better Abstractions</h2>

<p>Lastly, SimpleMock actually promotes better designs. For example, a coworker was
writing some tests today and ran into a complicated situation. Take the
following sanitized code:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">public</span> <span class="k">class</span> <span class="nc">WorkDoer</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">internal</span> <span class="n">Action</span><span class="p">&lt;</span><span class="n">Thing</span><span class="p">&gt;</span> <span class="n">ignoreElements</span> <span class="p">=</span> <span class="k">new</span> <span class="n">ThingIgnorer</span><span class="p">().</span><span class="n">IgnoreElements</span><span class="p">;</span>
</span><span class='line'>    <span class="k">internal</span> <span class="n">Action</span><span class="p">&lt;</span><span class="n">Thing</span><span class="p">&gt;</span> <span class="n">removeIgnoredElements</span> <span class="p">=</span> <span class="k">new</span> <span class="n">ThingRemover</span><span class="p">().</span><span class="n">RemoveElements</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">public</span> <span class="k">void</span> <span class="nf">IgnoreAndRemoveThings</span><span class="p">(</span><span class="n">Thing</span> <span class="n">t1</span><span class="p">,</span> <span class="n">Thing</span> <span class="n">t2</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">ignoreElements</span><span class="p">(</span><span class="n">t1</span><span class="p">);</span>
</span><span class='line'>        <span class="n">ignoreElements</span><span class="p">(</span><span class="n">t2</span><span class="p">);</span>
</span><span class='line'>        <span class="n">removeIgnoredElements</span><span class="p">(</span><span class="n">t1</span><span class="p">);</span>
</span><span class='line'>        <span class="n">removeIgnoredElements</span><span class="p">(</span><span class="n">t2</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>How would you check that each section was called? Our naive solution was a
complicated lambda with a &ldquo;timesCalled&rdquo; counter and an if statement to assert
against each argument, but it turns nasty quickly:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="c1">/// Nasty test code</span>
</span><span class='line'><span class="na">[TestCase]</span>
</span><span class='line'><span class="k">public</span> <span class="k">void</span> <span class="nf">TestWorkDoer</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="kt">var</span> <span class="n">sut</span> <span class="p">=</span> <span class="k">new</span> <span class="n">WorkDoer</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="kt">var</span> <span class="n">ignoredCalledTimes</span> <span class="p">=</span> <span class="m">0</span><span class="p">;</span>
</span><span class='line'>    <span class="n">sut</span><span class="p">.</span><span class="n">ignoreElements</span> <span class="p">=</span> <span class="p">(</span><span class="n">t</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">ignoredCalledTimes</span><span class="p">++;</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">ignoredCalledTimes</span> <span class="p">==</span> <span class="m">1</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">Assert</span><span class="p">.</span><span class="n">AreEqual</span><span class="p">(</span><span class="n">t1</span><span class="p">,</span> <span class="n">t</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">Assert</span><span class="p">.</span><span class="n">AreEqual</span><span class="p">(</span><span class="n">t2</span><span class="p">,</span> <span class="n">t</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'>    <span class="kt">var</span> <span class="n">removedCalledTimes</span> <span class="p">=</span> <span class="m">0</span><span class="p">;</span>
</span><span class='line'>    <span class="n">sut</span><span class="p">.</span><span class="n">removeIgnoredElements</span> <span class="p">=</span> <span class="p">(</span><span class="n">t</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">removedCalledTimes</span><span class="p">++;</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">removedCalledTimes</span> <span class="p">==</span> <span class="m">1</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">Assert</span><span class="p">.</span><span class="n">AreEqual</span><span class="p">(</span><span class="n">t1</span><span class="p">,</span> <span class="n">t</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">Assert</span><span class="p">.</span><span class="n">AreEqual</span><span class="p">(</span><span class="n">t2</span><span class="p">,</span> <span class="n">t</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>    <span class="kt">var</span> <span class="n">t1</span> <span class="p">=</span> <span class="k">new</span> <span class="n">Thing</span><span class="p">();</span>
</span><span class='line'>    <span class="kt">var</span> <span class="n">t2</span> <span class="p">=</span> <span class="k">new</span> <span class="n">Thing</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="kt">var</span> <span class="n">result</span> <span class="p">=</span> <span class="n">sut</span><span class="p">.</span><span class="n">IgnoreAndRemoveThings</span><span class="p">(</span><span class="n">t1</span><span class="p">,</span> <span class="n">t2</span><span class="p">);</span>
</span><span class='line'>    <span class="n">Assert</span><span class="p">.</span><span class="n">AreEqual</span><span class="p">(</span><span class="m">2</span><span class="p">,</span> <span class="n">removedCalledTimes</span><span class="p">);</span>
</span><span class='line'>    <span class="n">Assert</span><span class="p">.</span><span class="n">AreEqual</span><span class="p">(</span><span class="m">2</span><span class="p">,</span> <span class="n">ignoredCalledTimes</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Yuck! The test is an absolute catastrophe. I see a mess of mixed concerns.
Conditionals?! In a test?! Unconscionable.</p>

<p>In situations like this, we have two easy options. Option one is to just use
a third party mocking library, replacing the functions from inside the test
code. This gives us access to all the sophisticated mocking tools available.</p>

<p>My preferred option is seeking to decomplect the production code by using better
abstractions.</p>

<p>I have found that strong reliance of mocking libraries enables worse designs.
Consider the code, what makes it so hard to test? Not knowing which element is
called when, doing the same work on two parameters, and reference mutation all
make this a poor abstraction. Why not simplify?</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">public</span> <span class="k">class</span> <span class="nc">WorkDoer</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">internal</span> <span class="n">Func</span><span class="p">&lt;</span><span class="n">Thing</span><span class="p">,</span> <span class="n">Thing</span><span class="p">&gt;</span> <span class="n">ignoreElements</span> <span class="p">=</span> <span class="k">new</span> <span class="n">ThingIgnorer</span><span class="p">().</span><span class="n">IgnoreElements</span><span class="p">;</span>
</span><span class='line'>    <span class="k">internal</span> <span class="n">Func</span><span class="p">&lt;</span><span class="n">Thing</span><span class="p">,</span> <span class="n">Thing</span><span class="p">&gt;</span> <span class="n">removeIgnoredElements</span> <span class="p">=</span> <span class="k">new</span> <span class="n">ThingRemover</span><span class="p">().</span><span class="n">RemoveElements</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">public</span> <span class="n">List</span><span class="p">&lt;</span><span class="n">Thing</span><span class="p">&gt;</span> <span class="n">IgnoreAndRemoveThings</span><span class="p">(</span><span class="n">List</span><span class="p">&lt;</span><span class="n">Thing</span><span class="p">&gt;</span> <span class="n">ts</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">ts</span><span class="p">.</span><span class="n">Select</span><span class="p">(</span><span class="n">t</span> <span class="p">=&gt;</span> <span class="n">removeIgnoredElements</span><span class="p">(</span><span class="n">ignoreElements</span><span class="p">(</span><span class="n">t</span><span class="p">)));</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">/// Simpler test</span>
</span><span class='line'><span class="na">[TestCase]</span>
</span><span class='line'><span class="k">public</span> <span class="k">void</span> <span class="nf">TestWorkDoer</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="kt">var</span> <span class="n">sut</span> <span class="p">=</span> <span class="k">new</span> <span class="n">WorkDoer</span><span class="p">();</span>
</span><span class='line'>    <span class="kt">var</span> <span class="n">expected</span> <span class="p">=</span> <span class="k">new</span> <span class="n">Thing</span><span class="p">();</span>
</span><span class='line'>    <span class="kt">var</span> <span class="n">ts</span> <span class="p">=</span> <span class="k">new</span> <span class="n">List</span><span class="p">&lt;</span><span class="n">Thing</span><span class="p">&gt;{</span><span class="k">new</span> <span class="n">Thing</span><span class="p">()};</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">sut</span><span class="p">.</span><span class="n">ignoreElements</span> <span class="p">=</span> <span class="p">(</span><span class="n">t</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="k">new</span> <span class="n">Thing</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">sut</span><span class="p">.</span><span class="n">removeIgnoredElements</span> <span class="p">=</span> <span class="p">(</span><span class="n">t</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">Assert</span><span class="p">.</span><span class="n">AreEqual</span><span class="p">(</span><span class="n">t</span><span class="p">,</span> <span class="n">sut</span><span class="p">.</span><span class="n">ignoreElements</span><span class="p">(</span><span class="n">t</span><span class="p">));</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">expected</span><span class="p">;</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>    <span class="kt">var</span> <span class="n">result</span> <span class="p">=</span> <span class="n">sut</span><span class="p">.</span><span class="n">IgnoreAndRemoveThings</span><span class="p">(</span><span class="n">ts</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">Assert</span><span class="p">.</span><span class="n">AreEqual</span><span class="p">(</span><span class="n">expected</span><span class="p">,</span> <span class="n">result</span><span class="p">.</span><span class="n">First</span><span class="p">())</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Much better! Yes, we had to change a few signatures. We get the same work done,
but now the code is actually a lot more useful. Our test code is comparable with
anything you&rsquo;d find using a mocking library. I am absolutely okay with using a
mocking library when needed, but I always carefully consider my abstractions and
design first.</p>

<p>If mocking libraries and IoC containers are the chainsaws of the testing world,
then SimpleMock is the garden shears. Sometimes the chainsaw is the only tool
for the job, and that is fine. But for most work around the yard, you can leave
the chainsaw in the shed.</p>

<h2>Conclusion</h2>

<p>Iâ€™ve shown how you can really simplify your code with SimpleMock. The dispatch
row is clear and easy to read. We have removed some third party mocking
dependencies. You can remove a lot of the boilerplate &ldquo;for making it more
testable&rdquo; from your code. The test code is greatly simplified, and injection a
breeze. The result: much simpler code, just as easy to test.</p>

<p>Thanks to Shuwei Chen for helping me put this together!</p>

<h2>The Non-SimpleMock Way</h2>

<p>If you are familiar with unit test mocking with interfaces, this part is
probably boring. Feel free to skip.</p>

<p>The traditional way of performing C# unit test mocking involves dependency
injection and interface mocking using a mocking library. For dependency
injection, it is common to use a tool like Ninject or hand-rolled constructor
injection. For mocking, a library like Moq or Rhino Mocks is standard. Here is
an example of a class and its testing code without any business logic.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">public</span> <span class="k">interface</span> <span class="n">ICurrentTime</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">DateTime</span> <span class="nf">GetCurrentTime</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">public</span> <span class="k">class</span> <span class="nc">CurrentTime</span> <span class="p">:</span> <span class="n">ICurrentTime</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">public</span> <span class="n">DateTime</span> <span class="nf">GetCurrentTime</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">DateTime</span><span class="p">.</span><span class="n">Now</span><span class="p">();</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">public</span> <span class="k">class</span> <span class="nc">Translator</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">private</span> <span class="k">readonly</span> <span class="n">ICurrentTime</span> <span class="n">ct</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">public</span> <span class="nf">Translator</span><span class="p">()</span> <span class="p">:</span> <span class="k">this</span><span class="p">(</span><span class="k">new</span> <span class="n">CurrentTime</span><span class="p">())</span> <span class="p">{}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">public</span> <span class="nf">Translator</span><span class="p">(</span><span class="n">ICurrentTime</span> <span class="n">currentTime</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">this</span><span class="p">.</span><span class="n">ct</span> <span class="p">=</span> <span class="n">currentTime</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">public</span> <span class="kt">string</span> <span class="nf">Translate</span><span class="p">(</span><span class="kt">string</span> <span class="n">input</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="kt">string</span><span class="p">.</span><span class="n">Format</span><span class="p">(</span><span class="s">&quot;{0}: {1}&quot;</span><span class="p">,</span> <span class="n">ct</span><span class="p">.</span><span class="n">GetCurrentTime</span><span class="p">().</span><span class="n">ToString</span><span class="p">(),</span> <span class="n">input</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">/// Test Code with Moq</span>
</span><span class='line'><span class="na">[TestCase]</span>
</span><span class='line'><span class="k">public</span> <span class="k">void</span> <span class="nf">TestCurrentTimeTranslator</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="kt">var</span> <span class="n">rightNow</span> <span class="p">=</span> <span class="n">DateTime</span><span class="p">.</span><span class="n">Now</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">var</span> <span class="n">mock</span> <span class="p">=</span> <span class="k">new</span> <span class="n">Mock</span><span class="p">&lt;</span><span class="n">ICurrentTime</span><span class="p">&gt;();</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">mock</span><span class="p">.</span><span class="n">Setup</span><span class="p">(</span><span class="n">a</span><span class="p">=&gt;</span><span class="n">a</span><span class="p">.</span><span class="n">GetCurrentTime</span><span class="p">()).</span><span class="n">Returns</span><span class="p">(</span><span class="n">rightNow</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="kt">var</span> <span class="n">sut</span> <span class="p">=</span> <span class="k">new</span> <span class="n">Translator</span><span class="p">(</span><span class="n">mock</span><span class="p">.</span><span class="n">Object</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="kt">var</span> <span class="n">result</span> <span class="p">=</span> <span class="n">sut</span><span class="p">.</span><span class="n">Translate</span><span class="p">(</span><span class="s">&quot;test&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">Assert</span><span class="p">.</span><span class="n">AreEqual</span><span class="p">(</span><span class="n">rightNow</span><span class="p">.</span><span class="n">ToString</span><span class="p">()</span> <span class="p">+</span> <span class="s">&quot;: test&quot;</span><span class="p">,</span> <span class="n">result</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>If you&rsquo;ve done much C# unit testing, this should look familiar. We want to
inject some code that is potentially long-running or dynamic. We put that code
into a class, add an interface, then inject that interface into the class we
want to test. To test it, we mock the interface, creating a different concrete
class at test runtime which implements that interface. We can setup that mock to
respond with anything, which we use for assertions.</p>

<h2>What&rsquo;s Wrong with the Non-SimpleMock Way?</h2>

<p>The first problem is we have created a whole interface just for testing.
Interfaces are for polymorphism, but we don&rsquo;t really need polymorphism for this
class. We simply want to mock it. The constructor injection is also test code
polluting our business logic.</p>

<p>What we have done is create a very small and primitive dispatch table. The
table has one row: something that has a function with the signature of <code>() -&gt; DateTime</code> or, as it is known in C#: <code>Func&lt;DateTime&gt;</code>.  We will need to make
this primitive dispatch table for every single mock in every single class we
wish to test. That&rsquo;s a lot of boilerplate!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Language Safety Score Mark 2]]></title>
    <link href="http://deliberate-software.com/safety-rank-part-2/"/>
    <updated>2015-07-24T10:13:00-04:00</updated>
    <id>http://deliberate-software.com/safety-rank-part-2</id>
    <content type="html"><![CDATA[<p>I want to make a model that predicts bugs.</p>

<p>I previously wrote a table for scoring language safety:
<a href="http://deliberate-software.com/programming-language-safety-algorithm/">Programming Language Safety Score</a>,
but it was extremely time consuming to score new languages or make modifications.</p>

<h2>Simplify, Simplify</h2>

<p>After being told I was <a href="https://en.wikipedia.org/wiki/Overfitting">overfitting</a>
the data, I&rsquo;ve attempted to clean up by simply checking if each category is
enforced, possible, or impossible. I score each as either 1 (language enforced),
0 (possible, but you have to remember to do it), or -1 (impossible). When the
magnitudes of the new model are compared with the previous model, they come out
very similar. The shape of the curve pretty much stays the same, which I was
told indicates that the character count weighting was a variable that didn&rsquo;t
matter.</p>

<p><img class="center" src="http://deliberate-software.com/images/rplot.jpg" title="image" alt="images"></p>

<p>The code I used to generate the plot and normalize the scores can be found here:
<a href="https://github.com/steveshogren/datasciencecoursera/blob/817dec79e36b6e9a6c5a8fd5700aff7cc394b9d4/scoreplot.R">scorePlot.R</a></p>

<h2>Safety Definitions</h2>

<p>A definition of the safety checks is as follows:</p>

<p><div ng-app="TableApp2">
<div ng-controller="TableCtrl">
<table class="langtable">
<tr><th>Check</th> <th>Description</th></tr>
<tr ng-repeat="check in langChecks">
<td> {{ check.name }} </td>
<td>  {{ check.desc }}  </td>
</tr>
</table></p>

<p>The new scores are shown here, with a lot more languages added in:</p>

<p><p class="lead">
<div style="overflow-x:scroll">
<table class="langtable">
<tr>
<th>Safety Check</th>
<th></th>
<th>
<select ng-options="getName(lang) for lang in allLanguages" ng-model="languages[0]"></select>
</th>
<th>
<select ng-options="getName(lang) for lang in allLanguages" ng-model="languages[1]"></select>
</th>
<th>
<select ng-options="getName(lang) for lang in allLanguages" ng-model="languages[2]"></select>
</th>
<th>
<select ng-options="getName(lang) for lang in allLanguages" ng-model="languages[3]"></select>
</th>
</tr>
<tr ng-repeat="check in langChecks" score-row name="check.name" row-key="check.key"></tr>
<tr class="totals"><td>Totals</td>
<td></td>
<td ng-repeat="lang in langTotals track by $index">
 {{ lang }}
</td>
</tr>
<tr class="totals"><td>Magnitude</td>
<td></td>
<td ng-repeat="lang in langTotals track by $index">
 {{ percentageTotals(lang) }}%
</td>
</tr>
</table>
</div></p>

<p>Current Languages:
<span ng-repeat="lang in allLanguages">
 {{ getName(lang) }}: {{ allLangTotals[$index] }},
</select></p>

<h2>So, What&rsquo;s the Point?</h2>

<p>To see how this model corresponds with data in the real world, I used the GitHub
API to query for the number of bugs created in repositories with more than 15
forks created in a span from 2011 to 2015. Commits were counted by summing the
commit counts of all contributors.</p>

<p>I decided to rely on the count of commits as a standard for a unit of work. My
assumption was that across fifty different projects, the commit sizes would
average out. Once the unit of work was decided on, I wanted to find the ratio of
bugs per commit for each language.</p>

<p>I collected the ratio of bugs logged per commit for each repository, and after
grouping by primary language, removed the top and bottom 25% using the
bug/commit ratio, which is a common practice in statistics to help find a more
accurate average. I summed the bugs and commits of those remaining repositories
grouped by language, finding a total average bug/commit ratio for each language
grouping. Here is that data, sorted by safety score.</p>

<p><table class="langtable">
<tr><th>Language</th>
<th>Bugs</th>
<th>Commits</th>
<th>Repositories</th>
<th>Bug/Commits</th>
<tr ng-repeat="lang in languageRatios">
<td> {{ lang.name }} </td>
<td> {{ lang.bugs }} </td>
<td> {{ lang.commits }} </td>
<td> {{ lang.repos }} </td>
<td> {{ getBugsRatio(lang) }} </td>
</tr>
</table></p>

<p>Here are the languages sorted by safety score with bug/commit ratios:</p>

<p><img class="center" src="http://deliberate-software.com/images/errorChart.jpg" title="image" alt="images">
<img class="center" src="http://deliberate-software.com/images/bugsAverage.jpg" title="image" alt="images"></p>

<p>I took the magnitude of the safety scores and the bug/commit ratios. After
inverting the safety scores, I overlaid them both onto a single graph.</p>

<p><img class="center" src="http://deliberate-software.com/images/bothMags.jpg" title="image" alt="images"></p>

<p>Immediately it is obvious that Ruby, Python, PHP, and Clojure all seem to strongly
buck the trend, but otherwise the languages follow a pretty consistent slope
down in bugs. Taking the correlation gives a
<a href="https://en.wikipedia.org/wiki/Pearson_product-moment_correlation_coefficient">correlation coefficient</a>
of .55</p>

<h2>What About Unit Tests?</h2>

<p>Thinking that Ruby, Clojure, PHP, and Python might not correlate well due to some
other factor, I collected data on how many tests each repository had. I counted
the number of files containing &ldquo;test&rdquo; or &ldquo;spec&rdquo;, which gave the following,
sorted by tests per commit:</p>

<p><table class="langtable">
<tr><th>Language</th>
<th>Tests</th>
<th>Commits</th>
<th>Repositories</th>
<th>Tests/Commits</th></tr>
<tr ng-repeat="lang in sorter(languageRatios)">
<td> {{ lang.name }} </td>
<td> {{ lang.test }} </td>
<td> {{ lang.commits }} </td>
<td> {{ lang.repos }} </td>
<td> {{ getTestsRatio(lang) }} </td>
</tr>
</table></p>

<p>PHP, Python, and Ruby all have a higher then average number of tests, but
Clojure does not. Additionally, Go, Scala, and Java all also have a higher than
average number of tests, yet they score relatively average in bugs/commit.</p>

<h2>Conclusion</h2>

<p>In conclusion, the current safety model I have proposed seems to account for a
moderate reduction in bugs per commit across the sampled languages, but is not
the only factor. It currently is unable to account for a significantly lower
than expected bug count in Ruby and Clojure.</p>

<h2>Special Thanks</h2>

<p>Special thanks to (in alphabetical order):
<a href="https://twitter.com/traffichazard/">Patrick Boe</a> (Haskell, Sniff Test),
<a href="http://asymmetrical-view.com/">Kyle Burton</a> (General Advice),
Nils Creque (Listening Board),
Max Haley (Python, Ruby, Teaching me how to math),
<a href="https://github.com/danielmiladinov">Daniel Miladinov</a> (Java, Scala, Morale Support),
Keith O'Brien (Ruby and JS),
<a href="https://github.com/arlaneenalra">Chris Salch</a> (CoffeeScript and JS),
and <a href="https://github.com/timvisher">Tim Visher</a> (Clojure).</p>

<p>Additional thanks to the posters on
<a href="https://www.reddit.com/r/rust/comments/3egx49/language_safety_score_mark_2/">/r/rust</a>,
including <a href="https://www.reddit.com/user/notriddle">/u/notriddle</a>,
<a href="https://www.reddit.com/user/killercup">/u/killercup</a>, and
<a href="https://www.reddit.com/user/diegobernardes">/u/diegobernardes</a> who put together the Rust score.</p>

<h2>Complaints Department</h2>

<p>Did I mess up something about a language here, or am I missing a safety check? I&rsquo;ll happily take pull
requests for new languages:
<a href="https://github.com/steveshogren/blog-source/blob/master/source/javascripts/sliders2.js">blog source</a>. Just
pick an existing language, edit the name and values, and &ldquo;copy to clipboard&rdquo; to
build your own language data structure. Send it to me in a PR and I&rsquo;ll include
it along with a thanks on the page.</p>

<p><div ng-show="showRealName">
<h2>Select Language:
<select ng-options="lang.name for lang in allLanguages" ng-model="selectedLang"></select>
<button ng-click="copyToClipboard(selectedLang)">Copy Changes to Clipboard</button>
</h2>
<h2><input ng-model="selectedLang.name"></input></h2>
<table class="langtable">
<tr><th>Check</th><th>Option</th></tr>
<tr ng-repeat="check in langChecks">
<td style="background-color: {{scoreClass(score(selectedLang[check.key]))}} ">
 {{ check.name }}:  {{score(selectedLang[check.key]) }}
</td>
<td>
<select ng-options="enforcedNice(e) for e in enforcedTypes" ng-model="selectedLang[check.key].enforced"></select>
</td>
</tr>
</table></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Language Versions]]></title>
    <link href="http://deliberate-software.com/language-versions/"/>
    <updated>2015-07-20T10:36:00-04:00</updated>
    <id>http://deliberate-software.com/language-versions</id>
    <content type="html"><![CDATA[<p>Let&rsquo;s play a thought exercise. Imagine your development toolchain is like a
semantic version number. Small features that incrementally improve your
situation are like minor updates. They don&rsquo;t cause any large shifts in thinking
or process. Major updates are big, new concepts, quantum jumps in theory or
practice.</p>

<p>I am not talking about the political, social, or financial aspects of a
toolchain. For example, hiring is a complex beast entirely in its own
category. The criteria for choosing a tool when hiring a few hundred offshore
developers is very different than the criteria for hiring for a team of three
senior developers. I&rsquo;ll leave those aspects alone.</p>

<p>What are some examples of these value changes I&rsquo;ve noticed in my development?</p>

<h2>Minor Benefits</h2>

<h3>Perl - PHP - Python - Ruby</h3>

<p>Switching from Perl to PHP for me was a minor change. I was able to carry over
almost all my skills, and for the most part, the differences were mostly
syntactic. Later, when I started using Python, most of my experience from Perl
and PHP was still useful. The libraries had different names, and a few concepts
were different, but on the whole, all three were in a same class of productivity
for me.</p>

<p>More recently, on taking over a small Ruby codebase (scripts, not Rails), I again
found much of my previous experience was still valuable. I can almost guess what
things will be called or how they should be used. I still have to look up
library names and keywords, but on the whole, the languages all provide very
similar workflows. I suspect all four are in the same class of productivity,
with some minor differences here and there. These days I put effort only into
maintaining familiarity with one of these languages, since I am confident I
could quickly relearn any of the other three on demand.</p>

<h3>Java - VB.NET - CSharp</h3>

<p>Moving between Java, VB.NET, and C# feel similarly minor in tangible
productivity. For the most part, all the expectations and experience carries
between the three. Obviously the tools are different, and there are a number of
gotchas, but nothing changed my productivity in any major way. I doubt any of
those three have any one killer feature that cannot be had in the other.</p>

<h2>Major Benefits</h2>

<h3>Automated Testing</h3>

<p>Switching from &ldquo;run it and see&rdquo; testing to automated unit and integration
testing was a major change with large productivity benefits. All my experience
to date was still useful, but I needed a whole new set of skills to be able to
apply the techniques. Tools like dependency injection, mocking, TDD, and
continuous integration enabled me to build and revive much larger
systems. Automated testing is a skill that applies well to every language I&rsquo;ve
worked in, with benefits that grow increasingly valuable with more complex
systems. I don&rsquo;t always automated test, but it is an invaluable tool for certain
classes of problems.</p>

<h3>REPL Development (moving from Python/Ruby to Clojure)</h3>

<p>Repl based development with live hot patching was another major change. It
required a new way of thinking about programming, and with it came an
instantaneous feedback loop. Much like unit testing, it was an entirely new
skill, but opened up a very fast method of building up a system from small
parts. Additionally, it allowed me to rapidly progress in my skills, because I
could instantly see live feedback from my code, without needing to write a whole
test just to execute the code.</p>

<h3>Powerful Static Typing (moving from C# to F#)</h3>

<p>Moving from a typical static typed language to one with algebraic data types has
been a major change, with major productivity benefits. I have noticed entire
classes of defects disappearing. Additionally, because of the better compiler
errors, the resulting codebases are much easier to refactor, which means a
faster reaction to a changing domain.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Learning Lisp Was Hard]]></title>
    <link href="http://deliberate-software.com/learning-lisp-was-hard/"/>
    <updated>2015-06-17T07:02:00-04:00</updated>
    <id>http://deliberate-software.com/learning-lisp-was-hard</id>
    <content type="html"><![CDATA[<p>Several times in the last week people have lamented to me that they &ldquo;just don&rsquo;t
get Lisp&rdquo;. After hearing it for the third time, I thought back to my experience
learning a Lisp.</p>

<p>When I set out to learn a Lisp, I expected it would be easy.</p>

<p>I figured, &ldquo;I am pretty awesome at PHP, and have worked professionally in Perl,
Python, and Java, this should be a cakewalk!&rdquo;. I&rsquo;d read Paul Graham&rsquo;s essays on
how Lisp is his secret weapon, and figured I needed to get into this secret
weapon stuff. My ego said, &ldquo;since Paul is amazing, and I am too, I&rsquo;ll be a
natural!&rdquo;</p>

<p>I expected to tinker around with &ldquo;Lisp&rdquo; (I didn&rsquo;t know there was more
than one) and shortly master it to be able to ship a website with it.</p>

<p>What happened instead took me a little longer&hellip;</p>

<ul>
<li>05/11 - 06/11 - ~15 Hrs Attempted <em>Land Of Lisp</em> (gave up)</li>
<li>04/12 - 08/12 - ~60 Hrs Rewrote a PHP side project in Clojure</li>
<li>08/12 - 08/12 - ~5 Hrs Attempted <em>Let Over Lambda</em> (gave up)</li>
<li>08/12 - 09/12 - ~10 Hrs Read <em>Clojure Programming</em> twice</li>
<li>09/12 - 12/12 - ~30 Hrs Took <em>CS173 Programming Languages</em> online at Brown University</li>
<li>05/13 - 07/13 - ~50 Hrs Worked through <em>Let Over Lambda</em></li>
<li>05/13 - 07/14 - ~250 Hrs Worked through <em>SICP</em></li>
<li>07/14 - Shipped production Clojure code</li>
</ul>


<p>This shows only the major events: books and large projects, but doesn&rsquo;t show all
the countless blogs, tutorials, and tiny projects that also filled in the gaps.</p>

<p>I think Lisps started to &ldquo;click&rdquo; for me around mid 2013, about two years after
deciding that I&rsquo;d &ldquo;tinker around&rdquo; for a bit before &ldquo;mastering&rdquo; it. I was
approximately 170 hours in at that point. The book that finally made it all
click was <em>Let Over Lambda</em>, but it took me two attempts and almost a year of
pre-learning to be able to understand enough to internalize the material.</p>

<p>All said and done, I spent approximately 420 hours between Common Lisp, Racket,
Typed Racket, and Clojure before I felt confident enough to suggest shipping
Clojure at work. I don&rsquo;t claim to be a fast learner at all, and I fully expect
some people will snort with derision at how much time it took me - which is kind
of the point of this post.</p>

<p>This timeline should show those who are struggling that what you are feeling is
normal. Learning anything new is hard. The more &ldquo;new&rdquo; it is, the harder it will
be. Clojure, macros, emacs, and a repl workflow are all very different from
everything I was used to and significantly more powerful than I would&rsquo;ve
guessed. It took a long time for that to become normal, and for that power to
sink in and become a tool I anticipated having.</p>

<p>If you are struggling and feel like a failure, understand <em>there is no wrong
way</em>. It might take you a long time of repeated exposure before the alien
tooling starts to look familiar, and then comfortable. Maybe that book you are
struggling with actually IS too advanced, so find an easier one, and circle back
to the harder book later. Maybe, like me, you need some part of many different
books, tutorials, side projects, and katas.</p>

<p>If you are struggling learning and in the Philly area, I am happy to meet up to
chat. I am also happy to help over the wire as well. I understand how
demoralizing the constant battle is to learn something new, especially when it
feels like your ego is on the line and the whole internet is pressuring you to
learn new things. Don&rsquo;t give up, it&rsquo;s not impossible.</p>

<h1>Was it worth it?</h1>

<p>I can anticipate the follow up question: &ldquo;was it worth it?&rdquo; Absolutely yes. I
now feel a fluid comfort with my current professional stack (C#, F#, Clojure,
and JS) that previously I did not have. I am significantly more productive at
programming, regardless of the language. Work that was previously challenging is
now trivial, and work that was previously &ldquo;impossible&rdquo; now feels fun and
challenging. Was it learning Lisp specifically that caused all those changes?
Probably not, but I believe it was learning something far outside my normal
comfort zone that made the difference. I think I would have had equivalent
experiences had I invested that time learning Scala (the ML parts), Haskell,
Idris, J, R, Forth, etc.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Superiority Fatigue]]></title>
    <link href="http://deliberate-software.com/superiority-fatigue/"/>
    <updated>2015-05-14T19:13:00-04:00</updated>
    <id>http://deliberate-software.com/superiority-fatigue</id>
    <content type="html"><![CDATA[<p>Learning new tools, technologies, and methodologies is
hard. Counter-intuitively, the most exhausting part is <em>after</em> you&rsquo;ve gained a
good comprehension of the tool, and now, filled with excitement, you try to
explain it to someone else.</p>

<p>They almost always react with hostility.</p>

<p>What is going on? You just took time to learn this exciting tool that could save
everyone a lot of time, and not only do they not care, but they resent you for
it!  Don&rsquo;t they see how this could be great for everyone?</p>

<p>The issue, like humans, is complex and dynamic. Maybe they feel like you&rsquo;ve now
made them look lazy in comparison. Maybe they have tried other tools in the past
only to discover they weren&rsquo;t as a good as promised. Maybe they are afraid they
won&rsquo;t be able to learn the new tool as quickly as they need to, and will be left
behind. Maybe they are afraid all the time they spent learning the existing
tools will have been wasted. Maybe they are comfortable where they are, and
don&rsquo;t care about increased productivity. Maybe they are tired of learning new
things.</p>

<p>Most times I have seen this, I think the root emotion is fear. Fear of failure,
of change, of being embarrassed, of looking inferior. Fear is a powerful
emotion.</p>

<p>When you respond with further hostility, this only will compound their
fear. Should they put their comfort and ego before the needs of the business?
No, but your counterattack will only further prove to them that their fear was
deserved.</p>

<p>The final hardest part of learning a new tool is when you are forced to use an
inferior tool. Suddenly that liberating fresh air of power is replaced with a
suffocating claustrophobia of weakness. Even if the tool isn&rsquo;t really that
inferior, it now <em>feels</em> terrible. It becomes worse when you and many others
around you agree with the better value proposition of a new tool, and yet you
are still required to use the inferior tool due to someone in power blocking you
for political reasons.</p>

<p>For the developer who sets out to learn new things, you must learn to deal with
inferior tools. Once you start learning, you will always find yourself in a
situation where you are required to use an inferior tool. For me, this has been
one of the hardest things to face in my career.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Case Study: Type-safe Domain Modeling in F#]]></title>
    <link href="http://deliberate-software.com/pattern-matching-case-study/"/>
    <updated>2015-03-14T09:42:00-04:00</updated>
    <id>http://deliberate-software.com/pattern-matching-case-study</id>
    <content type="html"><![CDATA[<p>Domain modeling in F# is significantly easier and safer than with the
traditional .NET languages. This is because of the increased safety of
pattern matching and the expressiveness of discriminated unions. These
concepts are not in C# or VB.NET, and therefore bring a new tool to
the table.</p>

<p>To illustrate this, I found some old code I&rsquo;d written to interact with
a legacy system. The system uses many single enums on a record to keep
track of statuses. When one changes, it can cause others to change as
well.</p>

<p>Here is a typical function that combines two enums to recalculate a
third.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'>    <span class="k">public</span> <span class="k">static</span> <span class="n">PositionType</span> <span class="nf">GetPositionType</span> <span class="p">(</span><span class="n">MovementType</span> <span class="n">movementType</span><span class="p">,</span> <span class="n">ApplyToParty</span> <span class="n">applyToParty</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">((</span><span class="n">movementType</span> <span class="p">==</span> <span class="n">MovementType</span><span class="p">.</span><span class="n">Deliver</span> <span class="p">&amp;&amp;</span> <span class="n">applyToParty</span> <span class="p">==</span> <span class="n">ApplyToParty</span><span class="p">.</span><span class="n">Principal</span><span class="p">)</span>
</span><span class='line'>            <span class="p">||</span> <span class="p">(</span><span class="n">movementType</span> <span class="p">==</span> <span class="n">MovementType</span><span class="p">.</span><span class="n">Return</span> <span class="p">&amp;&amp;</span> <span class="n">applyToParty</span> <span class="p">==</span> <span class="n">ApplyToParty</span><span class="p">.</span><span class="n">Counterparty</span><span class="p">))</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">PositionType</span><span class="p">.</span><span class="n">Held</span><span class="p">;</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">((</span><span class="n">movementType</span> <span class="p">==</span> <span class="n">MovementType</span><span class="p">.</span><span class="n">Return</span> <span class="p">&amp;&amp;</span> <span class="n">applyToParty</span> <span class="p">==</span> <span class="n">ApplyToParty</span><span class="p">.</span><span class="n">Principal</span><span class="p">)</span>
</span><span class='line'>            <span class="p">||</span> <span class="p">(</span><span class="n">movementType</span> <span class="p">==</span> <span class="n">MovementType</span><span class="p">.</span><span class="n">Deliver</span> <span class="p">&amp;&amp;</span> <span class="n">applyToParty</span> <span class="p">==</span> <span class="n">ApplyToParty</span><span class="p">.</span><span class="n">Counterparty</span><span class="p">))</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">PositionType</span><span class="p">.</span><span class="n">Posted</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">return</span> <span class="n">PositionType</span><span class="p">.</span><span class="n">Undefined</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>With some regularity, new records are added to these types of enums,
causing a dangerous search and update across the system fixing all the
if/else or switch/case statements.</p>

<p>Right off the bat, pattern matching is a huge win here, taking a hard
to comprehend function and making the domain concepts clear.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">let</span> <span class="nv">GetPositionType</span> <span class="o">=</span> <span class="k">function</span>
</span><span class='line'>    <span class="o">|</span> <span class="n">Deliver</span><span class="o">,</span> <span class="n">Principal</span> <span class="o">|</span> <span class="n">Return</span><span class="o">,</span> <span class="n">Counterparty</span> <span class="o">-&gt;</span> <span class="n">Held</span>
</span><span class='line'>    <span class="o">|</span> <span class="n">Return</span><span class="o">,</span> <span class="n">Principal</span> <span class="o">|</span> <span class="n">Deliver</span><span class="o">,</span> <span class="n">Counterparty</span> <span class="o">-&gt;</span> <span class="n">Posted</span>
</span><span class='line'>    <span class="o">|</span> <span class="nn">MovementType</span><span class="p">.</span><span class="n">Undefined</span><span class="o">,</span> <span class="o">_</span> <span class="o">|</span> <span class="o">_,</span> <span class="nn">ApplyToParty</span><span class="p">.</span><span class="n">Undefined</span> <span class="o">-&gt;</span> <span class="nn">PositionType</span><span class="p">.</span><span class="n">Undefined</span>
</span></code></pre></td></tr></table></div></figure>


<p>If we add a new status to any of these, we will get a compiler warning
in every place letting us know. If that alone was the win, we&rsquo;d be
still be ahead by a lot. The domain is so clear here, I can print this
code out and hand it to my BA to ensure the logic is correct.</p>

<p>Next though, this got me thinking. Why does this set of three enums
have to be calculated? Why are they even separate? Ah, of course,
right now they are stored in the database and ORM objects, each with a
separate field and set of enum ids. Changing that would be costly.</p>

<p>What I want is a domain layer a level higher than the typical database
ORM classes, something to convert my ORM classes into that will be
able to do work in a safer way.</p>

<p>Rather than three enums that are supposed to change in lock step (but
might get out of date), I really want a concept of the three combined
and &ldquo;frozen&rdquo; together.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">type</span> <span class="nc">Direction</span> <span class="o">=</span>
</span><span class='line'>    <span class="o">|</span> <span class="n">Held_Deliver_Principal</span>
</span><span class='line'>    <span class="o">|</span> <span class="n">Held_Return_Counterparty</span>
</span><span class='line'>    <span class="o">|</span> <span class="n">Posted_Return_Principal</span>
</span><span class='line'>    <span class="o">|</span> <span class="n">Posted_Deliver_Counterparty</span>
</span><span class='line'>
</span><span class='line'><span class="k">let</span> <span class="nv">GetDirection</span> <span class="o">=</span> <span class="k">function</span>
</span><span class='line'>   <span class="o">|</span> <span class="n">Deliver</span><span class="o">,</span> <span class="n">Principal</span>  <span class="o">-&gt;</span> <span class="n">Held_Deliver_Principal</span>
</span><span class='line'>   <span class="o">|</span> <span class="n">Return</span><span class="o">,</span> <span class="n">Counterparty</span> <span class="o">-&gt;</span> <span class="n">Held_Return_Counterparty</span>
</span><span class='line'>   <span class="o">|</span> <span class="n">Return</span><span class="o">,</span> <span class="n">Principal</span> <span class="o">-&gt;</span> <span class="n">Posted_Return_Principal</span>
</span><span class='line'>   <span class="o">|</span> <span class="n">Deliver</span><span class="o">,</span> <span class="n">Counterparty</span> <span class="o">-&gt;</span> <span class="n">Posted_Deliver_Counterparty</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>Now I have a combined Direction that merges the three concepts into
one. It is impossible with this new merged type to have an invalid
state across the three. Getting any of the types back out to convert
into the ORM classes or do some work is as simple as another match:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">let</span> <span class="nv">GetMovementTypeToSaveInORM</span> <span class="o">=</span> <span class="k">function</span>
</span><span class='line'>   <span class="o">|</span> <span class="n">Held_Deliver_Principal</span> <span class="o">|</span> <span class="n">Posted_Deliver_Counterparty</span> <span class="o">-&gt;</span> <span class="n">Deliver</span>
</span><span class='line'>   <span class="o">|</span> <span class="n">Posted_Return_Principal</span> <span class="o">|</span> <span class="n">Held_Return_Counterparty</span> <span class="o">-&gt;</span> <span class="n">Return</span>
</span><span class='line'>
</span><span class='line'><span class="k">let</span> <span class="nv">GetSendFn</span> <span class="o">=</span> <span class="k">function</span>
</span><span class='line'>   <span class="o">|</span> <span class="n">Held_Deliver_Principal</span> <span class="o">|</span> <span class="n">Posted_Return_Principal</span> <span class="o">-&gt;</span> <span class="n">SendMessageToPrincipal</span>
</span><span class='line'>   <span class="o">|</span> <span class="n">Held_Return_Counterparty</span> <span class="o">|</span> <span class="n">Posted_Deliver_Counterparty</span> <span class="o">-&gt;</span> <span class="n">SendMessageToCounterparty</span>
</span></code></pre></td></tr></table></div></figure>


<p>While it is possible to make an equivalent C# enum and combine these
in a similar way, it is inherently unsafe (nothing to guarantee you
covered every case) and therefore appropriately uncommon. The typical
answer for safe polymorphic dispatch in C# is to use an interface and
classes. Unfortunately, something still has to dispatch on that enum
id, either inside a class or at the time of class instantiation. That
is a vector for errors.</p>

<p>Because F# interops so well with C#, it is possible to build in a
domain layer in F# immediately that calls down to your C# ORM
classes. Converting from a set of dangerous C# enums into a
constrained and safe F# discriminated union is easy and will simplify
your domain to its essence.</p>

<p>For reasons like this, when I have to build something with a rich
domain, I reach for F#.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Programming Language Safety Score]]></title>
    <link href="http://deliberate-software.com/programming-language-safety-algorithm/"/>
    <updated>2015-02-17T14:13:00-05:00</updated>
    <id>http://deliberate-software.com/programming-language-safety-algorithm</id>
    <content type="html"><![CDATA[<p>I think the time has come for a standard programming language safety
score. I want to use this model to help show that the concept of
safety is much more nuanced than a binary bit of &ldquo;has strong-static
types&rdquo;.</p>

<p>When someone says &ldquo;programming language safety&rdquo;, it typically invokes
thoughts of unit tests, long build times, and red squiggles in an
IDE. But, in day-to-day development, there are so many times when we
are bitten by things that somehow just slip through the cracks.</p>

<p>I put together this scoring model to get a sense of how safe a
language is at the primitive level, and if it isn&rsquo;t safe by default,
how much it costs to manually make it safe. Since all abstractions
eventually result in a series of primitive operations, I decided that
focusing only on primitives would still be a valuable (if incomplete)
data point. While any good library will handle all primitive checks
and present the consumer with a well-designed abstraction, in the end,
the consumer is still left wiring libraries together, building their
own primitive abstractions for integration. Due to the impossibility of
measuring the quality of abstractions in all libraries for a language,
I left that entirely out of scope of this model, unless it is designed
as a primitive check.</p>

<p>By focusing on only primitive operations: making and calling
functions, naming data, working with sequences, and dealing with
language primitive data types, I slimmed down the large range of
possible error vectors to a small handful. While in some languages it
is common to use user-defined classes to wrap around a set of
primitives, those classes are still doing the same primitive work,
just hidden behind a user-created abstraction. The more ways it is
possible to make a &ldquo;mistake&rdquo; with a primitive, the more difficult it
is to build such good abstractions.</p>

<pre><code>This model is not about language "power".
</code></pre>

<p>This model is not about ranking the &ldquo;power&rdquo;, &ldquo;expressiveness&rdquo;, or
&ldquo;abstract-ability&rdquo; of a language. In any language that supports
abstractions (functions, classes, modules, naming data), I am
convinced, given enough code, all Turing complete langauges can do the
same work. This model is only about the costs to prevent unexpected
&ldquo;confusion&rdquo; between the programmer and the machine at the primitive
level.</p>

<p>Rather than focus on what is <em>possible</em> with a language, I will
instead focus on what is typically idiomatic to that community. For
example, if it is possible to achieve a level of safety in a language
but by doing something uncommon, that should not be counted.</p>

<p>To score a language, simply figure out how many characters it costs to
&ldquo;prevent&rdquo; a certain type of error, and add that to the
total. Newlines, spaces, and tabs do not count, but all other
punctuation does. If a specific check is language enforced, like F#&rsquo;s
Option or C#&rsquo;s parameter type enforcement, that is given a -30 (by
default) to make up for the lack of unit tests and code exercising
needed to run that &ldquo;path&rdquo;. Do not count import lines for libraries, as
importing the module will have a negligible effect on the code size
and complexity.</p>

<p>If there is a safety feature that is not possible to achieve
programmatically, we will add +30 (by default) for a &ldquo;every change run
and debug to fix&rdquo; cost, such as Java not having a way to prevent stack
overflow exceptions caused by recursion.</p>

<pre><code>A lower score is "safer", needing less (or no) code to achieve the same level of safety.
</code></pre>

<p>Rather than tell you my thoughts (or survey for) hard-coded
weightings, all checks are weighted the same by default. Feel free to
apply your own weightings, to better match to your or your team&rsquo;s
specific needs and preferences. The languages are masked by default to
protect the innocent. You can unmask the names and see the code used
below the table.</p>

<p><div ng-app="TableApp">
<div ng-controller="TableCtrl"></p>

<p>Language Enforced Bonus:
 {{ enforcedScore }}
<input ng-model="enforcedScore" type="range" min="0" max="50" /></p>

<p>Language Inability Penalty:
 {{ inabilityPenalty }}
<input ng-model="inabilityPenalty" type="range" min="0" max="50" /></p>

<p>Show Weights <input type="checkbox" ng-model="showWeights" />
<p class="lead">
<div style="overflow-x:scroll">
<table class="langtable">
<tr>
<th>Safety Check</th>
<th></th>
<th>
<select ng-options="getName(lang) for lang in allLanguages" ng-model="languages[0]"></select>
</th>
<th>
<select ng-options="getName(lang) for lang in allLanguages" ng-model="languages[1]"></select>
</th>
<th>
<select ng-options="getName(lang) for lang in allLanguages" ng-model="languages[2]"></select>
</th>
<th>
<select ng-options="getName(lang) for lang in allLanguages" ng-model="languages[3]"></select>
</th>
</tr>
<tr ng-repeat="check in langChecks" score-row name="check.name" row-key="check.key"></tr>
<tr class="totals"><td>Totals</td>
<td></td>
<td ng-repeat="lang in langTotals track by $index">
 {{ lang }}
</td>
</tr>
<tr class="totals"><td>Magnitude</td>
<td></td>
<td ng-repeat="lang in langTotals track by $index">
 {{ percentageTotals(lang) }}%
</td>
</tr>
</table>
</div></p>

<p><h3><input ng-model="showRealName" type="checkbox" /><span
ng-click="showRealName = !!!showRealName">Click to see backing code and unmask names</span></h3></p>

<p>Current Languages:
<span ng-repeat="lang in allLanguages">
 {{ getName(lang) }}: {{ allLangTotals[$index] }},
</select></p>

<p>I want to see your language represented here! I&rsquo;ll happily take pull
requests for new languages: <a href="https://github.com/steveshogren/blog-source/blob/master/source/javascripts/sliders.js">blog source</a>. Just
use the &ldquo;edit language&rdquo; and &ldquo;copy to clipboard&rdquo; to build your own
language data structure.</p>

<p>I would love to see every major language represented, including major
language &ldquo;idiom communities&rdquo;. For example, Clojure and Typed Clojure
are vastly different in abilities. Similarly &ldquo;Scala - The Better Java&rdquo;
and &ldquo;Scala - The JVM Haskell&rdquo; have vastly different idioms with
apparently very separate communities.</p>

<p><div ng-show="showRealName"> Feel free to put in your own examples by
playing with the samples below. Code surrounded with &lt;! !> is ignored
from the tally, since it would vary heavily based on the language and
desired result. Variable and type names are kept at single characters,
which are counted. Feel free to add in your own language below, and
use the copy feature to extract the data structure to use in a pull
request.</p>

<p><h2>Select Language:
<select ng-options="lang.name for lang in allLanguages" ng-model="selectedLang"></select>
</h2>
<button ng-click="showEdit = !showEdit">Edit Language</button>
<button ng-click="copyToClipboard(selectedLang)">Copy Changes to Clipboard</button>
<div ng-show="showEdit">
<h2><input ng-model="selectedLang.name"></input></h2>
<div ng-repeat="check in langChecks">
<h3> {{ check.name }} :  {{ score(selectedLang[check.key]) }}  </h3>
<p>
<textarea class="widetextarea" rows="5" ng-model="selectedLang[check.key].desc"></textarea>
<div>
Code: <select ng-options="enforcedNice(e) for e in enforcedTypes" ng-model="selectedLang[check.key].enforced"></select>
<div class="tablecode">1234567890123456789012345678901234567890</div>
<div class="tablecode" >  {{ cleanCode(selectedLang[check.key].rawCode) }}  </div>
<input type="text" style="width:90%;" ng-model="selectedLang[check.key].rawCode" />
</div>
</p>
</div>
</div></p>

<p><div ng-show="!showEdit">
<h2> {{ selectedLang.name }} </h2>
<div ng-repeat="check in langChecks">
<h3> {{ check.name }} :  {{ score(selectedLang[check.key]) }}  </h3>
<p>
 {{ selectedLang[check.key].desc }}
<div>
Code:  {{ enforcedNice(selectedLang[check.key].enforced)  }}
<div class="tablecode" ng-if="selectedLang[check.key].rawCode">1234567890123456789012345678901234567890</div>
<div class="tablecode" >  {{ cleanCode(selectedLang[check.key].rawCode) }}  </div>
<input type="text" style="width:90%;" ng-model="selectedLang[check.key].rawCode" />
</div>
</p>
</div>
</div>
</div></p>

<p>Hope this is a helpful way to think about language safety!</p>

<p>Special thanks to (in alphabetical order):
Patrick Boe <a href="https://twitter.com/traffichazard/">(twitter)</a>,
Kyle Burton <a href="http://asymmetrical-view.com/">(blog)</a>,
Daniel Miladinov <a href="https://github.com/danielmiladinov">(github)</a>,
Chris Salch <a href="https://github.com/arlaneenalra">(github)</a>, and
Tim Visher <a href="https://github.com/timvisher">(github)</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Six Unusual Reasons Why Clojure Is a Delight]]></title>
    <link href="http://deliberate-software.com/unusual-reasons-why-clojure-is-a-delight/"/>
    <updated>2015-02-09T11:36:00-05:00</updated>
    <id>http://deliberate-software.com/unusual-reasons-why-clojure-is-a-delight</id>
    <content type="html"><![CDATA[<p>Clojure is a delightful language, and here are six uncommonly
discussed reasons why.</p>

<h2>1 - Dead Simple Unit Test Mocking</h2>

<p>Clojure is the easiest language to unit test I have ever
seen. &ldquo;Mocking&rdquo; a function in a test only requires a simple
replacement of the function definition. No extraneous interfaces, no
dependency injection, no mocking framework.  The built-in function <code>with-redefs</code>
will replace any function in any library or
namespace with a new definition.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">next-id</span> <span class="p">[</span><span class="nv">connection</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="nb">+ </span><span class="mi">1</span> <span class="p">(</span><span class="nf">get-current-id</span> <span class="nv">connection</span><span class="p">)))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nf">testing</span> <span class="s">&quot;next-id&quot;</span>
</span><span class='line'>  <span class="c1">;; bind get-current-id to a lambda that always returns 4 </span>
</span><span class='line'>  <span class="p">(</span><span class="nf">with-redefs</span> <span class="p">[</span><span class="nv">get-current-id</span> <span class="p">(</span><span class="k">fn </span><span class="p">[</span><span class="nv">_</span><span class="p">]</span> <span class="mi">4</span><span class="p">)]</span>
</span><span class='line'>    <span class="p">(</span><span class="nf">is</span> <span class="p">(</span><span class="nb">= </span><span class="mi">5</span> <span class="p">(</span><span class="nf">next-id</span> <span class="nv">nil</span><span class="p">)))))</span>
</span><span class='line'>
</span></code></pre></td></tr></table></div></figure>


<p>We &ldquo;mock&rdquo; the <code>get-current-id</code> function to always return 4 inside
the scope of <code>with-redefs</code>. Couldn&rsquo;t be more simple! The binding
only is in scope for code inside and called by the s-expression of the
with-redefs, so no need to unbind it after the test.</p>

<h2>2 - Amazing Editing</h2>

<p>Many arguments have been made over those contentious
parentheses. While the most powerful use of s-expressions is to easily
allow macros, for the day to day, s-expressions have a very important
use: amazing editing!</p>

<p><img class="center" src="http://danmidwood.com/assets/animated-paredit/paredit-slurp-barf.gif" title="image" alt="images"></p>

<p>With ParEdit (available in most editors), it is trivial to select,
move, replace, grow, or shrink any s-expression, string, map, or
list. <a href="http://danmidwood.com/content/2014/11/21/animated-paredit.html">This animated guide</a>
shows excellent examples of ParEdit that are too
complex to explain here.</p>

<p>Languages that don&rsquo;t have a surrounding delimiter for expressions
leave you jumping around with the mouse and arrow keys a whole lot more.
Because it is so much easier to write a parser to select <code>(add 1 2)</code>
than it is for <code>add(1, 2)</code>, the tooling can be so much better.</p>

<p>No local editing tool I have seen comes close to Vim with ParEdit for
effective editing.</p>

<h2>3 - Live Attached Repl</h2>

<p>Developing in Clojure against a running version of the program is a
huge bonus for development speed. While possible to get similar
behavior with an attached debugger in other languages, the fluidity of
an always-on live attached repl is incredible. At any point, it is
possible to run and rerun any given expression to see the
results. More than once, I have seen an exception caused by calling a
certain function. I trace that function to see the exact inputs that
cause the exception, and am able to quickly run every line of the
offending function to see the source.</p>

<p>If a debugger sheds light on a single line at a time when running an
application, a live attached repl sheds light on the entire
application.</p>

<h2>4 - No-fuss Polymorphism</h2>

<p>One of the best claims about &ldquo;traditional&rdquo; Java OO is
polymorphism. The ability to make an interface with concrete classes
gives the powerful ability to replace behavior dynamically. The
trouble is, Java&rsquo;s polymorphic dynamic dispatch is single dispatch - the
decision of which method to call is limited to a single thing: the
type of the callee. If this was the only type of dynamic dispatch you
ever knew of, it might be hard for you to consciously realize it was
ever a limitation, especially if you&rsquo;ve never seen examples of
multiple dispatch.</p>

<p>While most of the time, in any language with first class functions, it
is possible to achieve a similar effect by passing functions, it is
also possible to get a similar value with something called multimethods.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="kd">defmulti </span><span class="nv">speak</span> <span class="ss">:animal</span><span class="p">)</span>
</span><span class='line'><span class="p">(</span><span class="kd">defmethod </span><span class="nv">speak</span> <span class="ss">:dog</span> <span class="p">[</span><span class="nv">this</span><span class="p">]</span> <span class="p">(</span><span class="nb">str </span><span class="s">&quot;woof says &quot;</span> <span class="p">(</span><span class="ss">:name</span> <span class="nv">this</span><span class="p">)))</span>
</span><span class='line'><span class="p">(</span><span class="kd">defmethod </span><span class="nv">speak</span> <span class="ss">:cat</span> <span class="p">[</span><span class="nv">this</span><span class="p">]</span> <span class="p">(</span><span class="nb">str </span><span class="s">&quot;mow says &quot;</span> <span class="p">(</span><span class="ss">:name</span> <span class="nv">this</span><span class="p">)))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nf">speak</span> <span class="p">{</span><span class="ss">:animal</span> <span class="ss">:dog</span> <span class="ss">:id</span> <span class="mi">1</span> <span class="ss">:name</span> <span class="s">&quot;Spike&quot;</span><span class="p">})</span>
</span><span class='line'><span class="c1">;; =&gt; &quot;woof says Spike&quot;</span>
</span><span class='line'><span class="p">(</span><span class="nf">speak</span> <span class="p">{</span><span class="ss">:animal</span> <span class="ss">:cat</span> <span class="ss">:id</span> <span class="mi">2</span> <span class="ss">:name</span> <span class="s">&quot;Mr Cat&quot;</span><span class="p">})</span>
</span><span class='line'><span class="c1">;; =&gt; &quot;mow says Mr Cat&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>In this example, we use the <code>:animal</code> keyword to be the &ldquo;route&rdquo; function,
and the two methods fill in two of the possible concrete types. We are
not limited to just a keyword, we can dispatch on anything on the
passed map, for example, the oddness of the id:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="kd">defmulti </span><span class="nv">odds?</span> <span class="p">(</span><span class="nb">comp </span><span class="nv">odd?</span> <span class="ss">:id</span><span class="p">))</span>
</span><span class='line'><span class="p">(</span><span class="kd">defmethod </span><span class="nv">odds?</span> <span class="nv">true</span> <span class="p">[</span><span class="nv">d</span><span class="p">]</span> <span class="s">&quot;odd id&quot;</span><span class="p">)</span>
</span><span class='line'><span class="p">(</span><span class="kd">defmethod </span><span class="nv">odds?</span> <span class="nv">false</span> <span class="p">[</span><span class="nv">c</span><span class="p">]</span> <span class="s">&quot;even id&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nf">odds?</span> <span class="p">{</span><span class="ss">:animal</span> <span class="ss">:dog</span> <span class="ss">:id</span> <span class="mi">1</span> <span class="ss">:name</span> <span class="s">&quot;Spike&quot;</span><span class="p">})</span>
</span><span class='line'><span class="c1">;; =&gt; &quot;odd id&quot;</span>
</span><span class='line'><span class="p">(</span><span class="nf">odds?</span> <span class="p">{</span><span class="ss">:animal</span> <span class="ss">:cat</span> <span class="ss">:id</span> <span class="mi">2</span> <span class="ss">:name</span> <span class="s">&quot;Mr Cat&quot;</span><span class="p">})</span>
</span><span class='line'><span class="c1">;; =&gt; &quot;even id&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>While both examples are a bit silly, they should demonstrate the power
of simple polymorphism. But you might think, what about inheritance?
Multimethods allow that too!</p>

<h2>5 - Simple Multiple Inheritance</h2>

<p>We don&rsquo;t build inheritance on a single type, but on a hierarchy of
keywords. Those can be dispatched on just like any other
keyword. First, an example hierarchy of keywords using the built-in
functions <code>derive</code> and <code>isa?</code>. These <code>::</code> keywords are
namespaced, which prevents collisions.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="nf">derive</span> <span class="ss">::cat</span> <span class="ss">::mammal</span><span class="p">)</span>
</span><span class='line'><span class="p">(</span><span class="nf">derive</span> <span class="ss">::dog</span> <span class="ss">::mammal</span><span class="p">)</span>
</span><span class='line'><span class="p">(</span><span class="nf">derive</span> <span class="ss">::dog</span> <span class="ss">::hairy</span><span class="p">)</span>
</span><span class='line'><span class="p">(</span><span class="nf">derive</span> <span class="ss">::poodle</span> <span class="ss">::dog</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nf">isa?</span> <span class="ss">::poodle</span> <span class="ss">::dog</span><span class="p">)</span>
</span><span class='line'><span class="c1">;; =&gt; true</span>
</span><span class='line'><span class="p">(</span><span class="nf">isa?</span> <span class="ss">::poodle</span> <span class="ss">::mammal</span><span class="p">)</span>
</span><span class='line'><span class="c1">;; =&gt; true</span>
</span><span class='line'><span class="p">(</span><span class="nf">isa?</span> <span class="ss">::poodle</span> <span class="ss">::hairy</span><span class="p">)</span>
</span><span class='line'><span class="c1">;; =&gt; true</span>
</span><span class='line'><span class="p">(</span><span class="nf">isa?</span> <span class="ss">::poodle</span> <span class="ss">::cat</span><span class="p">)</span>
</span><span class='line'><span class="c1">;; =&gt; false</span>
</span><span class='line'><span class="p">(</span><span class="nf">isa?</span> <span class="ss">::mammal</span> <span class="ss">::hairy</span><span class="p">)</span>
</span><span class='line'><span class="c1">;; =&gt; false</span>
</span></code></pre></td></tr></table></div></figure>


<p>A <code>::dog</code> is-a <code>::mammal</code> and is-a <code>::hairy</code>, the
classical diamond problem (without the common ancestor, which is
possible, but unneeded for the example).</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="kd">defmulti </span><span class="nv">speak</span> <span class="ss">:animal</span><span class="p">)</span>
</span><span class='line'><span class="p">(</span><span class="kd">defmethod </span><span class="nv">speak</span> <span class="ss">::poodle</span> <span class="p">[</span><span class="nv">d</span><span class="p">]</span> <span class="s">&quot;chirps&quot;</span><span class="p">)</span>
</span><span class='line'><span class="p">(</span><span class="kd">defmethod </span><span class="nv">speak</span> <span class="ss">::mammal</span> <span class="p">[</span><span class="nv">c</span><span class="p">]</span> <span class="s">&quot;breathes&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nf">speak</span> <span class="p">{</span><span class="ss">:animal</span> <span class="ss">::poodle</span> <span class="ss">:id</span> <span class="mi">1</span> <span class="ss">:name</span> <span class="s">&quot;Spike&quot;</span><span class="p">})</span>
</span><span class='line'><span class="c1">;; =&gt; &quot;chirps&quot;</span>
</span><span class='line'><span class="p">(</span><span class="nf">speak</span> <span class="p">{</span><span class="ss">:animal</span> <span class="ss">::dog</span> <span class="ss">:id</span> <span class="mi">2</span> <span class="ss">:name</span> <span class="s">&quot;Mr Dog&quot;</span><span class="p">})</span>
</span><span class='line'><span class="c1">;; =&gt; &quot;breathes&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="kd">defmulti </span><span class="nv">shave</span> <span class="ss">:animal</span><span class="p">)</span>
</span><span class='line'><span class="p">(</span><span class="kd">defmethod </span><span class="nv">shave</span> <span class="ss">::poodle</span> <span class="p">[</span><span class="nv">d</span><span class="p">]</span> <span class="s">&quot;shivers&quot;</span><span class="p">)</span>
</span><span class='line'><span class="p">(</span><span class="kd">defmethod </span><span class="nv">shave</span> <span class="ss">::hairy</span> <span class="p">[</span><span class="nv">c</span><span class="p">]</span> <span class="s">&quot;stuggles&quot;</span><span class="p">)</span>
</span><span class='line'><span class="p">(</span><span class="kd">defmethod </span><span class="nv">shave</span> <span class="ss">::mammal</span> <span class="p">[</span><span class="nv">c</span><span class="p">]</span> <span class="s">&quot;maybe cant be shaved!&quot;</span><span class="p">)</span>
</span><span class='line'><span class="p">(</span><span class="nf">prefer-method</span> <span class="nv">shave</span> <span class="ss">::hairy</span> <span class="ss">::mammal</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nf">shave</span> <span class="p">{</span><span class="ss">:animal</span> <span class="ss">::poodle</span> <span class="ss">:id</span> <span class="mi">1</span> <span class="ss">:name</span> <span class="s">&quot;Spike&quot;</span><span class="p">})</span>
</span><span class='line'><span class="c1">;; =&gt; &quot;shivers&quot;</span>
</span><span class='line'><span class="p">(</span><span class="nf">shave</span> <span class="p">{</span><span class="ss">:animal</span> <span class="ss">::dog</span> <span class="ss">:id</span> <span class="mi">2</span> <span class="ss">:name</span> <span class="s">&quot;Rufs&quot;</span><span class="p">})</span>
</span><span class='line'><span class="c1">;; =&gt; &quot;stuggles&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>We can see the <code>::dog</code> keyword doesn&rsquo;t have an explicit speak or shave
implementation, which is fine, because it will then use the &ldquo;preferred&rdquo;
parent implementation, which returns &ldquo;breathes&rdquo; for speak or
&ldquo;struggles&rdquo; for shave. Since we can have a keyword be the child of
multiple parents, we get a multiple inherited behavior, where the
preferred match is the one returned.</p>

<p>This is possible because the default equality check of multimethod is
the <code>isa?</code> function. Because of this, uses of multimethod
hierarchies can have inherited behavior for complex structures.</p>

<h2>6 - Mostly Monadic</h2>

<p>Languages like Haskell and F# have tools like the maybe monad that add
safety to operations. For example, using the maybe monad can
completely prevent null reference exceptions by making you ensure you
&ldquo;unpack&rdquo; the value every time.</p>

<p>How does Clojure address this? In a typical Clojure way, which gives
80% of the value for 20% of the effort, Clojure has a great
relationship with empty lists and nil. Rather than wrapping every
value that is nullable in a type, Clojure&rsquo;s default functions all
<em>mostly</em> deal with nil and empty without throwing exceptions. For
example:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="nb">get </span><span class="p">{</span><span class="ss">:id</span> <span class="mi">5</span><span class="p">}</span> <span class="ss">:id</span><span class="p">)</span>
</span><span class='line'><span class="c1">;; =&gt; 5</span>
</span><span class='line'><span class="p">(</span><span class="nb">get </span><span class="nv">nil</span> <span class="ss">:id</span><span class="p">)</span>
</span><span class='line'><span class="c1">;; =&gt; nil</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nb">first </span><span class="p">[</span><span class="mi">3</span> <span class="mi">2</span> <span class="mi">1</span><span class="p">])</span>
</span><span class='line'><span class="c1">;; =&gt; 3</span>
</span><span class='line'><span class="p">(</span><span class="nb">first </span><span class="nv">nil</span><span class="p">)</span>
</span><span class='line'><span class="c1">;; =&gt; nil</span>
</span><span class='line'><span class="p">(</span><span class="nb">count </span><span class="nv">nil</span><span class="p">)</span>
</span><span class='line'><span class="c1">;; =&gt; 0</span>
</span></code></pre></td></tr></table></div></figure>


<p>This allows functions to be chained without fear that along the way a
nil will get returned.</p>

<p>Since most of the core functions are &ldquo;smart&rdquo; about nil, you gain much
of the value and safety of monads without most of the
hassle. Ultimately, a more rich type system would allow for custom
types which can be domain specific, but in day-to-day working,
primitive safety is still a huge win.</p>

<h2>Conclusion</h2>

<p>These are a few simple features that keep me coming back to Clojure,
even from languages like F# and Haskell. While Clojure is a bit more
wordy than the ML family, and not as type safe, the simplicity of
these features keep me coming back for more!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Christmas F# Polymorphism]]></title>
    <link href="http://deliberate-software.com/christmas-f-number-polymorphism/"/>
    <updated>2014-12-06T13:37:00-05:00</updated>
    <id>http://deliberate-software.com/christmas-f-number-polymorphism</id>
    <content type="html"><![CDATA[<p>One of my favorite things about F# is how it lets you choose how you want
to align your data.</p>

<p>In the previous posts highlighting on
<a href="http://deliberate-software.com/function-pattern-matching/">pattern matching</a>
and
<a href="http://deliberate-software.com/inversed-polymorphism/">inverted polymorphism</a>
we covered how pattern matching in F# is safer than <code>if</code>
statements and can replace classes and interfaces for polymorphism. If
you are unfamiliar with these concepts, you might want to skim those
first.</p>

<p>Today, for the 6th day of the
<a href="https://sergeytihon.wordpress.com/2014/11/24/f-advent-calendar-in-english-2014/">F# Advent Calendar</a>
I wanted to highlight F#&rsquo;s flexibility in solving the
&ldquo;<a href="http://c2.com/cgi/wiki?ExpressionProblem">expression problem</a>&rdquo;.</p>

<p>Let&rsquo;s show the two alternatives, first here is one with interfaces:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">type</span> <span class="nc">IChristmasTrees</span> <span class="o">=</span>
</span><span class='line'>    <span class="k">abstract</span> <span class="k">member</span> <span class="n">Cost</span> <span class="o">:</span> <span class="n">int</span> <span class="o">-&gt;</span> <span class="n">int</span>
</span><span class='line'>    <span class="k">abstract</span> <span class="k">member</span> <span class="n">Colors</span> <span class="o">:</span> <span class="kt">unit</span> <span class="o">-&gt;</span> <span class="kt">string</span> <span class="kt">list</span>
</span><span class='line'>
</span><span class='line'><span class="k">type</span> <span class="nc">PlasticTree</span><span class="bp">()</span> <span class="o">=</span>
</span><span class='line'>    <span class="k">interface</span> <span class="n">IChristmasTrees</span> <span class="k">with</span>
</span><span class='line'>        <span class="k">member</span> <span class="n">this</span><span class="p">.</span><span class="nf">Cost</span><span class="o">(</span><span class="n">jolly_factor</span><span class="o">)</span> <span class="o">=</span> <span class="o">(</span><span class="mi">100</span> <span class="o">*</span> <span class="n">jolly_factor</span><span class="o">)</span> <span class="o">/</span> <span class="mi">2</span>
</span><span class='line'>        <span class="k">member</span> <span class="n">this</span><span class="p">.</span><span class="nf">Colors</span><span class="bp">()</span> <span class="o">=</span> <span class="o">[</span><span class="s">&quot;green&quot;</span><span class="o">;</span><span class="s">&quot;silver&quot;</span><span class="o">]</span>
</span><span class='line'>
</span><span class='line'><span class="k">type</span> <span class="nc">LiveTree</span><span class="bp">()</span> <span class="o">=</span>
</span><span class='line'>    <span class="k">let</span> <span class="nv">HEAD_ACHE</span> <span class="o">=</span> <span class="mi">15</span>
</span><span class='line'>    <span class="k">interface</span> <span class="n">IChristmasTrees</span> <span class="k">with</span>
</span><span class='line'>        <span class="k">member</span> <span class="n">this</span><span class="p">.</span><span class="nf">Cost</span><span class="o">(</span><span class="n">jolly_factor</span><span class="o">)</span> <span class="o">=</span> <span class="o">(</span><span class="n">jolly_factor</span> <span class="o">+</span> <span class="mi">10</span><span class="o">)</span> <span class="o">*</span> <span class="n">HEAD_ACHE</span>
</span><span class='line'>        <span class="k">member</span> <span class="n">this</span><span class="p">.</span><span class="nf">Colors</span><span class="bp">()</span> <span class="o">=</span> <span class="o">[</span><span class="s">&quot;green&quot;</span><span class="o">;</span><span class="s">&quot;brown&quot;</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>Now the same functionality using pattern matching and discriminated unions.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">type</span> <span class="nc">IChristmasTrees2</span> <span class="o">=</span>
</span><span class='line'>  <span class="o">|</span> <span class="n">PlasticTree</span>
</span><span class='line'>  <span class="o">|</span> <span class="n">LiveTree</span>
</span><span class='line'>
</span><span class='line'><span class="k">let</span> <span class="nv">colors</span> <span class="o">=</span> <span class="k">function</span>
</span><span class='line'>  <span class="o">|</span> <span class="n">PlasticTree</span> <span class="o">-&gt;</span> <span class="o">[</span><span class="s">&quot;green&quot;</span><span class="o">;</span><span class="s">&quot;silver&quot;</span><span class="o">]</span>
</span><span class='line'>  <span class="o">|</span> <span class="n">LiveTree</span> <span class="o">-&gt;</span> <span class="o">[</span><span class="s">&quot;green&quot;</span><span class="o">;</span><span class="s">&quot;brown&quot;</span><span class="o">]</span>
</span><span class='line'>
</span><span class='line'><span class="k">let</span> <span class="nv">cost</span> <span class="n">tree</span> <span class="n">jolly_factor</span> <span class="o">=</span>
</span><span class='line'>  <span class="k">match</span> <span class="n">tree</span> <span class="k">with</span>
</span><span class='line'>    <span class="o">|</span> <span class="n">PlasticTree</span> <span class="o">-&gt;</span> <span class="o">(</span><span class="mi">100</span> <span class="o">*</span> <span class="n">jolly_factor</span><span class="o">)</span> <span class="o">/</span> <span class="mi">2</span>
</span><span class='line'>    <span class="o">|</span> <span class="n">LiveTree</span> <span class="o">-&gt;</span>
</span><span class='line'>      <span class="k">let</span> <span class="nv">HEAD_ACHE</span> <span class="o">=</span> <span class="mi">15</span>
</span><span class='line'>      <span class="o">(</span><span class="n">jolly_factor</span> <span class="o">+</span> <span class="mi">10</span><span class="o">)</span> <span class="o">*</span> <span class="n">HEAD_ACHE</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>What changes if we want to add a new type of tree? In the class-based
example, adding a new type is quite simple, you only need to edit one
place to find all the definitions regarding the new type.</p>

<p><img class="center" src="http://deliberate-software.com/images/new-interfaces.png" title="image" alt="images"></p>

<p>In the pattern matching example, adding a new type requires editing
every single place you created a function that matches on the
type.</p>

<p><img class="center" src="http://deliberate-software.com/images/new-pattern-matching.png" title="image" alt="images"></p>

<p>Thankfully, in both cases the compiler gives warnings about missing
functions or matches, so both are equally &ldquo;safe&rdquo;.</p>

<p>What about changing an existing function or adding a new function? We
now see the opposite behavior. Classes become harder to edit, because
the functions are spread across multiple classes.</p>

<p><img class="center" src="http://deliberate-software.com/images/change-interfaces.png" title="image" alt="images"></p>

<p>A pattern matching system is now the easier to modify, each function
only lives in one place.</p>

<p><img class="center" src="http://deliberate-software.com/images/change-pattern-matching.png" title="image" alt="images"></p>

<p>And that is the expression problem! The best thing about F# is that
you get to pick which one is better for each type of data! If you know
a certain type will need new behavior often, but rarely need new
types, use pattern matching. If you know there is a static set of
functions for a set of types, but the type list changes often, maybe
the traditional interfaces and classes makes the most sense.</p>

<p>There is no reason not to mix and match the two ways to handle
polymorphism, so you are free to choose the best representation for
each type of data you have!</p>

<p>Happy F#-filled Festivities!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Emacs Project Tip]]></title>
    <link href="http://deliberate-software.com/emacs-project-tip/"/>
    <updated>2014-12-06T08:45:00-05:00</updated>
    <id>http://deliberate-software.com/emacs-project-tip</id>
    <content type="html"><![CDATA[<p>I recently have been working in a Clojure project which is made up of
several microservices. While trying to build in a secure method for
each service to be able to call the others, I&rsquo;ve been in several
different projects at the same time.</p>

<p>At least once I accidentally opened the wrong &ldquo;handler.clj&rdquo; buffer,
and spent a few minutes adding a function that never worked. Since I
hate doing things like this, I wanted a simple way to see what project
I was currently viewing.</p>

<p>I started with a changing the title of the frame to show the whole
path of the current buffer, like this:</p>

<p><img class="center" src="http://deliberate-software.com/images/title.png" title="image" alt="images"></p>

<p>The code to change the title is simple, and the default in some of the
pre-packaged emacs bundles:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='common-lisp'><span class='line'><span class="p">(</span><span class="k">setq</span> <span class="nv">frame-title-format</span>
</span><span class='line'>      <span class="o">&#39;</span><span class="p">((</span><span class="ss">:eval</span> <span class="p">(</span><span class="k">if</span> <span class="p">(</span><span class="nv">buffer-file-name</span><span class="p">)</span>
</span><span class='line'>                   <span class="p">(</span><span class="nv">abbreviate-file-name</span> <span class="p">(</span><span class="nv">buffer-file-name</span><span class="p">))</span>
</span><span class='line'>                 <span class="s">&quot;%b&quot;</span><span class="p">))))</span>
</span></code></pre></td></tr></table></div></figure>


<p>This is fine, but still not great. The font is tiny and the important
part: &ldquo;octopress&rdquo; is buried. I wanted something a little more fluid,
so I could easily tell the different projects apart instantly. I came
up with the idea to color the background faintly different based on
the path of the file. Files with a path containing &ldquo;octopress&rdquo; might
be different from those containing &ldquo;.emacs&rdquo;.</p>

<p>Thankfully, <code>buffer-face-mode</code> makes it easy to change a single
property of a single buffer&rsquo;s face without changing any other
buffer. So long as you disable buffer-face-mode when closing emacs,
your files will open with the correct coloring scheme, then have the
new background overlaid.</p>

<p>While not perfect, this was the result.</p>

<p><img class="center" src="http://deliberate-software.com/images/colors.png" title="image" alt="images"></p>

<p>The colors I choose are only faintly different, but just enough for me
to tell instantly which is which.</p>

<p>The buffer colors are applied when opening a file, using these
functions:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='common-lisp'><span class='line'><span class="p">(</span><span class="nb">defun</span> <span class="nv">my-buffer-face-mode-variable</span> <span class="p">(</span><span class="nv">color</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="nv">interactive</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="k">setq</span> <span class="nv">buffer-face-mode-face</span> <span class="p">(</span><span class="nb">list</span> <span class="ss">:background</span> <span class="nv">color</span><span class="p">))</span>
</span><span class='line'>  <span class="p">(</span><span class="nv">buffer-face-mode</span> <span class="mi">1</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nb">defun</span> <span class="nv">my-set-theme-on-mode</span> <span class="p">()</span>
</span><span class='line'>  <span class="p">(</span><span class="nv">interactive</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="k">let</span> <span class="p">((</span><span class="nv">file-name</span> <span class="p">(</span><span class="nv">buffer-file-name</span><span class="p">)))</span>
</span><span class='line'>    <span class="p">(</span><span class="nb">cond</span>
</span><span class='line'>    <span class="c1">;; add your own project/color mappings here</span>
</span><span class='line'>     <span class="p">((</span><span class="nv">string-match</span> <span class="s">&quot;halcyon&quot;</span> <span class="nv">file-name</span><span class="p">)</span> <span class="p">(</span><span class="nv">my-buffer-face-mode-variable</span> <span class="s">&quot;#00001A&quot;</span><span class="p">))</span>
</span><span class='line'>     <span class="p">((</span><span class="nv">string-match</span> <span class="s">&quot;dwarf&quot;</span> <span class="nv">file-name</span><span class="p">)</span> <span class="p">(</span><span class="nv">my-buffer-face-mode-variable</span> <span class="s">&quot;#001A1A&quot;</span><span class="p">))</span>
</span><span class='line'>     <span class="p">((</span><span class="nv">string-match</span> <span class="s">&quot;nimbus&quot;</span> <span class="nv">file-name</span><span class="p">)</span> <span class="p">(</span><span class="nv">my-buffer-face-mode-variable</span> <span class="s">&quot;black&quot;</span><span class="p">))</span>
</span><span class='line'>     <span class="p">(</span><span class="no">t</span> <span class="s">&quot;&quot;</span><span class="p">))))</span>
</span></code></pre></td></tr></table></div></figure>


<p>To force them to run when opening a file, since I use helm, I set it
to execute on exiting helm for any reason:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='common-lisp'><span class='line'><span class="p">(</span><span class="nv">add-hook</span> <span class="ss">&#39;helm-after-action-hook</span> <span class="ss">&#39;my-set-theme-on-mode</span><span class="p">)</span>
</span><span class='line'><span class="c1">;; uncomment if not using helm</span>
</span><span class='line'><span class="c1">;; (add-hook &#39;find-file-hook &#39;my-set-theme-on-mode)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Lastly, to make sure emacs applies my normal theme and settings to a
buffer when starting, I disable buffer-face-mode on all buffers before
exiting.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='common-lisp'><span class='line'><span class="p">(</span><span class="nb">defun</span> <span class="nv">disable-all-buffer-face-mode</span> <span class="p">()</span>
</span><span class='line'>  <span class="p">(</span><span class="nv">interactive</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="k">let</span> <span class="p">((</span><span class="nv">current</span> <span class="p">(</span><span class="nv">get-buffer</span> <span class="p">(</span><span class="nv">current-buffer</span><span class="p">))))</span>
</span><span class='line'>    <span class="p">(</span><span class="nv">-map</span> <span class="p">(</span><span class="k">lambda</span> <span class="p">(</span><span class="nv">x</span><span class="p">)</span> <span class="p">(</span><span class="k">progn</span> <span class="p">(</span><span class="nv">switch-to-buffer</span> <span class="nv">x</span><span class="p">)</span>
</span><span class='line'>                             <span class="p">(</span><span class="nv">buffer-face-mode</span> <span class="mi">0</span><span class="p">)))</span> <span class="p">(</span><span class="nv">buffer-list</span><span class="p">))</span>
</span><span class='line'>    <span class="p">(</span><span class="nv">switch-to-buffer</span> <span class="nv">current</span> <span class="mi">1</span><span class="p">)))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nv">add-hook</span> <span class="ss">&#39;kill-emacs-hook</span> <span class="ss">&#39;disable-all-buffer-face-mode</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>This block needs <a href="https://github.com/magnars/dash.el">dash.el</a> to get
the -map function.</p>

<p>While not the only solution, this seemed a simple and elegant way to
quickly be reminded of your current project.</p>

<p>Enjoy!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Software Skills Continuum]]></title>
    <link href="http://deliberate-software.com/skill-continuum/"/>
    <updated>2014-12-02T07:26:00-05:00</updated>
    <id>http://deliberate-software.com/skill-continuum</id>
    <content type="html"><![CDATA[<pre><code>    Learning Vim is a waste of time; I can prove it! - Anonymous
</code></pre>

<p>I recently had a gentle discussion with a new teammate about whether
or not they should learn to use Vim. My team uses a Vim emulator
inside Visual Studio and Emacs, and so we recommended he learn at
least the basics so to reduce friction when pair-programming (which we
do almost all the time).</p>

<p>He really had no desire to learn it, and took no small amount of
offense when we suggested it. The friction he felt trying to &ldquo;start
over&rdquo; really bothered him. He set out to prove that Vim was not worth
his time, and that it was actually us who needed to stop using it,
because we were the duped slow ones.</p>

<p>As any such localized experiments go, he never really came up with
anything conclusive either way. Personally, I suspect he spent more
time trying to figure out why Vim was worse than if he had just
buckled down and learned it. This got me thinking about skills we
learn as developers, and how much they cost.</p>

<h1>Skills</h1>

<p>Most skills fall along a continuum of tactical to strategic.</p>

<h3>Tactical Skills</h3>

<ul>
<li>Typing speed/accuracy</li>
<li>Keyboard shortcuts</li>
<li>&ldquo;Mouse-free&rdquo; editing systems: Vim, Emacs</li>
<li>Clean coding practices</li>
<li>Refactoring tools</li>
<li>Repl Driven Development / Test Driven Development</li>
<li>Debugging</li>
</ul>


<h3>Mid-way Skills</h3>

<ul>
<li>Unit testing</li>
<li>Building abstractions</li>
<li>Designing simple solutions</li>
<li>Automating tasks</li>
<li>Learning new languages and frameworks</li>
</ul>


<h3>Strategic Skills</h3>

<ul>
<li>Gathering requirements</li>
<li>Training developers</li>
<li>Organizing and leading teams</li>
<li>&ldquo;Understanding the real problem&rdquo;</li>
</ul>


<p>The more strategic the skills, the &ldquo;softer&rdquo; they become. The reason for this is
that soft skills often allow for the greatest leverage on a project.</p>

<p>Why is this?</p>

<p>Consider the developer, who by more accurately gathering requirements for a few
extra days, realizes that the stakeholder can use a preexisting solution instead
of a six month planned project. If you consider how many keystrokes he saved,
there is no way he could have typed fast enough to make up six months of effort.
Unless he can type out a six month project in a few days, his time was better
spent where it was. Obviously, these opportunities do not happen all the time,
but they <em>do</em> happen and it doesn&rsquo;t take more than one or two a year to have
major impact!</p>

<p>Think about the return on investment for training developers. If you have an
average team (and yes, we all do), there is a good chance you have some lower
performing developers. I have witnessed many times where a few months of pairing
to brush up the skills of a less skilled developer allowed them to become much
more productive. In terms of total company effort, that small investment paid
back many times before the end of the year as the newly trained developer was
able to tackle their work with the renewed vigor that comes from a greater
mastery of their work.</p>

<p>Similarly, the judicious use of automation for deployment, testing, and building
greatly reduces the friction of development for entire teams. Lowered friction
means less cognitive burden.</p>

<p>That being said, I think there comes a point where you have to put fingers to
keyboard and actually produce working software. Of course, the fastest and best
software is the software you never have to write. But, when you absolutely must
write or modify software, the ability to execute is essential. Tactical skills
increase in significance the closer you get to the work.</p>

<p>While a great software tactician will never &ldquo;beat&rdquo; a great strategist in terms
of raw business value, a great strategist that is a terrible tactician can only
talk their way out of work. A strategist who forgets or ignores good tactics is
what we call an &ldquo;architecture astronaut&rdquo; or an &ldquo;ivory tower architect&rdquo;. These
disconnected strategists eventually start to remove business value as their
solutions make less and less practical sense.</p>

<p>I think a developer who wants to improve should make sure they are improving all
across the spectrum. Don&rsquo;t focus only on strategic or tactical skills, but seek
projects and teams that will allow you to gain skills across the board. I like
to try to focus on one skill from each side of the continuum each year. This
year, it is emacs automation and monads on the tactical side, and leading mature
teams on the strategic. By alternating readings, I find fuel to apply the
strategies using these new tactics!</p>

<p>Lastly, on the subject of &ldquo;what to study&rdquo;, I think it is possible to study a
number of subjects all across the continuum. Unless you have weeks where you
never type any code at all, you can practice and learn new tactical techniques
all the time. If it slows you down today, but speeds you up next week, it might
just be worth it. Even if it slowed you down to a quarter your usual speed for
two weeks, but then gives you a measly 5% boost to productively after that,
you&rsquo;ll earn that time back by the end of the year, plus some. And 5% is not hard
to do. I&rsquo;d guess learning a few new navigation or refactoring shortcuts would
net you 5% easily.</p>

<p>When studying more strategic skills, the same holds, but they are harder to
learn. The best way I have found for learning strategic skills is to read books
about it, and try to work around others who are good at it. Neither books or
working with others will get you all the way there, you also have to apply it
yourself.</p>

<h1>Progression</h1>

<p>I usually recommend that the more experienced a person is, the more mastery they
should have in the tactical skills. A suggested path I&rsquo;ve recommended for a new
developer would look like this:</p>

<h3>0 - 6 Months:</h3>

<ul>
<li>Typing speed/accuracy</li>
<li>Keyboard shortcuts</li>
<li>Repl Driven Development / Test Driven Development</li>
<li>Unit testing</li>
<li>Clean coding practices</li>
<li>Designing simple solutions</li>
</ul>


<h3>0 - 2 Years:</h3>

<ul>
<li>Debugging</li>
<li>Refactoring tools</li>
<li>Building abstractions</li>
<li>Automating tasks</li>
<li>Learning new languages and frameworks</li>
<li>&ldquo;Mouse-free&rdquo; editing systems: Vim, Emacs</li>
</ul>


<h3>0 - 50+ Years:</h3>

<ul>
<li>Gathering requirements</li>
<li>Training developers</li>
<li>Organizing and leading teams</li>
<li>Understanding the real problem</li>
</ul>


<p>This is not a hard and fast list. If you are completely unsure of what to learn,
I recommend this rough progression just to get you started. If you are a two
year developer, and you cannot touch type, I think learning it can really help,
alongside the other 0 - 2 year skills.</p>

<p>Not all skills along the list build on a mastery of the ones below it. A
developer can absolutely get to a very senior mastery of the strategic skills
only knowing one language and using notepad.exe. I believe that they are missing
out on a deep richness that comes from better knowing their field, and I suggest
they spend some time learning new languages and tools. The more tactical the
skill, usually, the easier it is to learn, so it won&rsquo;t take very much time to
come up to speed.</p>

<p>The hardest thing I think a more senior developer has to deal with is humbling
themselves to learn a perceived &ldquo;entry-level&rdquo; skill. I have another post brewing
about this very topic, so I&rsquo;ll not get too much into it here. But if you have
gotten to a place where you feel like you are so senior that some skills are too
&ldquo;entry-level&rdquo; for you to learn, I think you need to humble yourself and learn
them. Nothing can be gained from pretending like they are not valuable.
Additionally, the assumption that your time is now so valuable that it is &ldquo;a
waste&rdquo; to spend it on learning tactical skills is absurd.</p>

<p>Claiming you are too good to waste on low level skills not only belittles
everyone around you, but belies a deep misunderstanding of our field. The senior
developer who takes five times as long to enter and edit code isn&rsquo;t just
spending longer to do that task, but they are paying a missed opportunity cost
in time they could have spent in more strategic endeavors. They could have been
training, planning, gathering requirements, building better automation, etc,
instead they stubbornly claim &ldquo;typing isn&rsquo;t what software is about&rdquo;. By giving
it so little credence, they have made it most of their actual mental effort!
Take simple touch-typing. Imagine how much mental effort it takes the
hunt-and-peck typist to write out a single line of code. That is mental overhead
that is simply wasted. The developer who doesn&rsquo;t have to think about how to move
a file or edit a structure finds themselves quickly through the tactical efforts
with little distraction, free to think deeply.</p>

<h1>Resources</h1>

<p>Here are some links and books to get you started on these topics.</p>

<ul>
<li>Typing speed/accuracy - <a href="http://store.steampowered.com/agecheck/app/246580/">Typing of the Dead</a></li>
<li>&ldquo;Mouse-free&rdquo; editing systems: Vim, Emacs - <a href="http://vim-adventures.com/">Vim Adventures</a></li>
<li>Clean coding practices - <a href="https://cleancoders.com/">Clean Coders</a></li>
<li>Repl Driven Development - <a href="http://blog.jayfields.com/2014/01/repl-driven-development.html">RDD</a></li>
<li>Test Driven Development - <a href="http://www.amazon.com/Test-Driven-Development-By-Example/dp/0321146530">http://www.amazon.com/Test-Driven-Development-By-Example/dp/0321146530</a></li>
<li>Debugging - <a href="http://c.learncodethehardway.org/book/ex31.html">Debugging</a></li>
<li>Building abstractions / Designing Simple Solutions - <a href="http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-4.html#%_toc_start">Structure and Interpretation of Computer Programs</a></li>
<li>Training developers - <a href="http://en.wikipedia.org/wiki/Pair_programming">Pair Programming</a></li>
<li>Organizing and leading teams - <a href="http://managinghumans.com/">Managing Humans</a></li>
<li>Understanding the real problem - <a href="http://en.wikipedia.org/wiki/Thinking,_Fast_and_Slow">Thinking Fast and Slow</a></li>
<li>Learning new languages and frameworks - <a href="http://norvig.com/21-days.html">Teach Yourself Programming in Ten Years</a></li>
<li>Automating tasks <a href="http://www.stuartellis.eu/articles/rake/">Rake to Automate Tasks</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[What Book Should I Read Next?]]></title>
    <link href="http://deliberate-software.com/next-book/"/>
    <updated>2014-07-26T11:46:00-04:00</updated>
    <id>http://deliberate-software.com/next-book</id>
    <content type="html"><![CDATA[<p>&ldquo;It&rsquo;s my first job, what book should I read first?&rdquo;</p>

<p>Recently, a few developers I am mentoring were curious about what book
to read first. Even mid and senior level developers I&rsquo;ve known
sometimes struggle with this question.</p>

<p>If you want to be truly great, you have to read technical books and
white papers, and you have to learn new programming languages. You
could figure the content out yourself from first principles, but you
will be about 50 years behind those who just read the
books. Additionally, if you stick to a certain language, you are
limiting yourself to only thinking about a problem in a way common to
the language.</p>

<p>Just like with adding new features to a project, you should prioritize
your learning.</p>

<p>I&rsquo;d start by getting into the mindset that you will need roughly a
decade and at least ten thousand high quality hours to become a master
programmer. To be able to get that many high-value hours, you will
need to carefully select your jobs, and constantly be learning new
things that actually make you a better developer.</p>

<h2>Languages</h2>

<pre><code>    "A language that doesn't affect the way you think about programming,
    is not worth knowing." - Alan Perlis
</code></pre>

<p>I agree with <a
href="http://michaelochurch.wordpress.com/2012/07/27/six-languages-to-master/">other developers</a> who assert that a language is <a
href="http://en.wikiquote.org/wiki/Alan_Perlis">not worth learning</a>
unless it teaches you something new and mind-expanding. There are exceptions of course. Maybe you want to switch stacks to get an awesome high-value job. By all means, learn the new stack.</p>

<p>If you want to follow the extremely good <a
href="http://pragprog.com/the-pragmatic-programmer">advice of others</a> and learn one new programming language a year, make each
one count. For example, if you are a Ruby guy, it is safe to say you
will learn nothing of really any mind-expanding value if you try to
learn PHP, Python, JavaScript, or Perl.</p>

<p>Same for the family of Java, C++, C#, or VB.NET. One of those is plenty.</p>

<p>Instead shoot for languages that will really beef up your thought
process. I like the advice given by <a href="http://norvig.com/21-days.html">Peter Norvig</a>:</p>

<pre><code>     "Learn at least a half dozen programming languages. Include one
     language that supports class abstractions (like Java or C++), one that
     supports functional abstraction (like Lisp or ML), one that supports
     syntactic abstraction (like Lisp), one that supports declarative
     specifications (like Prolog or C++ templates), one that supports
     coroutines (like Icon or Scheme), and one that supports parallelism
     (like Sisal)."
</code></pre>

<p>I would add to that my own personal list: a language that forces you
to use monands for controlling side-effects (Haskell), and a language
that allows for dependent types (Idris).</p>

<p>If you are saying, &ldquo;wow, in Python, you have to put a colon at the end
of the function signature line, unlike in Ruby, that blows my mind&rdquo;,
or &ldquo;wow, in Java, the String keyword is uppercase instead of
lowercase!&rdquo; chances are you are getting a very low return for your
investment of time.</p>

<p>What is important about a new language is <em>not</em> a new syntax. A new
syntax is just cruft that gets in the way of the new concepts. A new
concept might be closures. If you have always worked in Java, a
closure will really expand your mind. Or macros. If you have never
seen macros, the concept alone is completely foreign, not just the
syntax. That is where the value is. A good test if you are learning
something new is if you have to research what the concept even means,
without even needing to see the syntax first. For example, when I
started learning monads, I didn&rsquo;t even need to see the syntax for how
Haskell does them, I didn&rsquo;t even understand the concept <em>at all</em>, so I
could read pretty much anything about the concept and get value out of
it. That is the high value content.</p>

<h2>Frameworks</h2>

<p>I would say very few frameworks are going to expand your mind in a way
that is worth the effort to learn them. Some very select frameworks
can cause you to think of a problem in a novel way and thus expand
your mind (off the top of my head: React.js, Core.Async, Akka,
Datomic) but those are very few and far between.</p>

<p>Obviously, in production use, frameworks have their place, and they
can provide an immense boost to your day-to-day productivity and
safety, but very few overall will expand your mind in such a way that
would make you better at the craft. It is not hard to reason why. A
framework can only do what is possible in the language. If the
language is only so powerful, the framework cannot be more powerful
than that. You will be using tools that you could&rsquo;ve written yourself
with your current skill level, but you won&rsquo;t even get the benefit of
writing it yourself. Hopefully, those tools will be safer and save you
a lot of time, but saved time cranking out widgets at work will not
directly cause you to better understand programming.</p>

<h2>Paradigms</h2>

<p>It is fashionable these days to get into functional programming. If
you haven&rsquo;t learned a language that supports a functional paradigm, I
highly recommend that as a good place to start. That being the case,
don&rsquo;t forget to add a logic, a literate, and a declarative programming
language to your list too (you have ten years remember, you&rsquo;ll need a
list). Why not pile on a stack based language too?</p>

<h2>Libraries</h2>

<p>While it is important to be aware of the libraries in your space, I
would say these often provide the least mind-expanding
opportunities. A library, much like a framework, is usually
constrained by the power of the language. In most languages, libraries
are just convenience abstractions at or below the same abstraction
layer as the rest of your code. I would never consider doing my
day-to-day work without the full power of available libraries, but
they are not going to help me think any better about the work.</p>

<h2>&ldquo;Meta&rdquo; books</h2>

<p>A vast number of books exist that attempt to impart something of a
&ldquo;mindset&rdquo; for the developer. Usually, the author is retelling his
experiences, which can be entertaining, but of limited reuse. The best
meta books are those that use actual research and data to try to
explain our industry. Books like Peopleware, Code Complete, and
Pragmatic Programmer are great in this regard. These best books can
cause you to see the creation of software artifacts with a totally
different light: e.g. I remember first reading about using a
programming language to generate automatically the source files for a
given project. At the time for me, it was revolutionary.</p>

<h2>Pattern Books</h2>

<p>I lately have come to think &ldquo;pattern books&rdquo; like Domain Driven Design,
Design Patterns, Patterns of Enterprise Architecture, Refactoring, etc
are just a way to try to replicate missing features in a language of a
lower power. These seem to be written for entirely Java and C#, and are mostly
complex solutions to complex problems created by the lack of power of the language. Apparently, I
am not alone: <a
href="http://www.c2.com/cgi/wiki?AreDesignPatternsMissingLanguageFeatures">Are Design Patterns Missing Language Features?</a></p>

<p>That being said, I think some parts of these books are helpful,
specifically, the ubiquitous language ideas from Domain Driven
Design. If your team has decided on always using the terms from a
certain book, and you are the only person who does not know them, I do
recommend at least skimming it just to ensure smooth communication.</p>

<h2>Suggestions</h2>

<p>I won&rsquo;t suggest too many books or languages, but those I do are very
highly recommended.</p>

<ul>
<li><a href="http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-4.html#%_toc_start">Structure and Interpretation of Computer Programs</a>

<ul>
<li>The best book I&rsquo;ve ever read. No other book I&rsquo;ve read even comes close to beating this for sheer value per minute as this book. Do all the exercies, and you&rsquo;ll be way ahead of the curve.</li>
</ul>
</li>
<li>Code Complete</li>
<li>Clean Code</li>
<li>Pragmatic Programmer</li>
<li>Productive Programming</li>
<li>Peopleware</li>
</ul>


<h2>Wrap up</h2>

<p>It takes courage to step outside your comfort zone and learn something
new. You might be the only person learning something new on your
team. That is ok! Don&rsquo;t worry about &ldquo;converting&rdquo; everyone else to the
path of learning, and do not make fun of them or the only language
they know. (Developers who only know one language take any comment
good or bad about &ldquo;their&rdquo; language as a comment about themselves.) If
you do make fun of them, you will start to resent them. It&rsquo;ll make you
look like an outsider, and they will ignore you and finally push you
out of the team.</p>

<p>When you learn a new thing, be very careful to not run around trying
to use it everywhere. I am very careful to not use any new tool in
production until I&rsquo;ve &ldquo;moved on&rdquo; to learning another tool, so I could
critically consider the best tool for the job without the &ldquo;honeymoon&rdquo;
effect clouding my judgment.</p>

<p>My experience has been: keep getting better, and you will find
yourself in better and better places to work. A person who puts in the
effort to really master the craft is easy to spot and hard to
fake. Most people want to work with those who think like them, and you
cannot think like a master engineer only knowing one tool, so get
started now, and have fun!</p>
]]></content>
  </entry>
  
</feed>
