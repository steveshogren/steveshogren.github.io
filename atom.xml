<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Deliberate Software]]></title>
  <link href="http://steveshogren.github.io/atom.xml" rel="self"/>
  <link href="http://steveshogren.github.io/"/>
  <updated>2014-05-03T09:54:25-04:00</updated>
  <id>http://steveshogren.github.io/</id>
  <author>
    <name><![CDATA[Steve Shogren]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Pattern Matching - Make the Compiler Work for You]]></title>
    <link href="http://steveshogren.github.io/function-pattern-matching/"/>
    <updated>2014-04-28T22:05:00-04:00</updated>
    <id>http://steveshogren.github.io/function-pattern-matching</id>
    <content type="html"><![CDATA[<p>Pattern matching is a simple tool that will make your code safer and
easier to read.</p>

<p>Consider the following code that converts an Int to a string.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">public</span> <span class="k">enum</span> <span class="n">Language</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">Spanish</span><span class="p">,</span>
</span><span class='line'>    <span class="n">English</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="k">public</span> <span class="k">static</span> <span class="kt">string</span> <span class="nf">convert</span><span class="p">(</span><span class="kt">int</span> <span class="n">number</span><span class="p">,</span> <span class="n">Language</span> <span class="n">lang</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="kt">string</span> <span class="n">ret</span> <span class="p">=</span> <span class="s">&quot;&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">lang</span> <span class="p">==</span> <span class="n">Language</span><span class="p">.</span><span class="n">English</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">switch</span><span class="p">(</span><span class="n">number</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">case</span> <span class="m">0</span><span class="p">:</span> <span class="n">ret</span> <span class="p">=</span> <span class="s">&quot;zero&quot;</span><span class="p">;</span> <span class="k">break</span><span class="p">;</span>
</span><span class='line'>            <span class="k">case</span> <span class="m">1</span><span class="p">:</span> <span class="n">ret</span> <span class="p">=</span> <span class="s">&quot;one&quot;</span><span class="p">;</span> <span class="k">break</span><span class="p">;</span>
</span><span class='line'>            <span class="k">default</span><span class="p">:</span> <span class="n">ret</span> <span class="p">=</span> <span class="s">&quot;...&quot;</span><span class="p">;</span> <span class="k">break</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">lang</span> <span class="p">==</span> <span class="n">Language</span><span class="p">.</span><span class="n">Spanish</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">switch</span><span class="p">(</span><span class="n">number</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">case</span> <span class="m">0</span><span class="p">:</span> <span class="n">ret</span> <span class="p">=</span> <span class="s">&quot;zero&quot;</span><span class="p">;</span> <span class="k">break</span><span class="p">;</span>
</span><span class='line'>            <span class="k">case</span> <span class="m">1</span><span class="p">:</span> <span class="n">ret</span> <span class="p">=</span> <span class="s">&quot;uno&quot;</span><span class="p">;</span> <span class="k">break</span><span class="p">;</span>
</span><span class='line'>            <span class="k">default</span><span class="p">:</span> <span class="n">ret</span> <span class="p">=</span> <span class="s">&quot;~~~&quot;</span><span class="p">;</span> <span class="k">break</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">ret</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>What happens when we make this simple change?</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">public</span> <span class="k">enum</span> <span class="n">Language</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">Spanish</span><span class="p">,</span>
</span><span class='line'>    <span class="n">English</span><span class="p">,</span>
</span><span class='line'>    <span class="n">German</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>Does the code still compile? Sure does! Does the compiler/IDE offer us
any indication that something is missing? Nope! Our code has a
potential bug that is only exposed at run-time, and nothing will tell
us that. We made it fail gracefully by ensuring our code always
returns at least an empty string, but we have created a bug that can
only really be caught by something external: either automated tests or
manual checking.</p>

<p>The OO purists and &ldquo;Anti-If&rdquo; guys are probably leaping out of their
seats. &ldquo;Use classes and an interface!&rdquo; they yell. Ok, sure. I assert
that it just makes things even worse.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">public</span> <span class="k">interface</span> <span class="n">ILanguage</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">String</span> <span class="nf">convert</span><span class="p">(</span><span class="kt">int</span> <span class="n">num</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="k">public</span> <span class="k">class</span> <span class="nc">Spanish</span> <span class="p">:</span> <span class="n">ILanguage</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">public</span> <span class="n">String</span> <span class="nf">convert</span> <span class="p">(</span><span class="kt">int</span> <span class="n">num</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="kt">var</span> <span class="n">ret</span> <span class="p">=</span> <span class="s">&quot;&quot;</span><span class="p">;</span>
</span><span class='line'>        <span class="k">switch</span> <span class="p">(</span><span class="n">num</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="k">case</span> <span class="m">0</span><span class="p">:</span> <span class="n">ret</span> <span class="p">=</span> <span class="s">&quot;zero&quot;</span><span class="p">;</span> <span class="k">break</span><span class="p">;</span>
</span><span class='line'>          <span class="k">case</span> <span class="m">1</span><span class="p">:</span> <span class="n">ret</span> <span class="p">=</span> <span class="s">&quot;uno&quot;</span><span class="p">;</span> <span class="k">break</span><span class="p">;</span>
</span><span class='line'>          <span class="k">default</span><span class="p">:</span> <span class="n">ret</span> <span class="p">=</span> <span class="s">&quot;~~~&quot;</span><span class="p">;</span> <span class="k">break</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">ret</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="k">public</span> <span class="k">class</span> <span class="nc">English</span> <span class="p">:</span> <span class="n">ILanguage</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">public</span> <span class="n">String</span> <span class="nf">convert</span> <span class="p">(</span><span class="kt">int</span> <span class="n">num</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="kt">var</span> <span class="n">ret</span> <span class="p">=</span> <span class="s">&quot;&quot;</span><span class="p">;</span>
</span><span class='line'>        <span class="k">switch</span> <span class="p">(</span><span class="n">num</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="k">case</span> <span class="m">0</span><span class="p">:</span> <span class="n">ret</span> <span class="p">=</span> <span class="s">&quot;zero&quot;</span><span class="p">;</span> <span class="k">break</span><span class="p">;</span>
</span><span class='line'>          <span class="k">case</span> <span class="m">1</span><span class="p">:</span> <span class="n">ret</span> <span class="p">=</span> <span class="s">&quot;one&quot;</span><span class="p">;</span> <span class="k">break</span><span class="p">;</span>
</span><span class='line'>          <span class="k">default</span><span class="p">:</span> <span class="n">ret</span> <span class="p">=</span> <span class="s">&quot;...&quot;</span><span class="p">;</span> <span class="k">break</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">ret</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="c1">// somewhere else...</span>
</span><span class='line'><span class="k">public</span> <span class="k">static</span> <span class="kt">string</span> <span class="nf">convert</span><span class="p">(</span><span class="kt">int</span> <span class="n">x</span><span class="p">,</span> <span class="n">Language</span> <span class="n">lang</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="nf">getLanguage</span><span class="p">(</span><span class="n">lang</span><span class="p">).</span><span class="n">convert</span><span class="p">(</span><span class="n">x</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="k">public</span> <span class="k">static</span> <span class="n">ILanguage</span> <span class="nf">getLanguage</span><span class="p">(</span><span class="n">Language</span> <span class="n">lang</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">switch</span> <span class="p">(</span><span class="n">lang</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">case</span> <span class="n">Language</span><span class="p">.</span><span class="n">English</span><span class="p">:</span> <span class="k">return</span> <span class="k">new</span> <span class="n">English</span><span class="p">()</span> <span class="p">;</span> <span class="k">break</span><span class="p">;</span>
</span><span class='line'>        <span class="k">case</span> <span class="n">Language</span><span class="p">.</span><span class="n">Spanish</span><span class="p">:</span> <span class="k">return</span> <span class="k">new</span> <span class="n">Spanish</span><span class="p">()</span> <span class="p">;</span> <span class="k">break</span><span class="p">;</span>
</span><span class='line'>        <span class="k">default</span><span class="p">:</span> <span class="k">throw</span> <span class="k">new</span> <span class="n">Exception</span><span class="p">();</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>We have turned 21 lines in one file into 36 in three files (not
counting namespaces and imports). Does this new structure give us any
additional safety when we add a new concrete implementation? How about
when we add a new enum value? This code is even more likely to cause
bugs than the first, because now we have an implicit coupling between
the enum and the concrete class. We could get rid of the enum, and
&ldquo;pass in concrete class&rdquo; but <em>something</em> still has to say which
concrete class to instantiate.</p>

<p>Imagine if the compiler could warn us when either the enum or the
class changed. Imagine if instead of having to hunt down the possible
uses, we could just compile and fix the errors.</p>

<p>Good news, we can!</p>

<p>Check out this F# code. If you have never seen F# before, I know, it
looks completely crazy! It <em>still</em> looks a little weird to me, but
just try to read it. I think you will surprise yourself. This is a
function called <code>convert</code>, and if you keep in mind that the types
always come AFTER the value, the code makes a lot more sense. A
parameter in C# would be <code>int number</code>; in F# it is written
<code>number:Int</code>. Don&rsquo;t ask me why. The <code>match number with</code> is just how
you do the equivalent to a <code>switch/case</code> in C#, but you will see in a
second it is a lot more powerful!</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">let</span> <span class="n">convert</span><span class="o">(</span><span class="n">number</span><span class="o">:</span><span class="nc">Int</span><span class="o">,</span> <span class="n">lang</span><span class="o">:</span><span class="nc">Language</span><span class="o">)</span> <span class="o">:</span><span class="kt">string</span> <span class="o">=</span>
</span><span class='line'>    <span class="k">match</span> <span class="n">lang</span> <span class="k">with</span>
</span><span class='line'>        <span class="o">|</span> <span class="nn">Language</span><span class="p">.</span><span class="nc">English</span> <span class="o">-&gt;</span>
</span><span class='line'>            <span class="k">match</span> <span class="n">number</span> <span class="k">with</span>
</span><span class='line'>               <span class="o">|</span> <span class="mi">1</span> <span class="o">-&gt;</span> <span class="s2">&quot;one&quot;</span>
</span><span class='line'>               <span class="o">|</span> <span class="mi">2</span> <span class="o">-&gt;</span> <span class="s2">&quot;two&quot;</span>
</span><span class='line'>               <span class="o">|</span> <span class="o">_</span> <span class="o">-&gt;</span> <span class="s2">&quot;...&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>We are using the same enum from the C# file, but it is missing
something, right? Where are the Spanish and German parts? I try to
compile this and what do I see?</p>

<p><code>~/Program.fs(11,11): Warning FS0025: Incomplete pattern
matches on this expression. For example, the value 'enum&lt;Language&gt;
(0)' may indicate a case not covered by the pattern(s). (FS0025)</code></p>

<p>Spittake mushroom soup, the compiler just caught a potential bug for
us! A C# run-time bug no less! Not only is this very powerful, but it
is so simple. I can code the way I normally do, only now I get
additional safety for free! And no unit or integration test would ever
catch this class of errors.</p>

<p>Heck, if you really want to keep your classes and interfaces in C#,
you can have some &ldquo;glue code&rdquo; in F#, and still get all the benefit!</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">let</span> <span class="n">convert</span><span class="o">(</span><span class="n">number</span><span class="o">,</span> <span class="n">lang</span><span class="o">)</span> <span class="o">=</span>
</span><span class='line'>    <span class="k">match</span> <span class="n">lang</span> <span class="k">with</span>
</span><span class='line'>        <span class="o">|</span> <span class="nn">Language</span><span class="p">.</span><span class="nc">English</span> <span class="o">-&gt;</span> <span class="nc">English</span><span class="bp">()</span><span class="o">.</span><span class="n">convert</span><span class="o">(</span><span class="n">number</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>This still calls the C# class above, and now the compiler gives us a
warning when we add a new enum value!</p>

<p>In this way, pattern matching is able to clearly remove edge cases. We
converted an unsafe <code>if</code> and <code>switch</code> statement into a type safe
<code>match</code>.</p>

<p>BONUS ROUND!</p>

<p>What we have already seen of pattern matching makes it a better
<code>switch/case</code> but what about the <code>if</code> statement? Thankfully the
<code>match/with</code> statement allows for patterns matched to have a <code>when</code>
clause which only matches when the condition is true:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">let</span> <span class="n">convert</span><span class="o">(</span><span class="n">number</span><span class="o">,</span> <span class="n">lang</span><span class="o">)</span> <span class="o">=</span>
</span><span class='line'>    <span class="k">match</span> <span class="n">lang</span> <span class="k">with</span>
</span><span class='line'>        <span class="o">|</span> <span class="nn">Language</span><span class="p">.</span><span class="nc">English</span> <span class="o">-&gt;</span>
</span><span class='line'>            <span class="k">match</span> <span class="n">number</span> <span class="k">with</span>
</span><span class='line'>                <span class="o">|</span> <span class="n">x</span> <span class="k">when</span> <span class="n">x</span> <span class="o">&gt;</span> <span class="mi">5</span> <span class="o">-&gt;</span> <span class="s2">&quot;Large!&quot;</span>
</span><span class='line'>                <span class="o">|</span> <span class="mi">0</span> <span class="o">-&gt;</span> <span class="s2">&quot;zero&quot;</span>
</span><span class='line'>        <span class="o">|</span> <span class="nn">Language</span><span class="p">.</span><span class="nc">Spanish</span> <span class="o">-&gt;</span>
</span><span class='line'>            <span class="k">match</span> <span class="n">number</span> <span class="k">with</span>
</span><span class='line'>                <span class="o">|</span> <span class="n">x</span> <span class="k">when</span> <span class="n">x</span> <span class="o">&gt;</span> <span class="mi">5</span> <span class="o">-&gt;</span> <span class="s2">&quot;Grande!&quot;</span>
</span><span class='line'>                <span class="o">|</span> <span class="mi">0</span> <span class="o">-&gt;</span> <span class="s2">&quot;zero&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>Running the compiler again give us:</p>

<p><code>/home/jack/programming/monads-fsharp/monads-fsharp/Program.fs(19,19):
Warning FS0025: Incomplete pattern matches on this expression. For
example, the value '1' may indicate a case not covered by the
pattern(s). However, a pattern rule with a 'when' clause might
successfully match this value. (FS0025) (monads-fsharp)</code></p>

<p>That&rsquo;s right, it checks numbers too.</p>

<p>Lastly, it is possible to match on a combination of values, all at
once. We can convert our more complex structure to something simpler
using this trick, and the compiler is still intelligent enough to
check for missing cases.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">let</span> <span class="n">convert</span><span class="o">(</span><span class="n">number</span><span class="o">,</span> <span class="n">lang</span><span class="o">)</span> <span class="o">=</span>
</span><span class='line'>    <span class="k">match</span> <span class="n">lang</span><span class="o">,</span> <span class="n">number</span> <span class="k">with</span>
</span><span class='line'>        <span class="o">|</span> <span class="nn">Language</span><span class="p">.</span><span class="nc">English</span><span class="o">,</span> <span class="mi">0</span> <span class="o">-&gt;</span> <span class="s2">&quot;zero&quot;</span>
</span><span class='line'>        <span class="o">|</span> <span class="nn">Language</span><span class="p">.</span><span class="nc">English</span><span class="o">,</span> <span class="mi">1</span> <span class="o">-&gt;</span> <span class="s2">&quot;one&quot;</span>
</span><span class='line'>        <span class="o">|</span> <span class="nn">Language</span><span class="p">.</span><span class="nc">English</span><span class="o">,</span> <span class="n">x</span> <span class="k">when</span> <span class="n">x</span> <span class="o">&gt;</span> <span class="mi">1</span> <span class="o">-&gt;</span> <span class="s2">&quot;Larger than one!&quot;</span>
</span><span class='line'>        <span class="o">|</span> <span class="nn">Language</span><span class="p">.</span><span class="nc">English</span><span class="o">,</span> <span class="o">_</span> <span class="o">-&gt;</span> <span class="s2">&quot;dunno&quot;</span>
</span><span class='line'>        <span class="o">|</span> <span class="nn">Language</span><span class="p">.</span><span class="nc">Spanish</span><span class="o">,</span> <span class="mi">0</span> <span class="o">-&gt;</span> <span class="s2">&quot;zero&quot;</span>
</span><span class='line'>        <span class="o">|</span> <span class="nn">Language</span><span class="p">.</span><span class="nc">Spanish</span><span class="o">,</span> <span class="n">x</span> <span class="k">when</span> <span class="n">x</span> <span class="o">&gt;</span> <span class="mi">5</span> <span class="o">-&gt;</span> <span class="s2">&quot;Grande!&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>Here we introduce the <code>_</code> which is equivalent to a <code>default</code> in a C#
<code>switch/case</code> statement. The pattern <code>Language.English, _ -&gt;</code> sets a
default for any number in <code>Language.English</code> not already matched. The
bug in the code here is the missing <code>Language.Spanish</code> with numbers
1-5. What does the compiler say?</p>

<p><code>Program.fs(11,11): Warning FS0025: Incomplete pattern matches on this
expression. For example, the value '(_,1)' may indicate a case not
covered by the pattern(s). However, a pattern rule with a 'when'
clause might successfully match this value. (FS0025) (monads-fsharp)</code></p>

<p>Lastly, let&rsquo;s show the final result of converting our original
function to F#. If your entire function is just a single pattern
match, you can remove the <code>match/with</code> line and use the <code>function</code>
keyword, and simply match against the parameters (which I reversed for
clarity).</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">let</span> <span class="n">convert</span><span class="o">(</span><span class="n">lang</span><span class="o">,</span> <span class="n">number</span><span class="o">)</span> <span class="o">=</span> <span class="k">function</span>
</span><span class='line'>    <span class="o">|</span> <span class="nn">Language</span><span class="p">.</span><span class="nc">English</span><span class="o">,</span> <span class="mi">0</span> <span class="o">-&gt;</span> <span class="s2">&quot;zero&quot;</span>
</span><span class='line'>    <span class="o">|</span> <span class="nn">Language</span><span class="p">.</span><span class="nc">English</span><span class="o">,</span> <span class="mi">1</span> <span class="o">-&gt;</span> <span class="s2">&quot;one&quot;</span>
</span><span class='line'>    <span class="o">|</span> <span class="nn">Language</span><span class="p">.</span><span class="nc">English</span><span class="o">,</span> <span class="o">_</span> <span class="o">-&gt;</span> <span class="s2">&quot;...&quot;</span>
</span><span class='line'>    <span class="o">|</span> <span class="nn">Language</span><span class="p">.</span><span class="nc">Spanish</span><span class="o">,</span> <span class="mi">0</span> <span class="o">-&gt;</span> <span class="s2">&quot;zero&quot;</span>
</span><span class='line'>    <span class="o">|</span> <span class="nn">Language</span><span class="p">.</span><span class="nc">Spanish</span><span class="o">,</span> <span class="mi">1</span> <span class="o">-&gt;</span> <span class="s2">&quot;uno&quot;</span>
</span><span class='line'>    <span class="o">|</span> <span class="nn">Language</span><span class="p">.</span><span class="nc">Spanish</span><span class="o">,</span> <span class="o">_</span> <span class="o">-&gt;</span> <span class="s2">&quot;~~~&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Our original 17 line convert function, converted into a <em>safer</em> 7
lines! I never had to specify what the types of lang, number and the
return type are, because the compiler is able to figure that out from
the code I wrote.</p>

<p>If you are not convinced at this point that pattern matching is a big
step forward in the safety and ease of development, I am not sure what
else would convince you. More safety means less time spent tracking
down bugs and more time adding on features!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Learn to Database]]></title>
    <link href="http://steveshogren.github.io/Learn-To-Database/"/>
    <updated>2014-04-16T00:00:00-04:00</updated>
    <id>http://steveshogren.github.io/Learn-To-Database</id>
    <content type="html"><![CDATA[<p>
  &#8220;&#8230; and it has to return 45,000 records a minute, or we are all
  screwed.&#8221;
</p> <p> Monday morning, we inherited a legacy codebase. Tuesday, the
  word came down on stone tablets. Forty-five thousand records a
  minute, and no amount of political maneuvering or incremental gains
  were going to do. Too many broken promises. The last team mass quit
  over three months, leaving us the two most junior
  developers. Someone high up promised big, and the buck stopped with
  us.
</p> <p> &#8220;Does anyone even know the throughput now?&#8221;
</p> <p> We still don&#8217;t even have the dumb thing running on our
  machines. Two weeks later we have it running and enough data to test
  it. 2500 records a minute. When scaled to 45000 records it is still
  going 30 minutes later, so it doesn&#8217;t even scale linearly. We are
  screwed.
</p> <p> Most of us are front-end developers who stepped forward when
  everyone else stepped back. Databases are a distant memory,
  something we maybe did a few jobs back. You &#8220;join&#8221; tables, right?
  What we know of this process is it selects from 2-3 dozen databases
  using an ORM while running through an engine that does some
  supposedly massive calculations on the data, returning a message with
  several hundred fields. It can&#8217;t be that hard to speed up.
</p> <p> &#8220;We need a new architecture, with read-optimized databases
  and queue-based messaging.&#8221;
</p> <p> None of us have ever built such a system, but we have read
  about it, and like the faithful we nod solemnly in agreement. Why
  not? If the database is read-optimized, surely it will perform like
  we need. But a few desist.
</p> <p> Like paratroopers dropped into unknown territory without a
  map, we start to canvas the code, looking for landmarks. We split
  into two teams, one to try to speed up the current system, the other
  to start on the new architecture. Two teams trying two different
  approaches doubles our chances, right? Whiteboards around our desks
  fill with maps, glossaries, and diagrams. My team starts to dissect
  this mostly home-made ORM.
</p> <p> &#8220;Why is this selecting from the same table twice?&#8221;
</p> <p> The ORM generated query selects a list of id&#8217;s from table A,
  then puts those id&#8217;s into a list as a filter for the same table:
</p> <p>
  SELECT * FROM A WHERE ID IN (SELECT ID FROM A WHERE &#8230;)
</p> <p> We scratch our heads a bit, but hey, that can&#8217;t hurt
  anything, surely the database figures that sort of stuff out? Isn&#8217;t
  that what&#8230; indexes do? Our most database-savvy developer can&#8217;t
  stop coming back to that query. He says it doesn&#8217;t smell
  right. Finally, he takes out the &#8220;WHERE IN&#8221; filter, shims in the
  query, and runs the process.
</p> <p>
  &#8220;Guys, the whole thing, all 45k came back in 40 seconds.&#8221;
</p> <p> We scoff at him, good joke! Our profiling showed time chewed
  up fairly evenly at every level throughout the entire
  process, not just the initial query. So the process came back,
  just empty, right? And who knows what Ancient Ones you disturbed by
  messing around with what the ORM generates, it will probably never
  work again. We run it again, 40 seconds, correct count of
  records. Odd, freak coincidence. We run it with the old filter still
  in place, it comes back 30+ minutes later, same exact data. Whoa,
  wait, what?
</p> <p> Turns out, this ORM uses SELECT-WHERE-IN for every entity
  join. That first SELECT FROM A WHERE ID IN (SELECT ID FROM A WHERE
  &#8230;) was used as the base criteria for every single lazy look-up of
  every entity on A, which were legion. What looked like slowness
  across the entire process was really ORM lazy loading at every
  level, with that first SELECT-WHERE-IN as the final filter in a line
  of nested SELECTS, some four levels deep. That initial bad query
  gets run countless times, and when it is slow, the whole system is
  slow.
</p> <p> This is the story of how I learned an important lesson: if
  you are going to database, LEARN TO DATABASE.
</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Challenge - Code Every Day]]></title>
    <link href="http://steveshogren.github.io/streaks/"/>
    <updated>2014-01-28T00:00:00-05:00</updated>
    <id>http://steveshogren.github.io/streaks</id>
    <content type="html"><![CDATA[<p>
  You know what will make you a phenomenally better developer?
  Deliberate practice. How do you get such practice? By doing it every
  single day. Random bursts of effort over the odd weekend will gain
  you practically nothing comparatively, even if the time investment
  is the same. Your mind needs repetition and consistent effort to
  improve. So what do you want to get better at?  Pick your highest
  value subject: vim, regex, functional programming, meta-programming,
  OO, TDD, async co-routines, threading, graphics, web, etc, etc, and
  practice it every single day. Easy as that.
</p>
<p>
  When GitHub first came out with the &#8220;streak&#8221; feature on the front
  page, I realized it was time to stop my binge coding on the
  occasional weekend and start a system. Inspired by other recent
  system-based successes (working out every day), I decided to code
  every day for a year.
</p>
<p>
  I quickly realized that anything requiring detailed plans and
  designs is harder to do. Working though a book, on the other hand,
  is easy to start and stop. I started working through a book I had
  tried to read before: Let Over Lambda.
</p>
<p>
  Let Over Lambda is intense, filled with deeply complex concepts
  written in Common Lisp, a language with which I was only passingly
  familiar. But I managed to get through it without hardly any
  difficulty. How did I do that?
</p>
<p>
  I got a cheap netbook, and started to code on the train ride home.
  Interestingly, without any internet, I was much less distracted, and
  could just sit down and be in the zone within the minute (this from
  the guy whom it takes 20+ minutes to get in the zone at work). With
  only a limited span of ~25 minutes, I had no time to waste, and
  without people to talk to my brain just falls into it. I can only
  pinpoint a few times I could not get into the zone, and those were
  extreme circumstances of exhaustion or illness.
</p>
<p>
  In ten months, I have:
  <ul>
    <li>
      worked through Let Over Lambda once and read it twice
    </li>
    <li>
      worked twice through the PLAI programming languages book
      (once in Scheme and once in F#)
    </li>
    <li>
      read Clojure Programming, F# 3.0 Programming, and am currently
      in Real World Haskell
    </li>
    <li>
      completed the exercises up to chapter three of SICP
    </li>
    <li>
      authored a small Clojure library for run time type checking
      (don&#8217;t use mine, use Prismatic&#8217;s)
    </li>
    <li>
      prepared and given a two hour talk about macros at a local meet-up
    </li>
  </ul>
  Pretty incredible for only ~25 minutes a day! That is more
  programming books than I had read in the previous 2 years. I have
  improved mightily in such a short time, and it does not feel
  stressful in the least. Now, when I get home, if I feel like
  watching movies, cooking, or playing board games/Dark Souls all
  night, no problem! I can relax knowing I have accomplished my goals
  for the day. All in all, the last ten months have been incredible:
  some of the most rewarding, relaxing, and fulfilling months of my
  life.
</p>
<p>
  Before you scoff and point out that not everyone can take the train
  to work, consider this: get a portable computer, load up your
  environment, tools, and some pdfs. The next morning, leave for work
  ~25 minutes early. You will probably get in way sooner due to the
  decreased traffic (now you have earned back that time). Sit quietly
  in your car, and without the distractions of internet or other
  people, knock out a little programming. Maybe start with SICP (the
  best programming book I have ever read). See how much you can read
  and do before work starts. Do that for a month, every day. I
  guarantee you will learn something amazing.
</p>
  
 
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The 5:01 Developer]]></title>
    <link href="http://steveshogren.github.io/501-developer/"/>
    <updated>2013-12-14T00:00:00-05:00</updated>
    <id>http://steveshogren.github.io/501-developer</id>
    <content type="html"><![CDATA[<p>
  Can we agree for this post that money, energy, time, and effort are
  all forms of power? Like literally, if I wanted to build a building,
  I am going to need tools, skills, materials, labor. I can use the
  most liquid form of power I have (cash) to acquire all these things,
  or I can use a much less liquid form of power (my time) to harvest,
  extract, refine, learn, and build my building myself. Usually,
  economies of scale mean it is dramatically more efficient for me to
  specialize in one way of converting time into liquid power. Then,
  when I need something, I simply pass that money on to someone else
  who is also a specialist.
</p>
<p>
  Now you know why I don&#8217;t quarry my own stone to build an
  amphitheater in my back yard.
</p>
<p>
  When you work a job, you are converting one form of power you have:
  time (and usually skills), into another much more liquid form of
  power: money. One can extend the model to include calories and
  shelter (the power to sleep safely) along with time and skills.
  Great, this is just basic economics, right? You need power (money)
  to buy power (food and shelter) to buy power (time) to convert back
  into more power (money). Since you are &#8220;harvesting&#8221; something finite
  and therefore scarce (time out of your short life), if you are
  disciplined and lucky, you can consistently end up with a net
  positive.
</p>
<p>
  On to the point! I read a post today mentioning
  the <a href="http://www.hanselman.com/blog/DarkMatterDevelopersTheUnseen99.aspx">&#8220;5:01 developer&#8221;</a>. It made me mad.
</p>
<p>
  Ideas like this are so subtle they just seep into your psyche. I
  don&#8217;t think anyone would say under normal conditions, &#8220;I should
  really work for free today&#8221;. But, effectively, that is what this
  whole phrase is about. The phrase lets people who cram eight hours
  of work into ten hours &#8220;get back&#8221; at those that get the same work
  done in six to eight. To clarify, this title is not about &#8220;saving
  the company&#8221; or &#8220;giving back to society&#8221;; those are unusual
  conditions. No, it is a chastisement of developers who do not &#8220;give
  back to the company&#8221;. Sort of a tax, for the privilege of getting
  paid to work there, you should, according to this ideal, just give
  back some of that power they gave you. Thinking about this with the
  power model, you should accept money to work there in exchange for
  your time, but, when the time comes, you should deliberately
  short-change yourself by giving them extra time. Like some sort of
  weird tip.
</p>
<p>
  Hopefully this sounds as ridiculous as it really is.
</p>
<p>
  Now, in that post, the author sort of backpedals a little bit,
  saying that <i>what he really meant</i> was a developer who stops
  thinking about development as soon as work is over: someone not
  passionate. The issue I have is the whole wording of that phrase
  assumes a passion for their <i>job</i>, not a passion for
  their <i>craft</i>.
</p>
<p>
  I do not think it makes sense to demand every person
  be <i>passionate</i> about the job they are doing. There have been
  many times I have (even at a job I normally loved) done long,
  boring, and fruitless work. I did not do that work out of my passion
  for the &#8220;Mission: Save the World of Enterprise Banking&#8221;, but because
  I am a professional: I do what needs to be done to the best of my
  abilities.
</p>
<p>
  I think professionalism is very important. In others I work with, I
  want to see the attitude that causes someone to stay abreast in
  their field. I want to be around those who keep their own saws
  sharp, who come in and work hard, and who push themselves and those
  around them to be best they can.
</p>
<p>
  Back to overtime: in my experience, very few offices care enough
  about their developers to let them sharpen their saws at work, so
  why would you waste your precious free time there? Will they pay you
  more for it? Doubtful. Will they be less likely to fire you when
  times get tough? <i>Maybe</i>. Sounds to me like a lot of
  speculation. A lot of investment for a marginal or non-existent
  return. If you want more money: either ask for a raise, go take a
  raise at a new job, or work a second job on the side. Those have a
  direct impact on your income. Putting in extra hours hoping someone
  will notice and reward you for it makes about as much sense as
  assuming you will get a raise for wearing the boss&#8217;s favorite color
  every day.
</p>
<p>
  Consider the person who stays one extra hour a day as an
  &#8220;investment&#8221;. The typical end of the year raise scale I have seen in
  the US in companies larger than 30 people is a 0-5% increase a
  year. Uncommonly does someone get more than that, and should not be
  considered a usual practice. The typical best you can expect is
  5%, maybe a bonus (in four diverse jobs, none gave bonuses, so I
  haven&#8217;t considered them personally). Back to the extra hour a day. Not
  completely out there, not putting in a vast amount extra, right?
  Well, one extra hour is 12.5% percent more hours a day. But the most
  you can expect, on average, is 5%, if you are lucky! To put it in
  perspective, I have seen guys put in 12 hour days and get fired
  because the boss didn&#8217;t get along with them.
</p>
<p>
  At a <i>few</i> points in my career, I worked longer hours. Once it
  was because I truly enjoyed the work and it was fun. Another time it
  was because I felt like the extra time was going to directly pay off
  as an investment (it didn&#8217;t). A few times I have stuck around to
  &#8220;wrap this off&#8221; or &#8220;help out with something deeply unusual that has
  to be done outside normal work hours&#8221;. I recently recommended to my
  little brother he work longer hours, as he was hired without many
  needed skills and on shaky footing with the boss. He worked out a
  deal where he spent two extra hours a day for a couple months
  reading and practicing to get &#8220;caught up&#8221;. His boss got to see his
  hustle when he was the first one in and last one out every day; he
  got to study away from the distractions of everyday life. <b>In all
  circumstances, make overtime the exception, never the rule.</b>
</p>
<p>
  One last point. Before you think me a selfish jerk about my free
  time, know that I make it a daily habit to spend 30-60 minutes
  outside work advancing my development skills. I practice interactive
  rebases, work through awesome books, do online courses, advance side
  projects, contribute to open source, give local meetup talks, and
  learn new languages. These are the basics of what I feel is
  necessary to sustain and advance myself as a professional. If I
  simply worked a 45-50 hour work week instead, I personally would not
  have the motivation to <i>afterwards</i> stay so abreast of
  important changes in the development world. I would become much less
  effective over time, never getting any better. When the need for new
  paradigms or technologies arose, I would be so stuck in a rut that
  fear and ignorance would drive all my decisions.
</p>
<p>
  Treat overtime like an investment, and make it wisely. You are
  literally mining your life for time, so make sure you are
  comfortable with your investment strategies.
</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Intro To Macros]]></title>
    <link href="http://steveshogren.github.io/intro-to-macros/"/>
    <updated>2013-08-19T00:00:00-04:00</updated>
    <id>http://steveshogren.github.io/intro-to-macros</id>
    <content type="html"><![CDATA[<p>
Macros are the most powerful way to manipulate the syntax of your language. Macros make it possible to completely modify your language to match your domain. To explain them, think for a minute about functions using the simple “substitution model” used to teach functions to beginner programmers. The substitution model has the reader replace a function call with the body of the called function.
</p>
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">doCalc</span> <span class="p">()</span>
</span><span class='line'>   <span class="k">return</span> <span class="mi">1</span> <span class="o">+</span> <span class="mi">2</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'><span class="k">def</span> <span class="nf">doAwesome</span> <span class="p">(</span><span class="n">x</span><span class="p">)</span>
</span><span class='line'>   <span class="k">return</span> <span class="n">doCalc</span><span class="p">()</span> <span class="o">+</span> <span class="n">x</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="c1">#before substitution...</span>
</span><span class='line'><span class="k">def</span> <span class="nf">test</span> <span class="p">()</span>
</span><span class='line'>   <span class="k">return</span> <span class="n">doAwesome</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># when substituted...</span>
</span><span class='line'><span class="k">def</span> <span class="nf">test</span> <span class="p">()</span>
</span><span class='line'>   <span class="k">return</span> <span class="p">(</span><span class="mi">1</span> <span class="o">+</span> <span class="mi">2</span><span class="p">)</span> <span class="o">+</span> <span class="mi">3</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>
<p>
Ignoring scoping, the function/call system allows for immense power in programing languages. The function lets you &#8220;expand&#8221; a simple call into a much larger block of code. The expanded code can be vastly large. In our example above, the (doCalc) function is small, but it reality it could be doing hundreds of lines of code, which also would have to be substituted in place. The difference is real functions do not work this way. Real functions have their values evaluated before getting passed in as parameters.
</p>
<p dir="ltr">Macros are similar to the substitution model, with one expressed difference: by default, macros operate on the text of the code itself, not the values. Think of how expansion works in the simple if statement.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">if</span> <span class="n">workday</span><span class="p">(</span><span class="n">today</span><span class="p">())</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">x</span> <span class="o">=</span> <span class="mi">1</span> <span class="o">+</span> <span class="mi">1</span>
</span><span class='line'><span class="k">else</span>
</span><span class='line'>  <span class="n">x</span> <span class="o">=</span> <span class="n">doOtherHugeCalc</span><span class="p">()</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>

<p dir="ltr">Does the huge calc function execute each time? Not at all, you are guaranteed that only one will happen at any given run through that block of code.</p>
<p dir="ltr">Let’s say you wanted to make a generic function that would abstract away that call, and let you return the values, maybe something like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">ifworkday</span><span class="p">(</span><span class="n">first</span><span class="p">,</span> <span class="n">second</span><span class="p">)</span>
</span><span class='line'>  <span class="k">if</span> <span class="n">workday</span><span class="p">(</span><span class="n">today</span><span class="p">())</span> <span class="k">do</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">first</span>
</span><span class='line'>  <span class="k">else</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">second</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'><span class="n">x</span> <span class="o">=</span> <span class="n">ifworkday</span><span class="p">(</span><span class="mi">1</span> <span class="o">+</span> <span class="mi">1</span><span class="p">,</span> <span class="n">doOtherHugeCalc</span><span class="p">())</span>
</span><span class='line'>
</span><span class='line'><span class="c1">#when the values are “shown”</span>
</span><span class='line'><span class="k">def</span> <span class="nf">ifworkday</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">)</span>
</span><span class='line'>  <span class="k">if</span> <span class="n">workday</span><span class="p">(</span><span class="n">today</span><span class="p">())</span> <span class="k">do</span>
</span><span class='line'>    <span class="k">return</span> <span class="mi">2</span>
</span><span class='line'>  <span class="k">else</span>
</span><span class='line'>    <span class="k">return</span> <span class="mi">3</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'><span class="n">x</span> <span class="o">=</span> <span class="n">ifworkday</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">)</span> <span class="c1"># CALLED BOTH FUNCTIONS</span>
</span></code></pre></td></tr></table></div></figure>
<p>
But wait, now BOTH functions get called, you are doing exactly twice as many huge calcs as needed. Now, those familiar with javascript probably are already itching with the solution, &#8220;JUST WRAP THEM IN ANONYMOUS FUNCTIONS!!!&#8221;. I hear you, sure that works in this super simple example, but macros let you do this without that extra wordiness.  Macros defer evaluating parameters. Think of a macro as a function, but the biggest difference is parameters DON&#8217;T get called till you choose to call them.
</p>
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1">#if it is a macro...</span>
</span><span class='line'><span class="n">defmacro</span> <span class="n">ifworkday</span><span class="p">(</span><span class="n">first</span><span class="p">,</span> <span class="n">second</span><span class="p">)</span>
</span><span class='line'>  <span class="k">if</span> <span class="n">workday</span><span class="p">(</span><span class="n">today</span><span class="p">())</span> <span class="k">do</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">first</span>
</span><span class='line'>  <span class="k">else</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">second</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'><span class="n">ifworkday</span><span class="p">(</span><span class="mi">1</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span> <span class="n">doOtherHugeCalc</span><span class="p">())</span>
</span><span class='line'>
</span><span class='line'><span class="c1">#when the values are “shown”</span>
</span><span class='line'><span class="n">defmacro</span> <span class="n">ifworkday</span><span class="p">(</span><span class="s2">&quot;1+1&quot;</span><span class="p">,</span> <span class="s2">&quot;doOtherHugeCalc()&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="k">if</span> <span class="n">workday</span><span class="p">(</span><span class="n">today</span><span class="p">())</span> <span class="k">do</span>
</span><span class='line'>    <span class="k">return</span> <span class="nb">eval</span><span class="p">(</span><span class="s2">&quot;1+1&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="k">else</span>
</span><span class='line'>    <span class="k">return</span> <span class="nb">eval</span><span class="p">(</span><span class="s2">&quot;doOtherHugeCalc()&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>

<p dir="ltr">Now, in this simple ruby example, I had to use strings and eval to approximate what happens with macros in other languages. Since this is unwieldy, let’s switch to clojure, where it is more natural.</p>
I said that macros defer evaluation, they do that, but they also do much more. Lets look at a clojure list.

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="err">‘</span><span class="p">(</span><span class="nf">a</span> <span class="nv">b</span> <span class="nv">c</span> <span class="nv">d</span><span class="p">)</span>
</span><span class='line'><span class="c1">;;=&gt; (a b c d)</span>
</span></code></pre></td></tr></table></div></figure>

<p dir="ltr">This is a list of four symbols. Symbols are basically like an enum or a keyword that only equals itself. So it is possible to say:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="nb">= </span><span class="err">‘</span><span class="nv">a</span> <span class="err">‘</span><span class="nv">a</span><span class="p">)</span>
</span><span class='line'><span class="c1">;;=&gt; true</span>
</span></code></pre></td></tr></table></div></figure>

<p dir="ltr">but that’s pretty much it. If I tried to evaluate a symbol, it would complain that the symbol has no definition, since it is trying to treat it like a variable lookup.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="c1">;; nothing gets evaluated inside the list at all..</span>
</span><span class='line'><span class="err">‘</span><span class="p">(</span><span class="nf">a</span> <span class="nv">b</span> <span class="nv">c</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>

<p dir="ltr">Now you are left with a list of symbols, unevaluated. The defmacro form, for each parameter, gives you such a list of unevaluated symbols.</p>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="c1">;;before compilation</span>
</span><span class='line'><span class="p">(</span><span class="kd">defmacro </span><span class="nv">ifWorkday</span> <span class="p">[</span><span class="nv">bigCalc1</span>, <span class="nv">bigCalc2</span><span class="p">]</span>
</span><span class='line'>  <span class="o">`</span><span class="p">(</span><span class="k">if </span><span class="p">(</span><span class="nf">workday</span> <span class="p">(</span><span class="nf">today</span><span class="p">))</span>
</span><span class='line'>    <span class="o">~</span><span class="nv">bigCalc1</span>
</span><span class='line'>    <span class="o">~</span><span class="nv">bigCalc2</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="c1">;; the call</span>
</span><span class='line'><span class="p">(</span><span class="nf">ifWorkday</span> <span class="p">(</span><span class="nb">+ </span><span class="mi">1</span> <span class="mi">1</span><span class="p">)</span> <span class="p">(</span><span class="nf">otherBigCalc</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="c1">;;... after compilation...</span>
</span><span class='line'><span class="p">(</span><span class="kd">defmacro </span><span class="nv">ifWorkday</span> <span class="p">[(</span><span class="nb">+ </span><span class="mi">1</span> <span class="mi">1</span><span class="p">)</span>, <span class="p">(</span><span class="nf">otherBigCalc</span><span class="p">)]</span>
</span><span class='line'>  <span class="o">`</span><span class="p">(</span><span class="k">if </span><span class="p">(</span><span class="nf">workday</span> <span class="p">(</span><span class="nf">today</span><span class="p">))</span>
</span><span class='line'>    <span class="p">(</span><span class="nb">+ </span><span class="mi">1</span> <span class="mi">1</span><span class="p">)</span>
</span><span class='line'>    <span class="p">(</span><span class="nf">otherBigCalc</span><span class="p">)))</span>
</span><span class='line'><span class="c1">;; after compilation the call gets _transformed_ into:</span>
</span><span class='line'><span class="p">(</span><span class="k">if </span><span class="p">(</span><span class="nf">workday</span> <span class="p">(</span><span class="nf">today</span><span class="p">))</span> <span class="p">(</span><span class="nb">+ </span><span class="mi">1</span> <span class="mi">1</span><span class="p">)</span> <span class="p">(</span><span class="nf">otherBigCalc</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>

<p dir="ltr">The ` is called syntax quote, it disables evaluation much like quote does (it just also namespaces everything inside for your convenience). The ~ is called an unquote, and it turns evaluation back on. In any given space, if you have a function called (id), and you called it like (`~id), it would mean the same as just calling (id), because you turned off evaluation, then turned it back on. Above, the bigCalc parameters are filled with the actual values passed in, the lists unevaluated of ‘(+ 1 1) and ‘(otherBigCalc). I like to think of the return from a macro as a “template” to replace the original call with. Take the call (ifWorkday (+ 1 1) (otherBigCalc)). When calling the macro, the last thing returned from the macro is expected to be a list of clojure code to replace the original call at compile time. So, at compile time, (ifWorkday (+ 1 1) (otherBigCalc)) is replaced with (if (workday (today)) (+ 1 1) (otherBigCalc)) which is the return from the macro.</p>
<p dir="ltr">But that is a stupid example. Making your own if statements is the most basic uses of macros. But it demonstrates the point: macros generate code. This is profound, but hard to grasp for the first time. Macros expand code before compilation time, and therefore can be used to generate lots of code automatically.</p>

<p>
For extra credit, let’s take a bigger example in the same vein as our custom ifWorkday. I am making a game, and in it, I want an easy abstraction that gives me back one of several options with a custom percent chance. Ideally, something like
</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="nf">if25</span> <span class="p">(</span><span class="nf">doFirst</span><span class="p">)</span> <span class="p">(</span><span class="nf">doSecond</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>

<p>
where the number corresponds to the percent chance that the next item will be executed and returned. In this example, (doFirst) will only happen 25% of the time and (doSecond) 75% of the time. This demonstrates a more interesting use of macros, the ability to generate other functions (or even other macros). Here is the code:
</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="kd">defmacro </span><span class="nv">make-percents</span> <span class="p">[]</span>
</span><span class='line'>  <span class="o">`</span><span class="p">(</span><span class="nb">list </span><span class="o">~@</span><span class="p">(</span><span class="nb">map </span><span class="p">(</span><span class="k">fn </span><span class="p">[</span><span class="nv">num</span><span class="p">]</span>
</span><span class='line'>                  <span class="p">(</span><span class="k">let </span><span class="p">[</span><span class="nv">macro-name</span> <span class="p">(</span><span class="nb">symbol </span><span class="p">(</span><span class="nb">str </span><span class="s">&quot;if&quot;</span> <span class="nv">num</span><span class="p">))]</span>
</span><span class='line'>                    <span class="o">`</span><span class="p">(</span><span class="kd">defmacro </span><span class="o">~</span><span class="nv">macro-name</span> <span class="p">[</span><span class="nv">x#</span> <span class="nv">y#</span><span class="p">]</span>
</span><span class='line'>                      <span class="o">`</span><span class="p">(</span><span class="k">if </span><span class="p">(</span><span class="nb">&gt; </span><span class="o">~~</span><span class="nv">num</span> <span class="p">(</span><span class="nb">rand-int </span><span class="mi">100</span><span class="p">))</span> <span class="o">~</span><span class="nv">x#</span> <span class="o">~</span><span class="nv">y#</span><span class="p">))))</span>
</span><span class='line'>                <span class="p">(</span><span class="nb">range </span><span class="mi">100</span><span class="p">))))</span>
</span><span class='line'><span class="p">(</span><span class="nf">make-percents</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>

<p>
This macro only needs to be called once, and what it does is generates this:
</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="kd">defmacro </span><span class="nv">if0</span> <span class="p">[</span><span class="nv">x__2603__auto__</span> <span class="nv">y__2604__auto__</span><span class="p">]</span>
</span><span class='line'>  <span class="o">`</span><span class="p">(</span><span class="k">if </span><span class="p">(</span><span class="nb">&gt; </span><span class="mi">0</span> <span class="p">(</span><span class="nb">rand-int </span><span class="mi">100</span><span class="p">))</span> <span class="o">~</span><span class="nv">x__2603__auto__</span> <span class="o">~</span><span class="nv">y__2604__auto__</span><span class="p">))</span>
</span><span class='line'><span class="p">(</span><span class="kd">defmacro </span><span class="nv">if1</span> <span class="p">[</span><span class="nv">x__2604__auto__</span> <span class="nv">y__2605__auto__</span><span class="p">]</span>
</span><span class='line'>  <span class="o">`</span><span class="p">(</span><span class="k">if </span><span class="p">(</span><span class="nb">&gt; </span><span class="mi">1</span> <span class="p">(</span><span class="nb">rand-int </span><span class="mi">100</span><span class="p">))</span> <span class="o">~</span><span class="nv">x__2604__auto__</span> <span class="o">~</span><span class="nv">y__2605__auto__</span><span class="p">))</span>
</span><span class='line'><span class="p">(</span><span class="kd">defmacro </span><span class="nv">if2</span> <span class="p">[</span><span class="nv">x__2606__auto__</span> <span class="nv">y__2607__auto__</span><span class="p">]</span>
</span><span class='line'>  <span class="o">`</span><span class="p">(</span><span class="k">if </span><span class="p">(</span><span class="nb">&gt; </span><span class="mi">2</span> <span class="p">(</span><span class="nb">rand-int </span><span class="mi">100</span><span class="p">))</span> <span class="o">~</span><span class="nv">x__2606__auto__</span> <span class="o">~</span><span class="nv">y__2607__auto__</span><span class="p">))</span>
</span><span class='line'><span class="c1">;;...</span>
</span><span class='line'><span class="p">(</span><span class="kd">defmacro </span><span class="nv">if99</span> <span class="p">[</span><span class="nv">x__2609__auto__</span> <span class="nv">y__2601__auto__</span><span class="p">]</span>
</span><span class='line'>  <span class="o">`</span><span class="p">(</span><span class="k">if </span><span class="p">(</span><span class="nb">&gt; </span><span class="mi">99</span> <span class="p">(</span><span class="nb">rand-int </span><span class="mi">100</span><span class="p">))</span> <span class="o">~</span><span class="nv">x__2609__auto__</span> <span class="o">~</span><span class="nv">y__2601__auto__</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>

<p dir="ltr">I hope the profundity of this hits you like a ton of bricks. With under 10 lines of macro code (and calling it) we auto-generated 100 macros! This 10 lines of code gets expanded to 100 more lines! Sure, this is a simple, almost silly example, but imagine what you could do with this sort of power. In a more complex example, you could be auto-generating vast amounts of code this way, code that you don’t have to write every time by hand. Don&#8217;t let the x__2506__auto__ parameter names scare you, I will explain that in a bit.</p>
<p>
Those generated macros should not be too hard to understand after the previous ifWorkday macro, and they can be called just like we expect. Let&#8217;s deconstruct (make-percents).
</p>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="o">`</span><span class="p">(</span><span class="nb">list </span><span class="o">~@</span><span class="p">(</span><span class="nb">map </span><span class="p">(</span><span class="k">fn </span><span class="p">[</span><span class="nv">num</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>

<p dir="ltr">The ~@ is like unquote from above, the only difference is instead of just unquoting a list to be evaluated, it extracts the values from the list and sticks them in place. I like to think of it as just removing the outer parens in the unquoted list.</p>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="k">let </span><span class="p">[</span><span class="nv">x</span> <span class="err">‘</span><span class="p">(</span><span class="mi">1</span> <span class="mi">2</span> <span class="p">(</span><span class="mi">3</span> <span class="mi">4</span><span class="p">))]</span>
</span><span class='line'>  <span class="o">`</span><span class="p">(</span><span class="nb">+ </span><span class="mi">8</span> <span class="o">~@</span><span class="nv">x</span><span class="p">))</span>
</span><span class='line'><span class="c1">;; =&gt; (clojure.core/+ 8 1 2 (3 4))</span>
</span></code></pre></td></tr></table></div></figure>

<p dir="ltr">The (list) function is just how we make a list of elements.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="nb">list </span><span class="err">‘</span><span class="nv">a</span> <span class="err">‘</span><span class="nv">b</span> <span class="err">‘</span><span class="nv">c</span><span class="p">)</span>
</span><span class='line'><span class="c1">;;=&gt; (a b c)</span>
</span></code></pre></td></tr></table></div></figure>

<p>
The (map) function has two arguments: the first, a function; the second, a list of elements to “map” over.
</p>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="o">~@</span><span class="p">(</span><span class="nb">map </span><span class="p">(</span><span class="k">fn </span><span class="p">[</span><span class="nv">num</span><span class="p">]</span> <span class="p">(</span><span class="nf">...</span><span class="p">))</span>
</span><span class='line'>       <span class="p">(</span><span class="nb">range </span><span class="mi">100</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>

<p dir="ltr">As you can see here, the ~@() tells us to unquote the whole form, re-enabling the evaluation, and therefore running the map call. The map then calls the anonymous function 100 times, with the num being the numbers 0..99. Inside the anon function we have a let binding:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="k">let </span><span class="p">[</span><span class="nv">macro-name</span> <span class="p">(</span><span class="nb">symbol </span><span class="p">(</span><span class="nb">str </span><span class="s">&quot;if&quot;</span> <span class="nv">num</span><span class="p">))]</span>
</span></code></pre></td></tr></table></div></figure>

<p dir="ltr">This line is more simple, it makes a let that binds to the value macro-name a symbol that looks like ‘if1, ‘if2, .. depending on which iteration of the loop you are on.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="o">`</span><span class="p">(</span><span class="kd">defmacro </span><span class="o">~</span><span class="nv">macro-name</span> <span class="p">[</span><span class="nv">x#</span> <span class="nv">y#</span><span class="p">]</span>
</span><span class='line'>  <span class="o">`</span><span class="p">(</span><span class="k">if </span><span class="p">(</span><span class="nb">&gt; </span><span class="o">~~</span><span class="nv">num</span> <span class="p">(</span><span class="nb">rand-int </span><span class="mi">100</span><span class="p">))</span> <span class="o">~</span><span class="nv">x#</span> <span class="o">~</span><span class="nv">y#</span><span class="p">))))</span>
</span></code></pre></td></tr></table></div></figure>

<p dir="ltr">Here is the actual returned “template” of the macro. The # at the end of the parameter name ensures that it is unique, which is really really useful when you consider that the code returned from a macro replaces the call in place. To make sure you don’t accidentally double bind the same name, clojure will give you a warning like “cannot let unqualified name” if you try to let a value without including the # at the end inside a template, another really handy feature. What gets generated by x# looks something like x__2506__auto__ which is guaranteed to be unique. The reason you need this is in case there was another value bound to x inside your code, it could cause a conflict, and in certain circumstances, really break your code, so this prevents such conflicts. You should only need these when creating parameters or let bindings inside the template. All the values &#8220;outside&#8221; the template do not need to have the # appended to their names, since they will not actually be a part of the returned template.</p>
<p dir="ltr">The only odd thing here is the double ~~num. Notice how many quote levels deep we are. It is possible to unquote to “step” back up a level in the template. By the time we get to the ~~num, the original function parameter of num was two “levels” higher, so to access it, we have to “step up” two levels. Let me highlight it in colors, to make it easier to see.</p>

<img src="http://steveshogren.github.io/images/macro.jpg" title="" >

<p dir="ltr">See how by unquoting ~macro-name one level in line 3, and unquoting ~~num two levels on line 4, we bring them both back “up” to the “red” level where they were defined? Similarly, by unquoting ~x# and ~y# one level on line 4, we bring them back “up” to their “blue” definition level? This is an incredibly powerful tool that allows immense expansion of code in a tiny amount of space. If you think of the returned code form as a “template”, this quoting and unquoting lets you step in and out of evaluation with ease.</p>
<p dir="ltr">In the end, when the (make-percents) macro is called, it produces 100 macros that are callable just like any other macro. To tell the whole story, I wrote this into my game, then decided I wanted a more sophisticated macro that could take any number of percentages, but this remained a good way to explain this specific pattern of looped macro generation.</p>
<p dir="ltr">Hopefully, this article caused you to see how incredibly powerful macros can be, allowing effectively infinite auto-generation of code. The field of macros is still very under-explored, as most languages do not allow them at all, they remain a largely undiscovered, and yet incredibly powerful tool.</p>
<p dir="ltr">For further reading, I highly recommend Let Over Lambda, the first 6 chapters of which are free <a href="http://letoverlambda.com/index.cl/toc">here</a>. Let Over Lambda is written with examples in Common Lisp, but the macro parts are very similar in Clojure, so is a valuable read.</p>
&nbsp;
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Clojure... Debugger?]]></title>
    <link href="http://steveshogren.github.io/clojure-debugger/"/>
    <updated>2013-08-17T00:00:00-04:00</updated>
    <id>http://steveshogren.github.io/clojure-debugger</id>
    <content type="html"><![CDATA[I was at the Clojadelphia meetup on Thursday, and got an excellent run through of the tools.trace library from Tim Visher. He has submitted a pull request to the original authors, with his expanded and very clear documentation found <a title="here" href="https://github.com/timvisher/what-does-tools-trace-do/blob/master/src/what_does_tools_trace_do/core.clj">here</a>.
<br />
<br />
One call from the library in particular really stood out, a call for finding out what form threw an exception out of many.
<br />
<br />
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="c1">;; trace-forms &quot;Trace all the forms in the given body. Returns any</span>
</span><span class='line'><span class="c1">;; underlying uncaught exceptions that may make the forms fail.&quot;</span>
</span><span class='line'><span class="p">(</span><span class="nf">trace-forms</span>
</span><span class='line'> <span class="p">(</span><span class="k">let </span><span class="p">[</span><span class="nv">a</span> <span class="p">(</span><span class="nb">+ </span><span class="mi">1</span> <span class="mi">1</span><span class="p">)</span>
</span><span class='line'>       <span class="nv">b</span> <span class="p">(</span><span class="nb">* </span><span class="mi">2</span> <span class="mi">2</span><span class="p">)</span>
</span><span class='line'>       <span class="nv">c</span> <span class="p">(</span><span class="nb">* </span><span class="nv">a</span> <span class="nv">b</span> <span class="p">(</span><span class="nb">/ </span><span class="mi">4</span> <span class="mi">0</span><span class="p">))]</span>
</span><span class='line'>   <span class="nv">c</span><span class="p">))</span>
</span><span class='line'><span class="c1">;; =&gt; ArithmeticException Divide by zero</span>
</span><span class='line'><span class="c1">;;      Form failed: (/ 4 0)</span>
</span><span class='line'><span class="c1">;;      Form failed: (* a b (/ 4 0))</span>
</span><span class='line'><span class="c1">;;      Form failed: (let* [a (+ 1 1) b (* 2 2) c (* a b (/ 4 0))] c)</span>
</span><span class='line'><span class="c1">;;      Form failed: (let [a (+ 1 1) b (* 2 2) c (* a b (/ 4 0))] c)</span>
</span><span class='line'><span class="c1">;;      clojure.lang.Numbers.divide (Numbers.java:156)</span>
</span></code></pre></td></tr></table></div></figure>
<br />
<br />
Which is incredibly cool. At the time, I could see using that all the time for helpful benefits. In the last few days though, I realized a more obvious function has been far more helpful to my daily development: deftrace. Deftrace just replaces a defn, and does the same, but it also prints out the ins and outs of the function.
<br />
<br />
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="c1">;; example up from clouredocs.org:</span>
</span><span class='line'>  <span class="c1">;; http://clojuredocs.org/clojure_contrib/clojure.contrib.trace/deftrace</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">deftrace</span> <span class="nv">fib</span> <span class="p">[</span><span class="nv">n</span><span class="p">]</span>
</span><span class='line'>    <span class="p">(</span><span class="k">if </span><span class="p">(</span><span class="nb">or </span><span class="p">(</span><span class="nb">= </span><span class="nv">n</span> <span class="mi">0</span><span class="p">)</span> <span class="p">(</span><span class="nb">= </span><span class="nv">n</span> <span class="mi">1</span><span class="p">))</span>
</span><span class='line'>      <span class="mi">1</span>
</span><span class='line'>      <span class="p">(</span><span class="nb">+ </span><span class="p">(</span><span class="nf">fib</span> <span class="p">(</span><span class="nb">- </span><span class="nv">n</span> <span class="mi">1</span><span class="p">))</span> <span class="p">(</span><span class="nf">fib</span> <span class="p">(</span><span class="nb">- </span><span class="nv">n</span> <span class="mi">2</span><span class="p">)))))</span>
</span><span class='line'>
</span><span class='line'>  <span class="p">(</span><span class="nf">fib</span> <span class="mi">4</span><span class="p">)</span>
</span><span class='line'>  <span class="c1">;; =&gt; 5</span>
</span><span class='line'>  <span class="c1">;; 1&gt; TRACE t2742: (fib 4)</span>
</span><span class='line'>  <span class="c1">;;    TRACE t2743: | (fib 3)</span>
</span><span class='line'>  <span class="c1">;;    TRACE t2744: | | (fib 2)</span>
</span><span class='line'>  <span class="c1">;;    TRACE t2745: | | | (fib 1)</span>
</span><span class='line'>  <span class="c1">;;    TRACE t2745: | | | =&gt; 1</span>
</span><span class='line'>  <span class="c1">;;    TRACE t2746: | | | (fib 0)</span>
</span><span class='line'>  <span class="c1">;;    TRACE t2746: | | | =&gt; 1</span>
</span><span class='line'>  <span class="c1">;;    TRACE t2744: | | =&gt; 2</span>
</span><span class='line'>  <span class="c1">;;    TRACE t2747: | | (fib 1)</span>
</span><span class='line'>  <span class="c1">;;    TRACE t2747: | | =&gt; 1</span>
</span><span class='line'>  <span class="c1">;;    TRACE t2743: | =&gt; 3</span>
</span><span class='line'>  <span class="c1">;;    TRACE t2748: | (fib 2)</span>
</span><span class='line'>  <span class="c1">;;    TRACE t2749: | | (fib 1)</span>
</span><span class='line'>  <span class="c1">;;    TRACE t2749: | | =&gt; 1</span>
</span><span class='line'>  <span class="c1">;;    TRACE t2750: | | (fib 0)</span>
</span><span class='line'>  <span class="c1">;;    TRACE t2750: | | =&gt; 1</span>
</span><span class='line'>  <span class="c1">;;    TRACE t2748: | =&gt; 2</span>
</span><span class='line'>  <span class="c1">;;    TRACE t2742: =&gt; 5</span>
</span></code></pre></td></tr></table></div></figure>
<br />
<br />
At this point in the demo, the room was leaping out of their chairs laughing in sheer delight at how awesome this is. It is ultimately such a simple idea, and yet it&#8217;s execution is brilliant and inconceivably handy.
<br />
<br />
At first, I thought, &#8220;well that is an incredibly cool party trick, but a party trick nonetheless&#8221;. A few days of regular clojure development later, I realized the profundity of this library.
<br />
<br />
I have had on my list of &#8220;pain points&#8221; an item to learn how to debug clojure code. Once in a while, I have felt the need to find out exactly what was going on at a certain point, and had to awkwardly put in (do (pprint x) x) statements everywhere. Clearly though, that is lame.
<br />
<br />
Here is the grand reveal. <strong>Concepts and tools that other languages have sometimes look very different in clojure.</strong> &#8220;Well, duh&#8221;, you say. I am not talking about syntax! I am talking about the <em>tools.</em>
<br />
<br />
I wanted a debugger (and, yes, I know at least traditional one exists for clojure), and so that is what I would have looked for: the traditional &#8220;put in a breakpoint, run the code, pause at that place, inspect values, etc&#8221;. When I first saw tools.trace, the image of a &#8220;debugger replacement&#8221; did not immediately enter my head. But, tools.trace basically gives me almost all the benefit of a traditional debugger at effectively no hassle or cost. Just now I was developing some code, and got stuck on a spot where something unexpected happened, and with only a second&#8217;s hassle, replaced a few defns with deftrace. I re-ran my code in the repl, and now got a printout of exactly what the in&#8217;s and out&#8217;s were, and all of a sudden it clicked. &#8220;I just found my new debugger&#8221;, and, &#8220;wow, this debugger is way less hassle&#8221;.
<br />
<br />
No, of course this doesn&#8217;t do everything a full debugger does, but at least for the foreseeable future, it probably will do enough most of the time. The first time I need a real full debugger, I will go looking for it, but for now, I suspect this gets me my 80% benefit for way less than 20% hassle.
<br />
<br />
The discovery of such tools is what is making learning clojure such a profoundly rewarding journey for me. I am being taught to think about the &#8220;default ide&#8221; tools in such a different light. Watching as community members distill out these sort of High-Value concentrate tools using Clojure&#8217;s meta-programming is simply the most mind altering thing I have experienced in programming.
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Sorry, But Refactorings Are Not Free (Technical Debt Interest)]]></title>
    <link href="http://steveshogren.github.io/refactoring-not-free/"/>
    <updated>2013-05-27T00:00:00-04:00</updated>
    <id>http://steveshogren.github.io/refactoring-not-free</id>
    <content type="html"><![CDATA[<p dir="ltr">Sometimes, it’s far more efficient to leave certain <a href="http://en.wikipedia.org/wiki/Technical_debt">technical debts</a> unpaid.</p>
<p dir="ltr">I’m not saying we should leave messes, instead I am saying that cleaning and fixing technical debt is so important we must prioritize the most important changes first, by highest value to the team. You don&#8217;t just do whatever feature is next alphabetically do you? Nope, so neither should you do that with refactorings.</p>
<p dir="ltr">Not all technical debts are created equal: they consist of varying amounts of interest as well as principal. We still don’t have a way to accurately count the cost of technical debt. Fortunately, a little effort goes a long way toward estimating the its “payoff price”. Much like paying off a real debt, paying the highest-interest debts first makes the most sense.</p>
<p dir="ltr">I’ll give you a real life example of some technical debt repayments. Last month at my work, we all agreed that all our namespaces, project names, and assembly names were woefully out of date. The naming confusion hadn&#8217;t cost us a lot of time, but, like an annoying paper cut, we felt the pain whenever we looked at it. The system had outgrown the single small product it once was, and the names had not grown with it. A few project names did not even match up with their folders, causing extra disorientation every time anyone read them. We all voted to make updating all that cruft our “dev chore” of the week. Unfortunately, we did not weigh the relative cost versus the value of that cleanup to the team.</p>
<p dir="ltr">Three weeks later, we were still neck-deep in cleanup. The renaming process caused many subtle bugs because of a variety of unconsidered issues. Our work ground to a halt as we put all hands on deck to finish the task and fix all the bugs.</p>
<p dir="ltr">We hadn’t considered the terms on that technical debt. The principal was high: paying it cost weeks of nonstop effort. What about the interest? At best, it was tiny, fractions of a percent of the time it took to pay it off. How long will it take us to make that time back? Five years? Ten?</p>
<p dir="ltr">Now consider another common refactoring: renaming a private function. What does it cost to fix a badly named local function? Practically nothing, just a few keystrokes. What does it cost to leave it undone? You have to look at that bad function definition each time you work in that file. Leaving the technical debt would cost more than paying it down. Why wouldn’t you immediately pay down such a debt?</p>
<p dir="ltr">Clearly, this is not an exact science, but our refactorings will take on a very critical dimension when we add interest to the technical debt metaphor. I now evaluate any refactoring effort that would take longer than a few minutes in this mindset, thinking critically about what I do and why. I keep my big technical debt chores in a list prioritized by interest (regardless of the principal), so there is never any doubt what my next task should be.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to Escape from {{#PROGRAMMING_LANGUAGE}}]]></title>
    <link href="http://steveshogren.github.io/how-to-escape-from-programming_language/"/>
    <updated>2013-03-10T00:00:00-05:00</updated>
    <id>http://steveshogren.github.io/how-to-escape-from-programming_language</id>
    <content type="html"><![CDATA[As time goes on, developers will be all the harder pressed to keep up with the skyrocketing number of languages and frameworks. The number of javascript libraries alone is increasing at a furious pace: Angular, Backbone, Node, Ember, Knockout, Knockback, Meteor, etc, etc, etc. Who has a chance at keeping up? While having so many options is also beneficial, it makes it more and more challenging for a single developer to stay relevant.
<br />
<br />
You are a good programmer. No, you are a great programmer. But, you are stuck in one development stack. You want to diversify your knowledge, experience, and skill set, but your resume reads like a one-act play. Chances are, you didn&#8217;t deliberately choose to work in this stack. At the start of your career, the first job you landed was probably the best you could find. Several years have gone by, and you are beginning to realize that the development world is moving on.
<br />
<br />
Maybe you have already tried, having gone to a few interviews. Nevertheless, you’re still as stuck as when you started, because many of the cool shops are still figuring out how to do good hiring in this new, fast-changing paradigm. They want developers who already have experience in their stack, but they haven&#8217;t realized that filtering for previous experience is only one heuristic for finding good talent. So, what are your options?
<br />
<br />
Here is how to escape from your language. Like all the best advice, it is simple, yet profound. It consists of the following three steps:
<br />
<br />
1. Pick a new stack.<br />
 2. Learn it.<br />
 3. Build a network.
<br />
<br />
Picking a stack is not an easy thing to do, but I have good news for you: once you master these steps, you won&#8217;t ever be stuck again. No matter which one you pick, when the time comes, you will be able to quickly move way ahead of the pack. Don’t worry about trying to pick the one that will last your whole career, since, (and this may come as a shock to you) it probably won&#8217;t last you a decade! That&#8217;s why we should love software development, for the fast pace! If you want a job that never changes, go be a <del>librarian</del> <del>doctor</del> <del>lawyer</del> gardener.
<br />
<br />
Which language should you pick? You have two big categories to choose from that I suggest:
<ul>
	<li dir="ltr">The popular</li>
	<li dir="ltr">The exotic</li>
</ul>
<br />
The popular languages have significantly more, and a greater variety of jobs. On the down side, you also have more competition from other developers, and most of them have been using that language since before they were born. To stand out here, you need something to differentiate yourself from the other candidates: a unique perspective, skill in another programming paradigm, an ability to quickly learn new things, rapidly change contexts, etc. Figure out what your unique contributions are, and communicate them clearly.
<br />
<br />
Alternatively, on the exotic route, you pick an up-and-coming language, the new hotness, as it were. Because it is so new, there are much fewer jobs in this language, and less long-term stability. Consequently, there are also much fewer experienced developers. Savvy companies using this language will hire interested developers, despite them lacking any experience with it. (All your hard work in step two will really pay off here.)
<br />
<br />
Having chosen a language, now it’s time to learn it! Fill your github with work in that language.
 Read some books on it. Look for ways to use it at your current job. If your situation allows, start a big side project in it. You don&#8217;t HAVE to open-source the code on github, but this certainly helps to publicize your learning. Companies seek prior job experience to avoid having to pay to train you; well then, beat them to the punch by already knowing it!
<br />
<br />
To build your network, go to meetups and get involved in them. I cannot emphasize this enough.
 Stick out your hand and introduce yourself. Make connections with the people you meet. Learn about the tools people use at their work. You will begin to think like a developer in that stack as you’re exposed to new concepts. Soon enough, you will develop a sense of what companies are hiring and who would give you a recommendation at their company.
<br />
<br />
Mind your attitude when interviewing. Resist the urge to cynically compare and contrast the old and new stacks. I have interviewed too many candidates who could not stop talking about how great their old language is, or how “these new hipster languages are just a fad”. While you are certainly always entitled to your opinion, (who knows, you may even be right!), carrying on like this in an interview setting never leaves a good impression.
<br />
<br />
Perhaps you’re thinking that this is just too much effort. Just like everything in life, choosing not to move is also a valid move. I like to call it &#8220;riding into the sunset&#8221;. In this option, you never leave your language, ever. Though this may feel like the safer choice right now, it carries its own risks. If you hate maintenance projects, you need to learn to love them, because they are going to be your bread and butter. But, you will be competing for these projects with all the other sunsetters, and there are going to be a lot of them. From what I have heard, however, once you have reached the point where there are more maintenance jobs than there are remaining developers, you really do get to write your own ticket, but this can take decades. My great uncle did this, and he managed to stay employed in COBOL till he retired.
<br />
<br />
While escaping from your stack requires effort, by following the steps you can achieve it in just a few hours a week. So, get out there and do it!
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to Suck Less at Your New Job]]></title>
    <link href="http://steveshogren.github.io/new-job-todo-list/"/>
    <updated>2013-01-19T00:00:00-05:00</updated>
    <id>http://steveshogren.github.io/new-job-todo-list</id>
    <content type="html"><![CDATA[<p>One thing I strongly recommend to developers when starting at a new job is to keep a list of everything that bothers you.</p>

<p>For every new company you work at, there will always be a set of things that you see as pain points, because you came from a place that did those things differently.</p>

<p>Notice I said differently, not better.</p>

<p>All of us have certain irrational attachments to the various things we are used to doing: things we do not because it’s the best way to do them, but because it’s become comfortable to do them that way. I have seen new developers come onto a team and complain endlessly about something that is clearly a net benefit for them and the team. However, the team is so used to doing it their way that they cannot imagine changing.</p>

<p>Allow me to share a personally painful example.</p>

<p>Much to my regret, when I moved into .NET development coming from the scripting world, I complained non-stop about how annoying it was to have to assign a type to everything.</p>
<blockquote>
<p dir="ltr"><p>“I mean, in perl and php we got along great without it, so why on earth should anyone have to go through all this extra hassle?”</p></p>
</blockquote>
<p>I didn’t realize how strong typing enabled very powerful tooling, and to be perfectly honest, I probably didn’t care. However, I did realize that my complaints were falling on deaf ears. My co-workers, who had never even looked at a dynamically typed language before, didn’t care. Much worse, I was alienating myself from them, becoming<em> that guy</em>, the one who just complains all the time. I sucked.</p>

<p>So, I decided on a new policy. Whenever something offended my sensibilities, seeming worse, wrong or just different, I would document it in a to-do list (I use <a href="http://orgmode.org/">org-mode</a> in emacs, because it’s mind-alteringly cool). I would stop complaining about it, stop making sidelong hints at it. I would just add it to the list. Apparently, I was pretty opinionated about how to make that team better, because that list grew monstrously large in just a few months.</p>

<p>Next, I would review that list every week. Whenever I had downtime I would pick something small and try to implement whatever I needed to make that work, things like:  like installing a CI server, or figuring out how to unit test this crazy actionscript fla.</p>

<p>If an issue was too large or I lacked the understanding to resolve all at once, I would do root cause analysis and brainstorm different ways to achieve the goal. Sometimes, I would take something off the list, either because it was too costly to justify its value, or because sometimes I realized I was grossly incorrect in my understanding of the issue.</p>

<p>So, back to my example about static typing. After about a year, I realized there was no way I could reasonably argue it was worth a change. No one but me cared, no one was interested in<a href="http://deliberate-software.com/how-to-escape-from-programming_language/" target="_blank"> learning new languages to try to use for development</a>, and the cost to convert anyway would have been staggering (and conversion was likely impossible).</p>

<p>Meanwhile, I learned that while static typing is a cost of doing business in some languages, statically-typed languages lead the modern pack for powerful refactoring tooling (at least ‘til Yegge’s team finishes their quest for the Holy Grail (the <a href="https://plus.google.com/110981030061712822816/posts/KaSKeg4vQtz">Grok Project</a>; search that post for grok. And I said modern tools, so no smalltalk flame!)). My arguments advocating a change basically fell into two categories:: “I like it better”, and, “you won’t miss those refactoring and intellisense tools much”. You can imagine my co-workers’ reaction to either category: *Sad trombone*. Good thing I was keeping them all to myself in my to-do list.</p>

<p>This process, this simple change, powerfully changed my behavior and attitude. I am convinced that it helped me to mature, both socially and as a developer. No longer was I the whiny developer looking to his team lead to “kiss his boo-boos”, I was learning to weigh cost/benefits of both my short- and long-term goals for that team.</p>

<p>I also discovered a serendipitous side-effect from my todo-list. After about a year and a half when all the pain points had grown calloused, I was able to look back over my list for outstanding reminders of points of our process, still needing refinement. It was a way for me to reconnect with my <a href="http://www.c2.com/cgi/wiki?BeginnersMind">beginners mind</a>, and it was very helpful.</p>

<p>Since I started this process have I been able to participate in many discussions about an idea, article, or pain point another developer had mentioned where I have already thought through my position, because it is either something I have already noticed and have been working on a solution for, or I have been researching it, or I concluded (from my limited perspective) it wasn’t worth the effort.</p>

<p>Not many people reflect this deeply or have their thoughts so organized on important subjects affecting their work. It would make a powerful impression were you to find yourself involved in a hallway discussion with your boss about training, and you could nonchalantly add:</p>
<blockquote>
<p dir="ltr"><p>“Oh, new hire training. Yes, I have been considering how we train new hires for a long time, and I have a few ideas here on what would help our particular needs.”</p></p>
</blockquote>
<p>Additionally, a few times something I had previously concluded wasn’t worth the effort due to internal political reasons suddenly has become possible, and I have been able to lead the group in that new endeavor, having spent effort considering and concluding how to best implement it.</p>

<p>When you find yourself complaining about the pain of a new job, don’t be a whiner. Don’t try to bully the other developers into doing things according to your “obviously better” way. Write your pain points down and start planning how you can truly impact your team for the best.</p>
<p> (see also: <a href="http://www.manager-tools.com/2009/08/delta-file">http://www.manager-tools.com/2009/08/delta-file</a>)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ego Driven Development]]></title>
    <link href="http://steveshogren.github.io/ego-driven-development/"/>
    <updated>2012-10-01T00:00:00-04:00</updated>
    <id>http://steveshogren.github.io/ego-driven-development</id>
    <content type="html"><![CDATA[<p><span style="font-size:15px;font-family:Arial;color:#000000;background-color:transparent;font-weight:normal;font-style:normal;font-variant:normal;text-decoration:none;vertical-align:baseline;">Ego Driven Development, (EDD), is a software development anti-pattern where developers and managers repeatedly act as if established best practices do not apply to them, to the detriment of their organization. Institutional ego is most often to blame.</span><p /> <span style="font-size:15px;font-family:Arial;color:#000000;background-color:transparent;font-weight:normal;font-style:normal;font-variant:normal;text-decoration:none;vertical-align:baseline;">EDD plagues many organizations; here just some of the symptoms you might encounter:</span><p /> </p><ul style="margin-top:0;margin-bottom:0;"><li style="font-size:15px;font-family:Arial;color:#000000;background-color:transparent;font-weight:normal;font-style:normal;font-variant:normal;text-decoration:none;vertical-align:baseline;"><span style="font-size:15px;font-family:Arial;color:#000000;background-color:transparent;font-weight:bold;font-style:normal;font-variant:normal;text-decoration:none;vertical-align:baseline;">&#8220;Not Invented Here&#8221; syndrome:</span><span style="font-size:15px;font-family:Arial;color:#000000;background-color:transparent;font-weight:normal;font-style:normal;font-variant:normal;text-decoration:none;vertical-align:baseline;"> Expressed most commonly in a desire for everything needed to be developed in house. E.g.: &ldquo;Need a CMS? Let&rsquo;s make our own from scratch!&rdquo; Perhaps, you work at a place where all your teammates do is constantly bring you bad ideas. Are they really all terrible? &nbsp;Or are only your ideas good enough for the organization? Not Invented Here can also apply to your own head, not just the organization.</span></li><li style="font-size:15px;font-family:Arial;color:#000000;background-color:transparent;font-weight:normal;font-style:normal;font-variant:normal;text-decoration:none;vertical-align:baseline;"> <span style="font-size:15px;font-family:Arial;color:#000000;background-color:transparent;font-weight:bold;font-style:normal;font-variant:normal;text-decoration:none;vertical-align:baseline;">Little to no test coverage of domain logic:</span><span style="font-size:15px;font-family:Arial;color:#000000;background-color:transparent;font-weight:normal;font-style:normal;font-variant:normal;text-decoration:none;vertical-align:baseline;"> There are plenty of great developers who do not need automated tests to remember all the little quirks of their systems when working alone, and that works fine until you bring on a second developer. Domain logic tests are about increasing communication and speed</span><span style="font-size:15px;font-family:Arial;color:#000000;background-color:transparent;font-weight:normal;font-style:italic;font-variant:normal;text-decoration:none;vertical-align:baseline;"> for the team</span><span style="font-size:15px;font-family:Arial;color:#000000;background-color:transparent;font-weight:normal;font-style:normal;font-variant:normal;text-decoration:none;vertical-align:baseline;">, and they are part of being a good citizen of a team.</span></li><li style="font-size:15px;font-family:Arial;color:#000000;background-color:transparent;font-weight:normal;font-style:normal;font-variant:normal;text-decoration:none;vertical-align:baseline;"><span style="font-size:15px;font-family:Arial;color:#000000;background-color:transparent;font-weight:bold;font-style:normal;font-variant:normal;text-decoration:none;vertical-align:baseline;">No dedicated UI person for external user interfaces or no actual user testing:</span><span style="font-size:15px;font-family:Arial;color:#000000;background-color:transparent;font-weight:normal;font-style:normal;font-variant:normal;text-decoration:none;vertical-align:baseline;"> Either the developers or the manager think they are good enough to design excellent and understandable user interfaces or do not realize the importance of this. Think of a &#8220;Steve Jobs&#8221;-type manager who imagines himself to be a prodigy of design and usability, or the developer who &#8220;doesn&#8217;t think design is all that hard&#8221;. Real users trying out your software for a few minutes will tell you more than you would believe.</span></li><li style="font-size:15px;font-family:Arial;color:#000000;background-color:transparent;font-weight:normal;font-style:normal;font-variant:normal;text-decoration:none;vertical-align:baseline;"> <span style="font-size:15px;font-family:Arial;color:#000000;background-color:transparent;font-weight:bold;font-style:normal;font-variant:normal;text-decoration:none;vertical-align:baseline;">No dedicated QA for externally-facing software:</span><span style="font-size:15px;font-family:Arial;color:#000000;background-color:transparent;font-weight:normal;font-style:normal;font-variant:normal;text-decoration:none;vertical-align:baseline;"> Someone who is experienced at breaking software should have a crack at it </span><span style="font-size:15px;font-family:Arial;color:#000000;background-color:transparent;font-weight:normal;font-style:italic;font-variant:normal;text-decoration:none;vertical-align:baseline;">before </span><span style="font-size:15px;font-family:Arial;color:#000000;background-color:transparent;font-weight:normal;font-style:normal;font-variant:normal;text-decoration:none;vertical-align:baseline;">it goes to users. Developers (including me) are too enamored with their own work to really take the time to break it, so someone with a sense of pride in finding problems needs to be given the task.</span></li><li style="font-size:15px;font-family:Arial;color:#000000;background-color:transparent;font-weight:normal;font-style:normal;font-variant:normal;text-decoration:none;vertical-align:baseline;"> <span style="font-size:15px;font-family:Arial;color:#000000;background-color:transparent;font-weight:bold;font-style:normal;font-variant:normal;text-decoration:none;vertical-align:baseline;">&#8220;</span><a href="http://en.wikipedia.org/wiki/Ivory_Tower"><span style="font-size:15px;font-family:Arial;color:#1155cc;background-color:transparent;font-weight:bold;font-style:normal;font-variant:normal;text-decoration:underline;vertical-align:baseline;">Ivory Tower</span></a><span style="font-size:15px;font-family:Arial;color:#000000;background-color:transparent;font-weight:bold;font-style:normal;font-variant:normal;text-decoration:none;vertical-align:baseline;">&#8221; or &#8221;</span><a href="http://www.joelonsoftware.com/articles/fog0000000018.html"><span style="font-size:15px;font-family:Arial;color:#1155cc;background-color:transparent;font-weight:bold;font-style:normal;font-variant:normal;text-decoration:underline;vertical-align:baseline;">Architecture Astronaut</span></a><span style="font-size:15px;font-family:Arial;color:#000000;background-color:transparent;font-weight:bold;font-style:normal;font-variant:normal;text-decoration:none;vertical-align:baseline;">&#8221; team leads: </span><span style="font-size:15px;font-family:Arial;color:#000000;background-color:transparent;font-weight:normal;font-style:normal;font-variant:normal;text-decoration:none;vertical-align:baseline;">The team member that is focused on &#8220;perfection&#8221; of the design or code to the detriment of the business. This is not an easy distinction to make, and no one becomes this without a heart full of good intentions. &#8220;If only the test coverage could be higher&#8221; (when it is already high) or &#8220;we can make our own programming language to solve this so much more elegantly&#8221;. Like I said, a fine line that takes many years of experience and deep familiarity with the business and the domain to discern.</span></li><li style="font-size:15px;font-family:Arial;color:#000000;background-color:transparent;font-weight:normal;font-style:normal;font-variant:normal;text-decoration:none;vertical-align:baseline;"> <span style="font-size:15px;font-family:Arial;color:#000000;background-color:transparent;font-weight:bold;font-style:normal;font-variant:normal;text-decoration:none;vertical-align:baseline;">Broad skill level spectrum (that stays static):</span><span style="font-size:15px;font-family:Arial;color:#000000;background-color:transparent;font-weight:normal;font-style:normal;font-variant:normal;text-decoration:none;vertical-align:baseline;"> A huge gap in skill level between the best and worst team members. Most often happens when a bunch of new hires come on board, and were not skilled enough for the task or were not trained properly. The original team members decide the new members are &#8220;not worth the effort&#8221; and neglect to train them in the hopes they will be fired. Months, or even years later, the &#8220;new members&#8221; are still struggling along, berated by the &#8220;elites&#8221;.</span></li><li style="font-size:15px;font-family:Arial;color:#000000;background-color:transparent;font-weight:normal;font-style:normal;font-variant:normal;text-decoration:none;vertical-align:baseline;"> <span style="font-size:15px;font-family:Arial;color:#000000;background-color:transparent;font-weight:bold;font-style:normal;font-variant:normal;text-decoration:none;vertical-align:baseline;">No pair programming:</span><span style="font-size:15px;font-family:Arial;color:#000000;background-color:transparent;font-weight:normal;font-style:normal;font-variant:normal;text-decoration:none;vertical-align:baseline;"> Very few activities will raise the water level for all the team members like pairing. It trains new developers quickly, as well as allows the older developers to see the pain points of a system through a new set of eyes.</span></li><li style="font-size:15px;font-family:Arial;color:#000000;background-color:transparent;font-weight:normal;font-style:normal;font-variant:normal;text-decoration:none;vertical-align:baseline;"> <span style="font-size:15px;font-family:Arial;color:#000000;background-color:transparent;font-weight:bold;font-style:normal;font-variant:normal;text-decoration:none;vertical-align:baseline;">Micro-management in some areas, no management in others: </span><span style="font-size:15px;font-family:Arial;color:#000000;background-color:transparent;font-weight:normal;font-style:normal;font-variant:normal;text-decoration:none;vertical-align:baseline;">When</span><span style="font-size:15px;font-family:Arial;color:#000000;background-color:transparent;font-weight:bold;font-style:normal;font-variant:normal;text-decoration:none;vertical-align:baseline;"> </span><span style="font-size:15px;font-family:Arial;color:#000000;background-color:transparent;font-weight:normal;font-style:normal;font-variant:normal;text-decoration:none;vertical-align:baseline;">leads and managers put too much effort and management into some areas, to the neglect of other areas. Some tickets will be crammed with detail down to the database column names, others will be one-liners covering a month of work. Typically, this is a top-down effect, starting at upper management and trickling down to the lowest levels. Whatever the &#8220;eye of Sauron&#8221; is focused on is what the whole chain of command suddenly turns its laser focus towards, while the rest of the projects/tickets are abandoned by all but the developer assigned to the ticket.</span></li><li style="font-size:15px;font-family:Arial;color:#000000;background-color:transparent;font-weight:normal;font-style:normal;font-variant:normal;text-decoration:none;vertical-align:baseline;"> <span style="font-size:15px;font-family:Arial;color:#000000;background-color:transparent;font-weight:bold;font-style:normal;font-variant:normal;text-decoration:none;vertical-align:baseline;">Agile &ldquo;Lite&rdquo;:</span><span style="font-size:15px;font-family:Arial;color:#000000;background-color:transparent;font-weight:normal;font-style:normal;font-variant:normal;text-decoration:none;vertical-align:baseline;"> Everyone pretty much has heard that agile is a fast development methodology. What often happens is that management either does not learn enough about it to implement correctly, or does not like the &#8220;chaotic&#8221; nature of true agile, and so attempts to adopt the &#8220;best parts&#8221;. Typically this means splitting work into &#8220;sprints&#8221; and having a &#8220;stand-up&#8221;, while developers all just work off of tickets assigned and estimated by their leads. Often this happens because the person who makes the call on whether or not to implement agile falsely believes themselves (and the team) to be &#8220;good enough to not need it&#8221;.</span></li><li style="font-size:15px;font-family:Arial;color:#000000;background-color:transparent;font-weight:normal;font-style:normal;font-variant:normal;text-decoration:none;vertical-align:baseline;"> <span style="font-size:15px;font-family:Arial;color:#000000;background-color:transparent;font-weight:bold;font-style:normal;font-variant:normal;text-decoration:none;vertical-align:baseline;">Low</span><a href="http://www.joelonsoftware.com/articles/fog0000000043.html"><span style="font-size:15px;font-family:Arial;color:#000000;background-color:transparent;font-weight:bold;font-style:normal;font-variant:normal;text-decoration:none;vertical-align:baseline;"> </span><span style="font-size:15px;font-family:Arial;color:#1155cc;background-color:transparent;font-weight:bold;font-style:normal;font-variant:normal;text-decoration:underline;vertical-align:baseline;">Joel Test</span></a><span style="font-size:15px;font-family:Arial;color:#000000;background-color:transparent;font-weight:bold;font-style:normal;font-variant:normal;text-decoration:none;vertical-align:baseline;"> score:</span><span style="font-size:15px;font-family:Arial;color:#000000;background-color:transparent;font-weight:normal;font-style:normal;font-variant:normal;text-decoration:none;vertical-align:baseline;"> The Joel Test remains a great indicator of institutional ego. A team that scores low on the Joel Test does so because someone along the way decided that, &#8220;nah, we don&#8217;t need that here, we are special&#8221;, and almost certainly they are not. I have yet to hear of a team with a legitimate reason for a low Joel Test score.</span></li><li style="font-size:15px;font-family:Arial;color:#000000;background-color:transparent;font-weight:normal;font-style:normal;font-variant:normal;text-decoration:none;vertical-align:baseline;"><span style="font-size:15px;font-family:Arial;color:#000000;background-color:transparent;font-weight:normal;font-style:normal;font-variant:normal;text-decoration:none;vertical-align:baseline;"><strong>*Edit* Low pay: </strong>Ah, yes, the shops that pay their developers significantly lower than the average in that location, language, and experience. This one is hard, because it really is almost always up to just one person, and the developer usually only gets to vote with their feet: by either staying or going. If you are that person, you had best consider what you are missing out on by remaining in a positon where you are underpaid.<br /></span></li></ul><p><br /> <span style="font-size:15px;font-family:Arial;color:#000000;background-color:transparent;font-weight:normal;font-style:normal;font-variant:normal;text-decoration:none;vertical-align:baseline;">Ego driven development is unfortunately self-reinforcing. Much of it is caused by individual pride, and usually it is driven by someone towards the top of the chain of command. While it can be a </span><a href="http://en.wikipedia.org/wiki/Virtuous_circle_and_vicious_circle#Vicious_circle_2"><span style="font-size:15px;font-family:Arial;color:#1155cc;background-color:transparent;font-weight:normal;font-style:normal;font-variant:normal;text-decoration:underline;vertical-align:baseline;">vicious cycle</span></a><span style="font-size:15px;font-family:Arial;color:#000000;background-color:transparent;font-weight:normal;font-style:normal;font-variant:normal;text-decoration:none;vertical-align:baseline;"> trickling down, it is possible to break out of the loop by fighting back against EDD with humility and an attitude of just doing what&#8217;s best for the team. I have seen managers take tremendous crap from above, and never let a bit of it touch those below them. Those managers were heroes we all fought to impress, because we knew how hard they worked to make our teams better. I have seen experienced developers swallow their pride, and do the boring, tedious, hard, and less fun work for the betterment of the whole, in the process grew into someone much more productive.</span><p /> <span style="font-size:15px;font-family:Arial;color:#000000;background-color:transparent;font-weight:normal;font-style:normal;font-variant:normal;text-decoration:none;vertical-align:baseline;">EDD is possible to defeat. Treat everyone with respect, and praise what steps they do take in the right direction. Set aside your ego, and when you get micro-managed and treated with disdain from those above you, do what it takes to make sure that doesn&#8217;t trickle down to those below you and at your level. Pick a few things on this list that you know you are not doing well, and tackle the root cause. Swallow your pride, and do your part to be excellent, and your work will thrive. </span></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Learn That New Programming Language The Startup Way: For Intermediate Devs]]></title>
    <link href="http://steveshogren.github.io/learn-that-new-programming-language-the-start/"/>
    <updated>2012-08-07T00:00:00-04:00</updated>
    <id>http://steveshogren.github.io/learn-that-new-programming-language-the-start</id>
    <content type="html"><![CDATA[<p>I have a method I use for rapidly learning new programming languages that I wanted to share because I have not really seen it documented anywhere else. This technique is not for the faint of heart, but it is a lot of fun. Many of you old hands and graybeards probably already do this, but for those that don&#8217;t, you have got to give it a shot at least once. You&#8217;ll never be the same. And no, I am not talking about <a href="http://projecteuler.net/">Project Euler</a>, although that has its place.</p><p>First, do a bit of research, and get your hands on the best book on the language you can find. Second, research the language, and pick a project to which it is well suited. For example, to learn Clojure, I decided to re-write an old php project from scratch that I was well familiar with. (This also gives me the neat data point of seeing how much smaller the project is in Clojure)&nbsp;Try not to be too ambitious here, you want something you could pull off in your current go-to language.</p><p>Start the project, and work under a dozen hours on it, bashing your way through the first pains of installing the language/framework (my least favorite part), and getting a basic proof of concept together. If it&#8217;s a web site, think &#8220;hello world&#8221; coming out of your database of choice. Tell all your friends what you are going to make, and when it is launching. Make sure the launch date is ambitious. Start to read the book splitting your time roughly 25/75 between reading and programming, using what you read to provide you with &#8220;ammunition&#8221; for your project. Do this in as short a loop as possible, so the reading and programming are never far apart.</p><p>Since you will be fighting through real problems, the reading is a hundred times more interesting. Almost every page you will have to stop yourself from shouting, &#8220;OF COURSE!&#8221; out loud at the book, because you have just discovered something that is an extremely real pain point to you. <span>You may find yourself laughing more than once in sheer delight</span> because you anticipated a part of the language correctly, and just found the syntax for it. If that is not happening, you probably need to adjust the ratio of programming to reading. You want to find that sweet spot of just barely learning what you need to succeed, and constantly being &#8220;saved&#8221; by reading that last tidbit last night. If even the simplest things take unpleasantly long, perhaps more reading. If the reading is dragging too much, try more programming. When you hit that sweet spot, the programming is an exhilarating rush, and the reading is actually fun. If none of these happen, perhaps you are learning a language that does not really teach you anything new, just a different syntax for the same thing you are used to doing, in which case, ask yourself why you are learning that language. There are plenty out there that will <a href="http://norvig.com/21-days.html">blow your mind</a>.</p><p>Don&#8217;t forget that deadline either, your friends and family are waiting, remember? Hustle is the name of the game here, and don&#8217;t worry, you&#8217;ll make tons of mistakes, and you&#8217;ll never forget a single one. Who cares? (No one will ever know but you!) If experience is learning from a lot of mistakes, you&#8217;ll be the most experienced person around!</p><p>When that deadline looms, don&#8217;t give up! Step up your game, slash the second-best features, and race for the finish. If you are way off your mark, you can consider pushing the date back, but still deliver something on your original date. Once you are done, unwind for a few months, take it easy, then repeat. After a couple of those iterations you will be seriously more experienced in a wide variety of languages, and you will find yourself much more confident in your language-that-pays.</p><p>Do this a couple of times and you&#8217;ll not only get better at that language, you&#8217;ll get better at all of them. You will start to see the underlying concepts that cause languages to be written the way they are. The language families will start to run together, and you will develop the intuition of what you need to do with just the trivial task of remembering (or looking up) the syntax. Your programming skill will move to a higher plane of abstraction, and you will think outside the specific language. The language just becomes an implementation detail, just words that tell the compiler or interpreter what you mean. Reading other people&#8217;s code will become significantly easier, and you will find learning a new language is almost faster reading the masters&#8217; code on github than with a book at all.</p><p><strong>TL;DR</strong> <span>Don&#8217;t let what little time you have discourage  you. A few minutes a day sneaking in one more function is better than a  few minutes a day moping in front of the TV wishing you had more time  for programming. </span>I understand not everyone can put in &#8220;this kind of time&#8221; (or energy) into side projects. Heck, plenty of times I cannot either. Sometimes, you only have a few hours a month on the good months. That&#8217;s fine. Take that date, stretch it out to the end of the year. Slip in that reading on the ride home, or at lunch. Make every moment you spend on it count.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[On Developer Certifications]]></title>
    <link href="http://steveshogren.github.io/on-developer-certifications/"/>
    <updated>2012-02-28T00:00:00-05:00</updated>
    <id>http://steveshogren.github.io/on-developer-certifications</id>
    <content type="html"><![CDATA[<p>I have often thought whenever I meet a programmer who is obviously grossly incompetent that there needs to be some sort of certification board for software engineering that can help enforce some minimal skills to help weed out the riff-raff.<p /> Obviously, this is completely impossible. The tools and community change so fast that individuals are barely able to stay on top; good luck getting a standards committee to completely revise every few months. Who would be on the committee? And what would they agree on to enforce? Regex? Recursion, OO, testability, and functional programming?&nbsp; Proof of understanding in the half-dozen <a href="http://norvig.com/21-days.html" target="_blank">&#8220;mind expanding&#8221;</a> languages? Not going to happen. Not while my Joomla-site maintaining friend and my Android 3D game authoring cohort are both lumped under the title &#8220;software developer&#8221;. The field is too vast, the content too broad, and the jobs too diverse. <p /> So, we are doomed to wallow. Or are we? What is the one thing we all have to do?<em> Get hired.</em><p />I used to be a big sissy about interviewing for jobs. Especially interviews full of the nit-picky details I can never remember, yeah, I <em>really</em> hate those. I would moan and groan about how the interviewer could only answer those questions because they had to look them up the other day. &#8220;MySQL index implementations, what am I, a DBA?!&#8221;, I would screech to anyone who would listen, &#8220;They must have misunderstood, I am a developer, when would I ever need to know that?!&#8221;<p /> But.<p />Interview prep gets me to cram stuff into my head I would otherwise skim or avoid if just sitting at home programming for fun. I get a great refresher on all the stuff I am fully able to do at work, but maybe I haven&#8217;t needed in a while. Like linked-lists. In four years of fairly diverse programming jobs, I have<strong> yet</strong> to need a linked list for anything, but man, when that day comes, I have linked-lists in a quick-draw holster. I used to say the same thing about trees, then last year, I had a problem that surely needed a tree, and hear you me, I had that data being in-order traversed before you could say: &#8220;tree&#8221;. Would I have even <em>remembered</em> <em>what trees are good for</em> without my semi-annual refresher?<p /> My wife is a commercial pilot, and every so often she is required to skim over all those little details about being a pilot, refreshing <em>everything</em>, double-checking her knowledge so she can keep her licenses, <em>even if she hasn&#8217;t needed a certain technique since the last test</em>. Huh. Sounds like me, every so often, cramming for an interview.<p />  We don&#8217;t need certifications for being a programmer. We already have the tools in hand, and just need to learn to use them better. <strong>Interviews are our certifications. </strong></p><p>This is a double-edged sword, because this means that, &#8220;what you sow, you will also reap&#8221;.  The responsibility to keep standards high falls on the interviewer. If  you interview a candidate for tricky puzzle questions, or in-depth  knowledge of C++ libraries, you will find someone who knows those  things, and possibly ONLY knows those things. I have seen developers hired who couldn&#8217;t handle VCS merging or shipping actual software, but were absolute <em>geniuses</em> when it came to programming language trivia and puzzle questions.</p><p>A few months ago, I read of a guy with no programming experience who did like 100 interviews in a few weeks, till he was a master interviewee. By the end, he was able to pick his choice of companies, and <strong>yet </strong><strong>he couldn&#8217;t ship software</strong>. He gamed a system <em>intended</em> to sort out good developers by asking questions that are ancillary to development, without actually having the candidate <em>prove any real ability</em>. And now that company has a developer who is great at gaming systems, but unskilled at development: I hope they have a good training program.</p><p>No offense intended to the man who did this, I <strong>really </strong>admire his tenacity and clever thinking, and I think he will do well regardless of the task. But it speaks volumes to the brokenness of the interview system for those companies that would hire a completely unskilled developer based on the correct answers to trivia questions about programming.</p><p>Parting question to consider for interviewers: if interviews are our certifications, what should a candidate be able to do to be &#8220;certified&#8221; to be able to do the job in question?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Quality Is Future Speed]]></title>
    <link href="http://steveshogren.github.io/quality-is-future-speed/"/>
    <updated>2012-02-23T00:00:00-05:00</updated>
    <id>http://steveshogren.github.io/quality-is-future-speed</id>
    <content type="html"><![CDATA[<p>Lately, I have been deliberating on <strong>quality</strong> <strong>vs. speed</strong>. Throughout my career, I have worked with developers who basically consider quality to be a programmer&#8217;s vice, an extravagance only for the navel-gazing idealists. I have also worked with developers who consider <em>all </em>time spent on quality to be of the utmost importance, and that programming for speed is for those lazy and slapdash realists. I recently read Yegge&#8217;s post <a href="http://steve-yegge.blogspot.com/2008/06/done-and-gets-things-smart.html">Done, and Get&#8217;s Things Smart</a>, and I think I agree with Yegge on this point, that it <em>is</em> possible to perform fast and with high quality, and like a wandering samurai, that is the path I seek. <p />  There are many facets to this, of course, but I have been playing with this mental model. Specifically, my insight here is a new definition of quality: <strong>quality is future speed</strong>. In my mind, quality that is not for future speed <strong>is</strong> an extravagance, something programmers do to entertain themselves, and it is worse than cutting corners in the present, because it sacrifices current work for no future gain. <p />  Lately, my personal projects have taken a certain theme: I want more practice tuning my programming to be as fast as possible <em>both for today and for the future</em>. And to be perfectly honest, usually there is a lot more &#8220;future&#8221; in most systems than just &#8220;today&#8221;. <p />  So, how have I been doing this? I set arbitrarily short deadlines for myself, so I am forced to practice dropping anything that is not directly related to speed. I then try to rotate projects every month, so I am forced to return to old work, to learn better where I made bad choices that cost me <em>future </em>speed. <p />  Doing this with the right mindset is very humbling, and very insightful. Honestly, this may happen at work accidentally from time to time as well, but rarely at work am I able to carefully reflect on the mistakes of the past. At home, the pain I feel is my own, no one suffers at home other than me, and there is no one to blame but myself. If an architecture is brittle, or the test coverage is low, or the design is resistant to change, (all of which have happened) I am able to take those lessons to heart <em>because I directly caused those problems</em>.<p />  I encourage anyone who, like me, seeks to be a more excellent developer, to give this a try: start a couple of side projects (and don&#8217;t worry, it took me a year to get the ones I have), and set yourself some crazy tight &#8220;delivery dates&#8221;. Heck, make real products and try to make some money off them, maybe you will be able to get some side-cash! But then, after you have &#8220;delivered&#8221;, take some time to rest, maybe read a book or two, tinker with some other projects, and after a break, return to analyze your past work. Set yourself another strict deadline, try to make a second version, or add some more features. You will find some incredibly valuable lessons there.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[New Year's Android Triumph]]></title>
    <link href="http://steveshogren.github.io/new-years-triumph/"/>
    <updated>2012-01-01T00:00:00-05:00</updated>
    <id>http://steveshogren.github.io/new-years-triumph</id>
    <content type="html"><![CDATA[<p>December 1st, I made myself a New Year&#8217;s resolution to completely create an Android game that I would not be ashamed to show people from (mostly) scratch before the end of December. What made it the most fun was that I started with practically no experience with the Android platform at all, and so I got to pick it up by the seat of my pants.<p />The biggest challenge was probably the last three days, where I was faced with some hard calls, when the deadline loomed, and my still mile-long list of wants had to be pruned down just about every few hours. I basically had a &#8220;buggy beta&#8221; by Wednesday morning, and all the problems remaining were ones I didn&#8217;t know how to solve or hide, and while all the graphics where there, I could barely stand to look at them. I felt like I was spinning my wheels with no progress. My friend Dan tried to talk me down, pointing out with some clarity that there was no gun to my head, and I was doing this for myself, so I could stop any time. Amusingly enough, that was exactly what I needed to hear. I was doing this for myself, to better myself, to learn more discipline. I wanted to stretch my abilities to the limits. So, I pushed through. I found a book that showed me how to fix my problems, and I didn&#8217;t stop until every bug I could find was fixed, and everything my poor family pointed out (I made them each play it like a dozen different times) was smoothed.<p />  And last night, after about a hundred hours of total work this month, I slid under the wire with roughly two hours to spare. The game is not in the market YET, because at the end of it all, I concluded I would rather spend the few dozen more hours to convert it to OpenGL ES, and add in a few neat things I was unable to do using the Android canvas, but for a v1, I am immensely proud of the whole experience.<p />I can say, unequivocally; WHEW. <p />This challenge was a fantastic learning experience, and I had several great reminders of what my dad always told me growing up: <strong>just work smarter, son, not harder</strong>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Why I Can't Get Focused (It's a double entendre)]]></title>
    <link href="http://steveshogren.github.io/why-i-cant-get-focused-its-a-double-entendre/"/>
    <updated>2011-12-14T00:00:00-05:00</updated>
    <id>http://steveshogren.github.io/why-i-cant-get-focused-its-a-double-entendre</id>
    <content type="html"><![CDATA[<p>I can&#8217;t get focused today. My mind is a torrent of activity completely unrelated to my task at hand, so I am writing this to get these thoughts out so I can get back to work.<p />I got a call from a recruiter the other day trying to get me to come interview at this job. Right now I am working in VB.NET and Actionscript. Until this job, I was always working in open-source languages: Perl, PHP, and some Java. This is my first real divergence from that pattern, and of course it is in two languages that are, to say the least, not very popular with the open source crowd. This gets me wondering, &#8220;what if when I decide to move on, all the fun jobs look down their noses at me for working in unpopular languages?&#8221;.<p /> To be fair, I still program quite a bit outside work in my favorite languages, and that is all well and good.<p />For some reason though, that recruiter really got under my skin. I keep asking myself questions like, &#8220;is spending time right now making a Java game for the Android a good choice long term?&#8221; or, &#8220;should I spend any more time learning Python with Django, or just get more invested in Javascript and node.js?&#8221;.<p /> These are not questions I want to be asking myself. <p />So, I sit down to think about it and get it out of my system. What kind of programmer do I want to be in 5 years? I know without a moment&#8217;s hesitation. <p /> <strong>I want to be the kind of programmer who is not tied to any one language or platform, but is instantly effective and rapidly excellent in </strong><strong><em>every</em> language and platform. </strong><p />Right now, I am learning Common Lisp. Why? To learn better functional programming. Why do I play with Javascript? To be better at client-side web programming. PHP/Python? Server-side web programming. *.NET? Compiled, versioned programming. Android games? For fun! Why do I all this? Because the programmer I want to be is not constrained to his language/platform<em> at all</em>. The programmer I want to be programs at a level <em>over the language</em>.&nbsp;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Testing is to programming what math is to engineering]]></title>
    <link href="http://steveshogren.github.io/testing-is-to-programming-what-math-is-to-eng/"/>
    <updated>2011-09-26T00:00:00-04:00</updated>
    <id>http://steveshogren.github.io/testing-is-to-programming-what-math-is-to-eng</id>
    <content type="html"><![CDATA[<p>
  In ancient times, plenty of builders did their work without math,
  and I would guess that a good portion of them likely did it faster
  then their math-doing counterparts.
</p>
<p >
  I am certain that when builders first started using math to prove
  that buildings would stand up safely, they were mocked by their
  math-less counterparts. I can hear them now, &#8220;Oh, Stephos, it takes
  you 5 times longer to prove your building will stand up, real men
  can just <em>see</em> that it will work&#8221;. Even in modern times, many
  people build houses and small buildings that probably don&#8217;t even
  need the math to really &#8220;prove&#8221; they work, but they perform the due
  diligence anyway. On the other hand, some people today still build
  houses, sheds, tree-houses, lofts, and fire pits without any
  drawings or math at at all, and why should they? They are
  responsible for the risk.
</p>
<p >
  This is all fine, but, builders who shy away from math also don&#8217;t
  build airliners, space shuttles, and skyscrapers. An aircraft
  designer who doesn&#8217;t feel like using math to prove their aircraft
  will fly is handed an &#8220;Experimental&#8221; sticker and gravely patted on
  the back.
</p>
<p >
  Today, programming is at the same place as both
  ancient <strong>and</strong> modern engineering: many projects can
  be done &#8220;by eye&#8221;, and some of the most experienced programmers are
  able to build immense projects alone without any sort of automated
  testing at all. When you go to a forum and ask for help, you are
  just as likely to hear from a &#8220;space shuttle&#8221; programmer as you are
  to hear from a &#8220;tin shack&#8221; programmer. The &#8220;space shuttle&#8221;
  programmer would be horrified to hear of working without automated
  testing and rigorous review practices, whereas the &#8220;tin shack&#8221;
  programmer would be horrified to think of the time wasted to
  even <em>learn the procedures</em> to automatically prove his code
  works as it should. The &#8220;space shuttle&#8221; programmer might work on the
  same internal financial project for months or years, finally
  releasing with zero defects; the &#8220;tin shack&#8221; programmer might churn
  out several quick web sites a day. Neither project
  is <em>better</em> then the other, they both might be perfect for
  what their business needs.
</p>
<p>
  I have heard several times from very good lone wolf programmers that
  testing just slows them down, and in some ways, it does appear to be
  a slowdown for them. Unfortunately, the cost to build even
  medium-sized projects with several workers without automated testing
  is only felt when it is too late, when the deadlines (and costs) are
  spiraling out of control.
</p>
<p>
  The disciplined application of mathematics transformed and
  solidified the field of engineering into a field far more vast and
  capable of some of the most incredible constructions imaginable.
  Would we have smart-phones, GPS, modern cars, and airliners if
  engineering had just avoided mathematics? Just imagine what the
  field of programming could grow into if we continue to learn and
  grow our testing, designing, and writing of software.
</p>
<p>
  I propose that automated testing is to programming what math was
  to ancient engineering.
</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Endless Debate]]></title>
    <link href="http://steveshogren.github.io/the-endless-debate/"/>
    <updated>2011-07-22T00:00:00-04:00</updated>
    <id>http://steveshogren.github.io/the-endless-debate</id>
    <content type="html"><![CDATA[<p><br />The last three and a half years for me have been terrible. Why? Well, three and half years ago, I discovered the endless debate, Emacs vs. Vim. Being an efficiency nut, I could not fathom the horror of learning one, and by that action, not learning the other. What if the one I learned was not the &#8220;best&#8221; one? I could see that both were excellent and worth learning, but I wanted to learn both concurrently. Unfortunately, my body has a hard time learning two completely different keyboard systems at the same time. Heck, three and a half years ago, I was still learning to touch-type. <p /> So, three years pass, and I am now no farther along. <p />Additionally, I read on an almost weekly basis, articles that explain how great Emacs and vim are, you just need to learn one, and learn it well. I wanted to stick with Emacs, for the built-in lisp, and <a href="http://blog.vivekhaldar.com/post/3996068979/the-levels-of-emacs-proficiency">several</a> of my <a href="http://sites.google.com/site/steveyegge2/effective-emacs">favorite</a> programmers highly advocate it. But, I wanted to pick up vim, because it is obviously the far superior text editor, and the default on Linux, and probably will help me not get Emacs <a href="http://xahlee.blogspot.com/2010/06/famous-emacs-people-with-hand-injuries.html">RSI</a> but, perversely, it is not nearly as easy to extend as Emacs. <p /> So, the debate raged in my head for three years, and I stupidly got better at neither. Then, the other day, it clicked. Vim is the greatest text editor of them all, with text objects, highly combine-able commands, and modal editing. Emacs is the greatest IDE of all, with an awesome programming language built-in and thousands of classes and libraries to build on. Vim is built in the tradition of a small, sharp UNIX tool; Emacs in the tradition of HAVING thousands of small sharp tools. <p /> Finally, in a rush, it clicked into place with earth-shattering force: I can make Vim inside Emacs, with lisp, but I really could not remake Emacs inside Vim. <p />Suddenly, in one glorious moment, the world all made sense. Vim, the greatest text editor, should be a part of Emacs, the greatest IDE! My searching had been in vain, there was no way to compare them, they are totally different tools!<p /> In my typical child-like innocence, I rolled up my sleeves, opened up an instance of Emacs, and started making Vim. A few hours later, Google pointed out the obvious: Emacs already has a vi mode built-in (viper). Better yet, with a simple file in the right place, I had <a href="http://www.emacswiki.org/emacs-es/Vimpulse">vimpulse </a>(the practically complete Vim mode) installed and ready to go. Suddenly, a huge weight lifted off my chest. I am free to use the best tool for the job, and, like Huck Finn, float off down the river, leaving silly feuds behind me. If my actions here seem unnatural, an abomination, an unholy union, I encourage you, leave behind the fan-boyism, pick up your tools, and come build something with men who see their tools for what they truly are: <span style="text-decoration:underline;">not a good hill to die on</span>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[End-to-End Web Service Testing]]></title>
    <link href="http://steveshogren.github.io/end-to-end-web-service-testing/"/>
    <updated>2011-06-28T00:00:00-04:00</updated>
    <id>http://steveshogren.github.io/end-to-end-web-service-testing</id>
    <content type="html"><![CDATA[<p>
  At work last month, I was assigned to fix some bugs in an
  asynchronous legacy code base. My supervisor gave me a month to see
  what I could do, and to see if I could fix a few tricky bugs. The
  code is divided into two sections, a client application and a web
  server. Both the client application and the server have their own
  persistence, and they communicate through a soap web service.
</p>
<p>
  I wanted to try and write some sort of end-to-end tests around this,
  but I could not figure out how to get around that web service. I
  don&#039;t want my tests to rely on a server having to always be up,
  so I initially was planning on writing tests from the client
  database to the web service, where I would just stub some responses.
  I got about an hour into that plan, before I realized I would then
  have to do that same thing on the server, and that sort of testing
  will not really tell me what the code <i>does</i>. I needed to cover
  this whole process end-to-end.
</p>
<p>
 I walked around for a bit, thinking. Then it hit me, both the server
 and client code are written in VB.NET, and, except for the web service, work
 just like plain old highly-coupled code. Hmmm.
</p>
<p>
 For the first pass, I wrote an interface to wrap the web service,
 then used dependency injection to inject a fake web service that (and
 here is the cool part) simply calls around the web service entirely
 to the server code directly and injects a different database
 connection string, so the server talks to a second database I have
 prepared.
</p>
<p>
 Just like that, I can run, all on my machine, 99 percent of the code
 in a single end-to-end test. I can even setup several client
 databases, and rotate them out, to &quot;swap&quot; between several
 clients in the middle of the tests.
</p>
<p>
 I added a few &quot;integration&quot; tests that do talk to a real
 published testing web service, just to make sure everything is still
 in place correctly.
</p>
<p>
  Now, I said this was asynchronous, and it is, the executed
  system-under-test kicks off a thread to talk to the web service, and
  so to get it to test, I needed to wait for the thread to finish,
  then do my assertions.
</p>
<p>
 I used a system where the spun off thread will set a boolean when it
 has finished running, to let the main thread know it has finished,
 and the main thread just keeps checking that boolean until it is
 true. While hackish, that is my current working solution, as no more
 then one thread is ever spun off at a time, I can just have my test
 wait for the thread to finish, then complete the required assertions.
</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Lisp REPL]]></title>
    <link href="http://steveshogren.github.io/lisp-repl/"/>
    <updated>2011-06-04T00:00:00-04:00</updated>
    <id>http://steveshogren.github.io/lisp-repl</id>
    <content type="html"><![CDATA[<p>
  So, working through the Land of Lisp book, getting the hang of it.
</p>
<p>
Chapter Six, the author starts off by talking a little about
  the Common Lisp REPL, or Read-Eval-Print-Loop that you use as sort
  of the &#8220;command line&#8221; for interacting with lisp. It is pretty cool,
  you type in code, and it executes. And then he opens the hood a
  little:
</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="nf">defun</span> <span class="nv">repl</span> <span class="p">()</span>
</span><span class='line'>    <span class="p">(</span><span class="k">loop </span><span class="p">(</span><span class="nb">print </span><span class="p">(</span><span class="nb">eval </span><span class="p">(</span><span class="nf">read</span><span class="p">)))))</span>
</span></code></pre></td></tr></table></div></figure>
<p>
WHAAAAAAAAAAAAAAA??!?!?!
</p>
<p>
I just about spit my drink all over the monitor laughing. The
function <strong>eval()</strong> evaluates whatever text is passed in
as code, in this case, from the command line via the obviously
named <strong>read</strong> and after executing
it, <strong>print()</strong> prints the result, and it just does that
forever till you quit.
</p>
<p>
That means, you could make one of these for any language that can
evaluate strings into code. I know python has one built-in. Php can
evaluate code with eval, and a quick search shows a highly nifty (and
robust from the looks of
it) <a href="https://github.com/facebook/phpsh">REPL for php</a>
complements of facebook. Sweet. Or, you can use php -a for the
interactive mode.
</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Don't Mock Concrete Classes]]></title>
    <link href="http://steveshogren.github.io/dont-mock-concrete-classes/"/>
    <updated>2011-05-24T00:00:00-04:00</updated>
    <id>http://steveshogren.github.io/dont-mock-concrete-classes</id>
    <content type="html"><![CDATA[<p>(They have thin skin)</p>
<p>I have been
reading <a href="http://www.amazon.com/Growing-Object-Oriented-Software-Guided-Tests/dp/0321503627/ref=sr_1_1?ie=UTF8&amp;s=books&amp;qid=1303935530&amp;sr=8-1"
target="_blank">G.O.O.S.</a> and honestly, much of it has been just a
reiteration. Until chapter 20, that is. I get to the section Don&#8217;t
Mock Concrete Classes, and it clicks.
</p>
<p>
 Mocking concrete classes used to be my bread and butter. Almost every
 unit test I wrote for the last year had several mocked concrete
 implementations, to pass in as dependencies of the system under test.
</p>
<p>
What do I mean by that? Imagine a class that takes one dependency
through the constructor like this:
</p>
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="k">class</span> <span class="nc">Velocity</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">public</span> <span class="k">function</span> <span class="nf">__construct</span> <span class="p">(</span><span class="nx">PayoffCalc</span> <span class="nv">$PayoffCalc</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">_PayoffCalc</span> <span class="o">=</span> <span class="nv">$PayoffCalc</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">public</span> <span class="k">function</span> <span class="nf">toFloat</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nv">$paymentPerDay</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">_PayoffCalc</span><span class="o">-&gt;</span><span class="na">getPaymentPerDay</span><span class="p">();</span>
</span><span class='line'>    <span class="k">return</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">_calculate</span><span class="p">(</span><span class="nv">$paymentPerDay</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>
<p>
Would have a test driving it, looking like this:
</p>
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="k">public</span> <span class="k">function</span> <span class="nf">test_velocity_validDailyPayment</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nv">$paymentPerDay</span> <span class="o">=</span> <span class="mi">3</span><span class="p">;</span>
</span><span class='line'>  <span class="nv">$expectedVelocity</span> <span class="o">=</span> <span class="mi">1392</span><span class="p">;</span>
</span><span class='line'>  <span class="c1">//Mock PayoffCalc-&gt;getPaymentPerDay() to return 3</span>
</span><span class='line'>  <span class="nv">$PayoffCalc</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">getMock</span><span class="p">(</span><span class="s1">&#39;PayoffCalc&#39;</span><span class="p">,</span> <span class="k">array</span><span class="p">(</span><span class="s1">&#39;getPaymentPerDay&#39;</span><span class="p">));</span>
</span><span class='line'>  <span class="nv">$PayoffCalc</span><span class="o">-&gt;</span><span class="na">expects</span><span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">once</span><span class="p">())</span>
</span><span class='line'>             <span class="o">-&gt;</span><span class="na">method</span><span class="p">(</span><span class="s1">&#39;getPaymentPerDay&#39;</span><span class="p">)</span>
</span><span class='line'>             <span class="o">-&gt;</span><span class="na">will</span><span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">returnValue</span><span class="p">(</span><span class="nv">$paymentPerDay</span><span class="p">));</span>
</span><span class='line'>  <span class="nv">$Velocity</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Velocity</span><span class="p">(</span><span class="nv">$PayoffCalc</span><span class="p">);</span>
</span><span class='line'>  <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">assertEquals</span><span class="p">(</span><span class="nv">$expectedVelocity</span><span class="p">,</span> <span class="nv">$Velocity</span><span class="o">-&gt;</span><span class="na">toFloat</span><span class="p">());</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>
</p>
<p>
For several months now, writing unit tests this way has become
increasingly irritating to me, for several reasons. First off, notice
how phpunit does a mock? With a string for the classname and the
method to mock. Obviously, in small scale this duplication is
manageable, but imagine for a second thousands of unit tests all
mocking this way, and you will realize it gets out of hand fast. More
than once in the last year I have set out to refactor a classname or
method signature, to have dozens of failing unit tests, because they
all mock the <em>string</em> of the old name.
</p>
<p>
 Secondly, and more importantly, I find this to be brittle because you
 are locking yourself into an implementation of the class you need
 mocked. What if I wanted to move that getPaymentPerDay to a different
 class? Or I changed that version of getPaymentPerDay to
 getPaymentPerMonth? I would have to traipse through every one of
 those brittle mocks and rewrite their duplicated, crystalline
 structure.
</p>
<p>
 Stupid.
</p>
<p>
My inner frustration was so great as to cause me to start thinking up
all sorts of mad ways to get around this issue. Store the code needed
to build that mock as text on the class itself, to be parsed and
executed on the fly? Check. Create massive hierarchical testing
libraries to build the mocks? Check. And all these did was mask the
real issue. <strong>I was mocking the concrete
implementation.</strong>
</p>
<p>
 So, what would mocking the interface be? Well, PayoffCalc actually
 has two public methods: getPayoffDate() and getPaymentPerDay(). The
 Velocity class only needs getPaymentPerDay(), but by mocking the
 concrete class, we are forcing it to depend on
 the <strong>whole</strong> (undefined) interface of PayoffCalc.
 Velocity does not need getPayoffDate(), but it is in the interface we
 give it (in the form of the concrete PayoffCalc).
</p>
<p>
 Whoa. Sounds
 like <a href="http://en.wikipedia.org/wiki/Interface_segregation_principle"
 target="_blank">ISP</a>. Written about by Bob Martin. Fifteen years
 ago. *Forehead smack*
</p>
<p>
I make an interface for this concept of PaymentPerDayRetriever, for
lack of a
better <a href="http://martinfowler.com/bliki/RoleInterface.html"
target="_blank">Role</a>.
</p>
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="k">interface</span> <span class="nx">PaymentPerDayRetriever</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">public</span> <span class="k">function</span> <span class="nf">getPaymentPerDay</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>
<p>
Then use the interface in the test:
</p>
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="k">public</span> <span class="k">function</span> <span class="nf">test_velocity_validDailyPayment</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nv">$paymentPerDay</span> <span class="o">=</span> <span class="mi">3</span><span class="p">;</span>
</span><span class='line'>    <span class="nv">$expectedVelocity</span> <span class="o">=</span> <span class="mi">1392</span><span class="p">;</span>
</span><span class='line'>    <span class="c1">//Mock PayoffCalc-&gt;getPaymentPerDay() to return 3</span>
</span><span class='line'>    <span class="nv">$PayoffCalc</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">getMock</span><span class="p">(</span><span class="s1">&#39;PaymentPerDayRetriever&#39;</span><span class="p">);</span>
</span><span class='line'>    <span class="nv">$PayoffCalc</span><span class="o">-&gt;</span><span class="na">expects</span><span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">any</span><span class="p">())</span>
</span><span class='line'>        <span class="o">-&gt;</span><span class="na">method</span><span class="p">(</span><span class="s1">&#39;getPaymentPerDay&#39;</span><span class="p">)</span>
</span><span class='line'>        <span class="o">-&gt;</span><span class="na">will</span><span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">returnValue</span><span class="p">(</span><span class="nv">$paymentPerDay</span><span class="p">));</span>
</span><span class='line'>       <span class="nv">$Velocity</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Velocity</span><span class="p">(</span><span class="nv">$PayoffCalc</span><span class="p">);</span>
</span><span class='line'>    <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">assertEquals</span><span class="p">(</span><span class="nv">$expectedVelocity</span><span class="p">,</span> <span class="nv">$Velocity</span><span class="o">-&gt;</span><span class="na">toFloat</span><span class="p">());</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>
<p>
By mocking the interface, I have freed my Velocity class from knowing
about the rest of the old PayoffCalc interface, and when I realize
later that my PayoffCalc really is doing two totally separate things,
I can just move the PaymentPerDayRetriever interface to
getPaymentPerDay&#8217;s new home (probably on the PaymentRepository, not
shown here).
</p>
<p>
 While this example only used one method per interface, in reality, it
 would have all the methods necessary to complete that aspect of the
 class.
</p>
<p>
Fascinating.
</p>
]]></content>
  </entry>
  
</feed>
