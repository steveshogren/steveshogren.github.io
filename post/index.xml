<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Deliberate Software</title>
    <link>http://deliberate-software.com/post/</link>
    <description>Recent content in Posts on Deliberate Software</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 22 Jul 2016 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://deliberate-software.com/post/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Promiscuous Pairing</title>
      <link>http://deliberate-software.com/pairprogramming/</link>
      <pubDate>Fri, 22 Jul 2016 00:00:00 +0000</pubDate>
      
      <guid>http://deliberate-software.com/pairprogramming/</guid>
      <description>

&lt;p&gt;Let me start with a disclaimer: solutions are only valuable if they solve a
problem. Please don&amp;rsquo;t use this post to browbeat your colleagues. Programming
productivity hasn&amp;rsquo;t yet been scientifically measured. Therefore &lt;strong&gt;every&lt;/strong&gt;
process, language, or paradigm is recommended on personal preference or &amp;ldquo;gut
feeling&amp;rdquo;. I will lay out my preferences and &amp;ldquo;gut feelings&amp;rdquo;, but do not mistake
them for rigorous claims of productivity.&lt;/p&gt;

&lt;p&gt;My current team has pair-programmed and followed strict TDD on a single codebase
for over ten years. The practices started from reading the literature on Extreme
Programming, which resonated with both the developers and leadership. As the
team changed, we continued to follow the practices.&lt;/p&gt;

&lt;p&gt;In the last five years, the developers choose to implement Arlo Belshee&amp;rsquo;s &lt;a href=&#34;http://csis.pace.edu/~grossman/dcs/XR4-PromiscuousPairing.pdf&#34;&gt;&amp;ldquo;Promiscuous Pairing&amp;rdquo;&lt;/a&gt;. We
switch pairs in short intervals: 180 minutes is our current preference.&lt;/p&gt;

&lt;p&gt;The pairing sessions start at 8:45AM and 1:00PM with the typical five-minute
stand-up. People report on any data that the rest of the team needs to hear,
including noteworthy technical details. Afterwards, the developers crowd around
a board with the current tasks in progress. We randomize the pairs, then each
pair decides what to work on from the current tasks.&lt;/p&gt;

&lt;p&gt;If a developer wants to not pair for a session, they go &amp;ldquo;odd&amp;rdquo;. We have a working
agreement that no production code can be written while odd. The odd person works
on automated testing, answering questions, researching technical debt,
investigating root causes of bugs, and authoring throwaway &amp;ldquo;spikes&amp;rdquo; for major
refactorings.&lt;/p&gt;

&lt;h2 id=&#34;pros:bd97cfb3b628f77ac97d1d5cdf96fc97&#34;&gt;Pros&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;No siloed information or &amp;ldquo;I don&amp;rsquo;t touch that section&amp;rdquo; areas&lt;/li&gt;
&lt;li&gt;The team ends up adopting a consistent set of styles, tools, shortcuts, workflow&lt;/li&gt;
&lt;li&gt;Developers can take vacation whenever they please&lt;/li&gt;
&lt;li&gt;Training is built in to the process from day one&lt;/li&gt;
&lt;li&gt;Developers quitting doesn&amp;rsquo;t throw the team into disarray&lt;/li&gt;
&lt;li&gt;Productivity is fairly stable across years&lt;/li&gt;
&lt;li&gt;Protected time every day for research, refactoring, and tech debt&lt;/li&gt;
&lt;li&gt;Frequent rotation gives a natural cadence for fixing broken CI builds&lt;/li&gt;
&lt;li&gt;Many of us spend a lot less time puttering around on Reddit, HN, etc&lt;/li&gt;
&lt;li&gt;Interruptions are much less disruptive, typically only one or two minutes to
get back into &amp;ldquo;flow&amp;rdquo;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;cons:bd97cfb3b628f77ac97d1d5cdf96fc97&#34;&gt;Cons&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Huge system &amp;ldquo;owned by everyone&amp;rdquo; is a lot for new developers to handle - training takes a long time&lt;/li&gt;
&lt;li&gt;Juggling tasks can be complex (e.g. what gets put on hold when not at full capacity)&lt;/li&gt;
&lt;li&gt;Support issues get passed around from pair to pair&lt;/li&gt;
&lt;li&gt;Some developers feel pairing is demeaning, disrespectful, or beneath them&lt;/li&gt;
&lt;li&gt;General feeling you are &amp;ldquo;not important&amp;rdquo; to the team&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;partly-good-partly-bad:bd97cfb3b628f77ac97d1d5cdf96fc97&#34;&gt;Partly Good, Partly Bad&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Pairing is polarizing

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;-&lt;/strong&gt; Hiring is slow: many developers hate pairing&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;-&lt;/strong&gt; Poor new hire retention

&lt;ul&gt;
&lt;li&gt;Some love the &lt;em&gt;idea&lt;/em&gt; of pairing, not the &lt;em&gt;practice&lt;/em&gt; of pairing; they discover that and leave&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;+&lt;/strong&gt; Low employee churn: those that love pairing stick around far longer than industry average&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;No task ownership

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;-&lt;/strong&gt; Less emotional reward when completing a task&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;+&lt;/strong&gt; Less in-fighting about typical &amp;lsquo;code-ownership&amp;rsquo; bike-shed issues&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;+&lt;/strong&gt; No one cares if a task is rejected by QA&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Rapid pair-switching can cause design churn on a task

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;-&lt;/strong&gt; Tasks can take longer to complete&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;+&lt;/strong&gt; Tough tasks get prototyped several times and seen by whole team&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We&amp;rsquo;ve found this set of trade-offs works very well with our team. The team is
ten developers all doing active development on a 3.4 million line enterprise
application. Our team has a wide set of skills and skill ranges.&lt;/p&gt;

&lt;h2 id=&#34;how-to-get-started:bd97cfb3b628f77ac97d1d5cdf96fc97&#34;&gt;How To Get Started&lt;/h2&gt;

&lt;p&gt;This system works best with a given a set of preconditions.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;The whole team has to love pairing and want to adopt it&lt;/p&gt;

&lt;p&gt;If even a minority of developers hates pairing, it will be tortuous to force
them to do it. In our experience, &amp;gt;80% of developer hate pairing. It would
be better to split the team and codebase. Forcing even a single developer to
pair can be disastrous for morale and productivity. No one wants to pair
with someone who is sullen and bitter. When pairing, misery cannot be
hidden.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Management has to accept not having assigned tasks&lt;/p&gt;

&lt;p&gt;Assigning tasks reduces the beneficial effects of pair switching. Typically
the assigned developer ends up &amp;ldquo;doing all the work with an observer&amp;rdquo;. This
is much less effective. The &amp;ldquo;observer&amp;rdquo; ends up tuning out, since the
assignee &amp;ldquo;probably has it figured out&amp;rdquo;.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Proficiency at pairing is a discrete skill&lt;/p&gt;

&lt;p&gt;Many seasoned developers find themselves awkward and uncomfortable when
pairing for the first few months. Pairing cannot be assessed in any
meaningful way by just &amp;ldquo;trying it for a week&amp;rdquo; anymore than typing can be
assessed over hand-writing in just a week. Feelings of discomfort and
awkwardness in the first few months are completely normal and should not be
the criteria used to decide to continue the practice.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Let any pair make any decision&lt;/p&gt;

&lt;p&gt;Any pair should be authorized to make any decision to implement their
current task. They must however be ready to have that decision undone or
changed if the next pair finds it was too large, a poor design, out of
scope, etc.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Accept that others are better than you&lt;/p&gt;

&lt;p&gt;When trying out pairing, productivity doesn&amp;rsquo;t have to drop! Many developers
at first are uncomfortable by the rapid speed. The law of averages says half
the developers on the team will find their pair going much faster than they
are used to! These feelings of inadequacy often lead to developers wanting
to discontinue the practice. Over time, everyone realizes that it is okay to
not be the fastest, and instead take self-worth in what skills they do
bring. Maybe they are not the fastest, but they are good at catching little
details, etc.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;As a development system, this absolutely cannot be handed down from management.
It has to be implemented &amp;ldquo;by the people and for the people&amp;rdquo;.&lt;/p&gt;

&lt;h2 id=&#34;conclusion:bd97cfb3b628f77ac97d1d5cdf96fc97&#34;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;We have seen promiscuous pairing completely change our organization. As a team,
we accomplish far more than we would otherwise. We are able to tackle new
systems, languages, and tools with ease. When someone learns a new valuable
technique, it spreads organically through the team.&lt;/p&gt;

&lt;p&gt;Feel free to tweet at me if you have any questions or clarifications!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Vim Refactoring Patterns</title>
      <link>http://deliberate-software.com/vim-refactoring-patterns/</link>
      <pubDate>Wed, 22 Jun 2016 00:00:00 +0000</pubDate>
      
      <guid>http://deliberate-software.com/vim-refactoring-patterns/</guid>
      <description>

&lt;p&gt;Editor macros are a secret weapon for editing text. While they are hard to
learn, no other tool offers such broad speed and power for automating changes. A
skilled macro wielder can make huge changes to a codebase with ease.&lt;/p&gt;

&lt;p&gt;Here are some inspirational patterns to demonstrate major structural
refactorings using Vim macros and search/replace commands.&lt;/p&gt;

&lt;!-- # Macro Saving --&gt;

&lt;!-- When you build a complex macro and want to save it for later, just save it off --&gt;

&lt;!-- to a file. Since a macro is just a list of commands to execute, you can copy and --&gt;

&lt;!-- paste macros into registers just like text: --&gt;

&lt;!-- * ```&#34;qp``` - Paste the &#39;q&#39; register contents --&gt;

&lt;!-- * ```&#34;qy``` - Insert selected text into the &#39;q&#39; register --&gt;

&lt;h1 id=&#34;reorder-a-list-of-numbers:1368fb58571a0f824354ae8f514a14fb&#34;&gt;Reorder A List Of Numbers&lt;/h1&gt;

&lt;p&gt;A change left me with a file with unordered numbers. The numbers needed to be
increasing, without changing the actual order of the lines. Macros are my first
choice to accomplish a repeated action.&lt;/p&gt;

&lt;p&gt;&lt;img class=&#34;pull-left&#34; src=&#34;http://deliberate-software.com/images/proto-macro-small.gif&#34;&gt;&lt;/img&gt;
&lt;div class=&#34;container-fluid&#34;&gt;
&lt;/div&gt;&lt;/p&gt;

&lt;p&gt;The commands:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;/;&lt;/code&gt; - Search for &amp;lsquo;;&amp;rsquo;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;n&lt;/code&gt;  - Go to next &amp;lsquo;;&amp;rsquo;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;qq&lt;/code&gt; - Start macro in &amp;lsquo;q&amp;rsquo; register&lt;/li&gt;
&lt;li&gt;&lt;code&gt;db&lt;/code&gt; - Delete backwards&lt;/li&gt;
&lt;li&gt;&lt;code&gt;N&lt;/code&gt;  - Search for previous &amp;lsquo;;&amp;rsquo;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;yb&lt;/code&gt; - Yank backwards&lt;/li&gt;
&lt;li&gt;&lt;code&gt;n&lt;/code&gt;  - Search for next &amp;lsquo;;&amp;rsquo;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;P&lt;/code&gt;  - Paste backwards&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Ctrl+a&lt;/code&gt; - Increment number&lt;/li&gt;
&lt;li&gt;&lt;code&gt;n&lt;/code&gt;  - Go to next &amp;lsquo;;&amp;rsquo;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;n&lt;/code&gt;  - Go to next &amp;lsquo;;&amp;rsquo;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;q&lt;/code&gt;  - Stop Recording macro&lt;/li&gt;
&lt;li&gt;&lt;code&gt;33@q&lt;/code&gt; - Replay 33 times the &amp;lsquo;q&amp;rsquo; macro&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This only took me a few seconds to type! I was able to run this across the whole
file by replaying it the number of lines minus one. Because I saved it in the
&amp;lsquo;q&amp;rsquo; register, I was able to keep it saved for the whole session, which involved
refactoring several dozen similar files. I got to re-use the saved macro at
least 20 more times in that three hour session!&lt;/p&gt;

&lt;p&gt;I don&amp;rsquo;t think this macro is very complex. I would only leave it in the register
for a single session, and remake it in the future if needed. But if I wanted to
save it, running &lt;code&gt;&amp;quot;qp&lt;/code&gt; spits out: &lt;code&gt;dbNybnP^ann&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&#34;container-fluid&#34;&gt;
&lt;/div&gt;

&lt;h1 id=&#34;extract-interface-from-class:1368fb58571a0f824354ae8f514a14fb&#34;&gt;Extract Interface From Class&lt;/h1&gt;

&lt;p&gt;Let&amp;rsquo;s extract an interface from a class. A region-based search and replace is a
great fit for this task. Since we are not matching or reordering several blocks
of text, several search/replace steps work well. First, duplicate the whole
class body to the top of the file. Delete all lines that are not the function
signature lines. Remove all public keywords and add in semicolons on each line
ending. Finish up with adding the interface name and adding it to the class.&lt;/p&gt;

&lt;p&gt;&lt;img class=&#34;pull-left&#34; src=&#34;http://deliberate-software.com/images/interface-small.gif&#34;&gt;&lt;/img&gt;
&lt;div class=&#34;container-fluid&#34;&gt;
&lt;/div&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;11,37t8&lt;/code&gt; - Copy the class body to line 8&lt;/li&gt;
&lt;li&gt;&lt;code&gt;10,35g!/public/d&lt;/code&gt; - Delete every line not containing the word public from
line 10 to 35&lt;/li&gt;
&lt;li&gt;&lt;code&gt;10,12s/public//g&lt;/code&gt; - Delete all the public keywords in lines 10-12&lt;/li&gt;
&lt;li&gt;&lt;code&gt;10,12s/$/;/g&lt;/code&gt; - End each line with a semi-colon&lt;/li&gt;
&lt;li&gt;&lt;code&gt;:8&lt;/code&gt; - Jump to line 8 (and add interface and name)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;:14&lt;/code&gt; - Jump to line 14 (and add interface name)&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&#34;container-fluid&#34;&gt;
&lt;/div&gt;

&lt;h1 id=&#34;change-a-function-signature:1368fb58571a0f824354ae8f514a14fb&#34;&gt;Change a Function Signature&lt;/h1&gt;

&lt;p&gt;Let&amp;rsquo;s change a function signature to move a parameter into a generic and not
have to cast. I want to change a line like this&lt;/p&gt;

&lt;p&gt;&lt;code&gt;m.Name = (NameType)getEnum(typeof(NameType), req.Name);&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;into this:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;m.Name = getEnum&amp;lt;NameType&amp;gt;(req.Name);&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Normally, this is a very manual task, requiring many edits.&lt;/p&gt;

&lt;p&gt;In this case, a search/replace is possible, but probably a lot more complex.
We&amp;rsquo;d have to identify and remove the &lt;code&gt;(NameType)&lt;/code&gt;, locate the opening
&lt;code&gt;(&lt;/code&gt; of the parameter list, put in the &lt;code&gt;NameType&lt;/code&gt; inside a pair of
&lt;code&gt;&amp;lt;&amp;gt;&lt;/code&gt;, then remove the first parameter and comma. A macro record/playback
fits this task easily.&lt;/p&gt;

&lt;p&gt;We perform those steps above, but use the f/F commands to find markers in the
line. This allows the playback to work on any line with the same markers.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://deliberate-software.com/images/generic2.gif&#34;&gt;&lt;/img&gt;
&lt;div class=&#34;container-fluid&#34;&gt;
&lt;/div&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;/getEnum&lt;/code&gt; - Search for &lt;code&gt;getEnum&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;qq&lt;/code&gt; - Start macro in &lt;code&gt;q&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;F(&lt;/code&gt;&lt;code&gt;- Backwards find&lt;/code&gt;&lt;code&gt;(&lt;/code&gt;``&lt;/li&gt;
&lt;li&gt;&lt;code&gt;da(&lt;/code&gt;&lt;code&gt;- Delete whole block in&lt;/code&gt;&lt;code&gt;()&lt;/code&gt;``&lt;/li&gt;
&lt;li&gt;&lt;code&gt;f(&lt;/code&gt; - Find next &lt;code&gt;(&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;P&lt;/code&gt; - Paste backwards one character&lt;/li&gt;
&lt;li&gt;&lt;code&gt;r&amp;gt;&lt;/code&gt; - Replace character with &lt;code&gt;&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;F(&lt;/code&gt; - Backwards find &lt;code&gt;(&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;r&amp;lt;&lt;/code&gt; - Replace character with &lt;code&gt;&amp;lt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;f(&lt;/code&gt; - Find next &lt;code&gt;(&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;l&lt;/code&gt; - Left one character&lt;/li&gt;
&lt;li&gt;&lt;code&gt;df&lt;/code&gt; - Delete up to and including next space&lt;/li&gt;
&lt;li&gt;&lt;code&gt;n&lt;/code&gt; - Search next &lt;code&gt;getEnum&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;q&lt;/code&gt; - Stop macro recording&lt;/li&gt;
&lt;li&gt;&lt;code&gt;5@q&lt;/code&gt; - Replay macro 5 times&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&#34;container-fluid&#34;&gt;
&lt;/div&gt;

&lt;h1 id=&#34;update-sql-query-fields:1368fb58571a0f824354ae8f514a14fb&#34;&gt;Update SQL Query Fields&lt;/h1&gt;

&lt;p&gt;I needed to replace the names in a set of sql queries to sanitize some data to
hand off to a customer. I grabbed a set of
&lt;a href=&#34;http://www.dimfuture.net/starwars/random/generate.php&#34;&gt;Star Wars names&lt;/a&gt; and
copied it to my sql file. They were tab AND newline separated.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://deliberate-software.com/images/rename.gif&#34;&gt;&lt;/img&gt;
&lt;div class=&#34;container-fluid&#34;&gt;
&lt;/div&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;:1,26s/\t//g&lt;/code&gt; - Replace tabs with newlines&lt;/li&gt;
&lt;li&gt;&lt;code&gt;:1,100s/^\W*//g&lt;/code&gt; - Delete leading whitespace&lt;/li&gt;
&lt;li&gt;&lt;code&gt;:1,100s/\W*$//g&lt;/code&gt; - Delete trailing whitespace&lt;/li&gt;
&lt;li&gt;&lt;code&gt;:101&lt;/code&gt; - Jump to line 101&lt;/li&gt;
&lt;li&gt;&lt;code&gt;qq&lt;/code&gt; - Start macro in &lt;code&gt;q&lt;/code&gt; register&lt;/li&gt;
&lt;li&gt;&lt;code&gt;:-100&lt;/code&gt; - Jump 100 lines up&lt;/li&gt;
&lt;li&gt;&lt;code&gt;2yw&lt;/code&gt; - Yank (copy) two words&lt;/li&gt;
&lt;li&gt;&lt;code&gt;:+100&lt;/code&gt; - Jump down 100 lines&lt;/li&gt;
&lt;li&gt;&lt;code&gt;f)&lt;/code&gt; - Jump to next &lt;code&gt;)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;f&#39;&lt;/code&gt; - Jump to next &lt;code&gt;&#39;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;l&lt;/code&gt; - Move right&lt;/li&gt;
&lt;li&gt;&lt;code&gt;vi&#39;&lt;/code&gt; - Select text in quotes&lt;/li&gt;
&lt;li&gt;&lt;code&gt;p&lt;/code&gt; - Paste clipboard&lt;/li&gt;
&lt;li&gt;&lt;code&gt;:+1&lt;/code&gt; - Jump down one line&lt;/li&gt;
&lt;li&gt;&lt;code&gt;q&lt;/code&gt; - End macro&lt;/li&gt;
&lt;li&gt;&lt;code&gt;99@q&lt;/code&gt; - Replay macro 99 times&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;conclusion:1368fb58571a0f824354ae8f514a14fb&#34;&gt;Conclusion&lt;/h1&gt;

&lt;p&gt;I typically use a macro when a search/replace would require using several
groups. I use relative line jumps (&lt;code&gt;:+1&lt;/code&gt;) and liberal uses of the search
(&lt;code&gt;/?&lt;/code&gt; and &lt;code&gt;nN&lt;/code&gt;) and find (&lt;code&gt;fF&lt;/code&gt;) commands for navigating. The search
and find commands let my macro work the same on many different shapes of lines.
I also end each macro with a step for finding the &amp;ldquo;next&amp;rdquo; line to operate on. By
ensuring each iteration finishes by going to the &amp;ldquo;next&amp;rdquo; line, I can repeat the
command with the built-in command repeat without manually executing each one.&lt;/p&gt;

&lt;p&gt;Learning how to record and playback macros is a complex skill. With practice, it
becomes second-nature. My muscle memory grows stronger with each new macro.
Several of these I wrote without a mistake, almost as fast as I can type.&lt;/p&gt;

&lt;p&gt;Like any other skill, the first few dozen times you write a macro it won&amp;rsquo;t work
right, or will mangle the text. That is okay! If you are setting out to learn
macros, allow yourself to be slow while you master the skill. Touch-typing can
be many times faster than hand-writing or hunt-and-peck, but learning takes a
long time. Macros can save you huge amounts of time, but you have to allow
yourself to be slow while you master the skill.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Modern Dependency Injection</title>
      <link>http://deliberate-software.com/modern-di/</link>
      <pubDate>Sat, 11 Jun 2016 00:00:00 +0000</pubDate>
      
      <guid>http://deliberate-software.com/modern-di/</guid>
      <description>

&lt;p&gt;Dependency Injection can be greatly simplified while retaining all of its power.&lt;/p&gt;

&lt;h3 id=&#34;the-unnecessary-boilerplate:c289f8e530077f15501b76fa92fff59a&#34;&gt;The Unnecessary Boilerplate&lt;/h3&gt;

&lt;p&gt;Injection of an interface through the constructor is a common way to replace a
dependency for unit-test mocking. Unfortunately, it is an extremely verbose
pattern.&lt;/p&gt;

&lt;p&gt;Look how much boilerplate is needed just to mock out a call to
&lt;code&gt;DateTime.Now&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;lineno&#34;&gt; 1 &lt;/span&gt;&lt;span class=&#34;hll&#34;&gt;&lt;span class=&#34;k&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;interface&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ICurrentTime&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#34;lineno&#34;&gt; 2 &lt;/span&gt;&lt;span class=&#34;hll&#34;&gt;    &lt;span class=&#34;n&#34;&gt;DateTime&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;GetCurrentTime&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#34;lineno&#34;&gt; 3 &lt;/span&gt;&lt;span class=&#34;hll&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#34;lineno&#34;&gt; 4 &lt;/span&gt;&lt;span class=&#34;hll&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;lineno&#34;&gt; 5 &lt;/span&gt;&lt;span class=&#34;hll&#34;&gt;&lt;span class=&#34;k&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;CurrentTime&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ICurrentTime&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#34;lineno&#34;&gt; 6 &lt;/span&gt;&lt;span class=&#34;hll&#34;&gt;    &lt;span class=&#34;k&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;DateTime&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;GetCurrentTime&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#34;lineno&#34;&gt; 7 &lt;/span&gt;        &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;DateTime&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Now&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;lineno&#34;&gt; 8 &lt;/span&gt;&lt;span class=&#34;hll&#34;&gt;    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#34;lineno&#34;&gt; 9 &lt;/span&gt;&lt;span class=&#34;hll&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#34;lineno&#34;&gt;10 &lt;/span&gt;&lt;span class=&#34;hll&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;lineno&#34;&gt;11 &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;Formatter&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;lineno&#34;&gt;12 &lt;/span&gt;&lt;span class=&#34;hll&#34;&gt;    &lt;span class=&#34;k&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;readonly&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ICurrentTime&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;currentTime&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#34;lineno&#34;&gt;13 &lt;/span&gt;&lt;span class=&#34;hll&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;lineno&#34;&gt;14 &lt;/span&gt;&lt;span class=&#34;hll&#34;&gt;    &lt;span class=&#34;k&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;Formatter&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;CurrentTime&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;())&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{}&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#34;lineno&#34;&gt;15 &lt;/span&gt;&lt;span class=&#34;hll&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;lineno&#34;&gt;16 &lt;/span&gt;&lt;span class=&#34;hll&#34;&gt;    &lt;span class=&#34;k&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;Formatter&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ICurrentTime&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;currentTime&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#34;lineno&#34;&gt;17 &lt;/span&gt;&lt;span class=&#34;hll&#34;&gt;        &lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;currentTime&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;currentTime&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#34;lineno&#34;&gt;18 &lt;/span&gt;&lt;span class=&#34;hll&#34;&gt;    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#34;lineno&#34;&gt;19 &lt;/span&gt;&lt;span class=&#34;hll&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;lineno&#34;&gt;20 &lt;/span&gt;    &lt;span class=&#34;k&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;Format&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;input&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;lineno&#34;&gt;21 &lt;/span&gt;        &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Format&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;{0}: {1}&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;currentTime&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;GetCurrentTime&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;().&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ToString&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(),&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;input&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;lineno&#34;&gt;22 &lt;/span&gt;    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;lineno&#34;&gt;23 &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;We learned to mock this way because Java did not have lambdas at the time the
pattern was invented! Now that both Java and C# have lambdas, the existing DI
pattern can be improved.&lt;/p&gt;

&lt;h3 id=&#34;for-unit-test-mocking:c289f8e530077f15501b76fa92fff59a&#34;&gt;For Unit Test Mocking&lt;/h3&gt;

&lt;p&gt;Thanks to the power of lambdas, the previously highlighted lines (1-19) can be
removed!&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;lineno&#34;&gt;1 &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;Formatter&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;lineno&#34;&gt;2 &lt;/span&gt;    &lt;span class=&#34;k&#34;&gt;internal&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Func&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;DateTime&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;currentTime&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;DateTime&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Now&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;lineno&#34;&gt;3 &lt;/span&gt;
&lt;span class=&#34;lineno&#34;&gt;4 &lt;/span&gt;    &lt;span class=&#34;k&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;Format&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;input&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;lineno&#34;&gt;5 &lt;/span&gt;        &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Format&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;{0}: {1}&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;currentTime&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;().&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ToString&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(),&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;input&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;lineno&#34;&gt;6 &lt;/span&gt;    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;lineno&#34;&gt;7 &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;Much better! The code is easier to read, understand, and &lt;a href=&#34;http://deliberate-software.com/simplemock-unit-test-mocking/&#34;&gt;mock in a unit test&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;for-polymorphism:c289f8e530077f15501b76fa92fff59a&#34;&gt;For Polymorphism&lt;/h3&gt;

&lt;p&gt;If you still need to replace the function with another for polymorphic dispatch,
use constructor injection of just the lambda. Be forewarned, you probably need
this much less than you think!&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;lineno&#34;&gt; 1 &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;Formatter&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;lineno&#34;&gt; 2 &lt;/span&gt;    &lt;span class=&#34;k&#34;&gt;internal&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Func&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;DateTime&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;currentTime&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;lineno&#34;&gt; 3 &lt;/span&gt;
&lt;span class=&#34;lineno&#34;&gt; 4 &lt;/span&gt;    &lt;span class=&#34;k&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;Formatter&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;DateTime&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Now&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{}&lt;/span&gt;
&lt;span class=&#34;lineno&#34;&gt; 5 &lt;/span&gt;
&lt;span class=&#34;lineno&#34;&gt; 6 &lt;/span&gt;    &lt;span class=&#34;k&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;Formatter&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Func&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;DateTime&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;currentTime&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;lineno&#34;&gt; 7 &lt;/span&gt;        &lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;currentTime&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;currentTime&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;lineno&#34;&gt; 8 &lt;/span&gt;    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;lineno&#34;&gt; 9 &lt;/span&gt;
&lt;span class=&#34;lineno&#34;&gt;10 &lt;/span&gt;    &lt;span class=&#34;k&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;Format&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;input&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;lineno&#34;&gt;11 &lt;/span&gt;        &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Format&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;{0}: {1}&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;currentTime&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;().&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ToString&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(),&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;input&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;lineno&#34;&gt;12 &lt;/span&gt;    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;lineno&#34;&gt;13 &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;If you are heavily invested in unit-testing, you might find you need very little
actual interface polymorphism. To see where you really use interface
polymorphism, find the interfaces in your codebase only have a single concrete
class in production. Each interface with a single concrete class is test-only
boilerplate that can safely replaced with a lambda!&lt;/p&gt;

&lt;p&gt;For more examples, &lt;a href=&#34;http://deliberate-software.com/simplemock-unit-test-mocking/&#34;&gt;check out SimpleMock!&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Editor Abstractions</title>
      <link>http://deliberate-software.com/editor-abstractions/</link>
      <pubDate>Mon, 23 May 2016 00:00:00 +0000</pubDate>
      
      <guid>http://deliberate-software.com/editor-abstractions/</guid>
      <description>&lt;p&gt;I was recently inspired by a comment from a respected coworker:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&amp;ldquo;I am just as productive with basic Vim commands as I am with a refactoring
suite like ReSharper.&amp;rdquo;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I have pair-programmed with him for hundreds of hours of C# development. He is
equally productive with both, that much I know. On some tasks he is less
efficient than with ReSharper, on others he is more. To clarify, we use the
superb VsVim inside Visual Studio, so he still relies on the built-in tools for
&amp;ldquo;Auto-complete&amp;rdquo; and &amp;ldquo;Go to Definition&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;The greatest benefit comes when we work in JavaScript, Haskell, or Clojure. His
productivity doesn&amp;rsquo;t drop! &lt;strong&gt;His Vim and grep skills work just as effectively on
any text.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The tools in our editors and IDE&amp;rsquo;s are concrete abstractions. If you have a good
set of abstractions, you can use them to solve any problem. A well-designed
abstraction composes well, and can be combined with others for new utility.&lt;/p&gt;

&lt;p&gt;Consider the sequence abstractions. With only: &lt;code&gt;map&lt;/code&gt;, &lt;code&gt;filter&lt;/code&gt;, and
&lt;code&gt;fold&lt;/code&gt;, you can transform any sequence of data into another shape. Mastering
the three sequence abstractions empowers you to transform any data. The power comes
from how easily they can be combined.&lt;/p&gt;

&lt;p&gt;Editor abstractions are most powerful when they can be composed. You can
replicate most of the functionality of a refactoring suite using basic,
composable text-editing commands. Well-designed editor abstractions can be
recorded, edited, and replayed to transform text in any way you need. While no
replacement for semantic tools like &amp;ldquo;Language Errors&amp;rdquo;, &amp;ldquo;Go to Definition&amp;rdquo;, and
&amp;ldquo;Auto-complete&amp;rdquo;, they are an easy replacement for most other refactorings.&lt;/p&gt;

&lt;p&gt;If you work in multiple languages, composable text-editing commands are a much
better abstraction than those provided by a refactoring suite. Refactoring
suites often have dozens of bespoke commands that only work in certain contexts.
Even the best of these suites are often constrained to a single language. &lt;strong&gt;If
you ever work in more than one language, you will get the most value learning to
rely on abstractions that are constant across all environments.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I find I get the most value with a Vim plugin inside whatever environment
provides the best semantic tools for the language. When building an Android app,
I use IDEAVim inside Android Studio. For C#: VsVim inside Visual Studio. For all
other languages: Evil mode inside Emacs. Instead of hundreds of specialized
commands and contexts, I rely on a few basic abstractions to achieve any text
transformation I can imagine.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Wrangling State In Haskell</title>
      <link>http://deliberate-software.com/haskell-state/</link>
      <pubDate>Wed, 27 Apr 2016 00:00:00 +0000</pubDate>
      
      <guid>http://deliberate-software.com/haskell-state/</guid>
      <description>&lt;p&gt;Part 2 of my series &amp;ldquo;Wrangling State&amp;rdquo;. Part 1
&lt;a href=&#34;http://deliberate-software.com/clojure-state/&#34;&gt;Wrangling State In Clojure&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Haskell is a pure language, so you can only deal with application state by
passing parameters to functions. It is possible to pass parameters more
conveniently, but ultimately, every parameter needs to be passed.&lt;/p&gt;

&lt;p&gt;Here is a simple application for logging a timestamp to a file.&lt;/p&gt;

&lt;p&gt;First, &lt;strong&gt;Pass As Parameter&lt;/strong&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-haskell&#34;&gt;loadFile :: Filename -&amp;gt; IO String
loadFile fileName =
  BS.unpack &amp;lt;$&amp;gt; Str.readFile fileName

saveFile :: Filename -&amp;gt; String -&amp;gt; IO ()
saveFile fileName contents = 
  Str.writeFile fileName (BS.pack contents)

clearFile :: Filename -&amp;gt; IO ()
clearFile fileName = saveFile fileName &amp;quot;&amp;quot;

appendToFile :: Filename -&amp;gt; String -&amp;gt; IO ()
appendToFile fileName stuff = do
    contents &amp;lt;- loadFile fileName
    saveFile fileName (contents++stuff)

main fileName &amp;quot;-c&amp;quot; = clearFile fileName
main fileName &amp;quot;-log&amp;quot; = do
  now &amp;lt;- getCurrentTime
  appendToFile fileName ((show now)++ &amp;quot;\n&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We take in the file name and the command to perform, either to clear the file or
to append a new timestamp. While simple, this gets cumbersome in a large
application. Imagine passing a database connection through every single function
that eventually calls the database.&lt;/p&gt;

&lt;p&gt;Haskell can have unnamed parameters that are not defined in the argument list.
Sometimes this can improve legibility, other times it can worsen it. To use this
feature, the function signature must contain the value missing. The parameter(s)
must be the &amp;ldquo;last&amp;rdquo; parameter(s) to the function for this to work.&lt;/p&gt;

&lt;p&gt;Here is the same code with &lt;strong&gt;Unnamed Parameters&lt;/strong&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-haskell&#34;&gt;loadFile :: Filename -&amp;gt; IO String
loadFile = (liftM BS.unpack) . Str.readFile

saveFile :: String -&amp;gt; Filename -&amp;gt; IO ()
saveFile contents fileName =
  Str.writeFile fileName (BS.pack contents)

clearFile :: Filename -&amp;gt; IO ()
clearFile = saveFile &amp;quot;&amp;quot;

appendToFile :: String -&amp;gt; Filename -&amp;gt; IO ()
appendToFile stuff = (&amp;gt;&amp;gt;=) &amp;lt;$&amp;gt; loadFile &amp;lt;*&amp;gt; ((. (++stuff)) . (flip saveFile))

main fileName &amp;quot;-c&amp;quot; = clearFile fileName
main fileName &amp;quot;-log&amp;quot; = do
  now &amp;lt;- getCurrentTime
  appendToFile ((show now)++ &amp;quot;\n&amp;quot;) fileName
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Not all usages of &lt;code&gt;Filename&lt;/code&gt; can be easily unnamed. We did use it in
&lt;code&gt;loadFile&lt;/code&gt; and &lt;code&gt;clearFile&lt;/code&gt;. It does allow the &amp;ldquo;differences&amp;rdquo; to stand out
more. For example, &lt;code&gt;clearFile&lt;/code&gt; is just a &lt;code&gt;saveFile&lt;/code&gt; with an empty string
for the first parameter. We can see the differences clearly without the extra
parameter adding noise.&lt;/p&gt;

&lt;p&gt;We added it to &lt;code&gt;appendToFile&lt;/code&gt;, using point-free style. I find that it makes
it much harder to scan and read.&lt;/p&gt;

&lt;p&gt;Lastly, it is possible to encode such values into the type. The type of the
function itself can imply a value that can be retrieved. For example, the Reader
type can be combined with the IO type using ReaderT.&lt;/p&gt;

&lt;p&gt;Here is the code using the &lt;strong&gt;Reader Type&lt;/strong&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-haskell&#34;&gt;loadFile :: ReaderT Filename IO String
loadFile = do
  fileName &amp;lt;- ask
  liftIO $ BS.unpack &amp;lt;$&amp;gt; Str.readFile fileName

saveFile :: String -&amp;gt; ReaderT Filename IO ()
saveFile contents = do
  fileName &amp;lt;- ask
  liftIO $ Str.writeFile fileName (BS.pack contents)

clearFile :: ReaderT Filename IO ()
clearFile = saveFile &amp;quot;&amp;quot;

appendToFile :: String -&amp;gt; ReaderT Filename IO ()
appendToFile stuff = do
    contents &amp;lt;- loadFile
    saveFile (contents++stuff)

main fileName &amp;quot;-c&amp;quot; = runReaderT clearFile fileName
main fileName &amp;quot;-log&amp;quot; = do
  now &amp;lt;- getCurrentTime
  runReaderT (appendToFile ((show now)++ &amp;quot;\n&amp;quot;)) fileName
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Notice now how &lt;code&gt;appendToFile&lt;/code&gt; and &lt;code&gt;clearFile&lt;/code&gt; have the signature:
&lt;code&gt;ReaderT Filename IO ()&lt;/code&gt;, indicating that anything below them can &lt;code&gt;ask&lt;/code&gt;
for the Filename, while still performing an &lt;code&gt;IO&lt;/code&gt; action. The &amp;ldquo;entry-point&amp;rdquo;
calls in &lt;code&gt;main&lt;/code&gt; need to be initialized with the &lt;code&gt;runReaderT&lt;/code&gt; and the
&lt;code&gt;Filename&lt;/code&gt; we want to pass.&lt;/p&gt;

&lt;p&gt;For this case, the &lt;code&gt;ReaderT&lt;/code&gt; is substantially more readable. The &amp;ldquo;business
value&amp;rdquo; functions &lt;code&gt;appendToFile&lt;/code&gt; and &lt;code&gt;clearFile&lt;/code&gt; do not have to define
and pass the parameters needed for the lower level functions &lt;code&gt;saveFile&lt;/code&gt; and
&lt;code&gt;loadFile&lt;/code&gt;. &lt;strong&gt;Reader Type&lt;/strong&gt; gives us the value of the &lt;strong&gt;Unnamed
Parameters&lt;/strong&gt; for legibility!&lt;/p&gt;

&lt;p&gt;For something like a database connection that might be used pervasively, the
&lt;strong&gt;Reader Type&lt;/strong&gt; is essential for legible code. The low level functions that need
the &lt;code&gt;Filename&lt;/code&gt; are able to call &lt;code&gt;ask&lt;/code&gt; to retrieve it.&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;Dependencies&lt;/th&gt;
&lt;th&gt;Complexity&lt;/th&gt;
&lt;th&gt;Adding New State&lt;/th&gt;
&lt;th&gt;Best When&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Pass As Parameter&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Explicit&lt;/td&gt;
&lt;td&gt;Less Complex&lt;/td&gt;
&lt;td&gt;Harder&lt;/td&gt;
&lt;td&gt;State only needed in a few functions&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Unnamed Parameter&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Explicit&lt;/td&gt;
&lt;td&gt;Less Complex&lt;/td&gt;
&lt;td&gt;Harder&lt;/td&gt;
&lt;td&gt;Functions can be made more readable&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Reader Type&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Explicit&lt;/td&gt;
&lt;td&gt;More Complex&lt;/td&gt;
&lt;td&gt;Easier&lt;/td&gt;
&lt;td&gt;State needed throughout the application&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Compared to &lt;a href=&#34;http://deliberate-software.com/clojure-state/&#34;&gt;Clojure&lt;/a&gt;, Haskell has no way to
call a function &amp;ldquo;incorrectly&amp;rdquo;. All in-memory state is passed explicitly.&lt;/p&gt;

&lt;p&gt;Haskell&amp;rsquo;s type system prevents the programmer from forgetting state.
Unfortunately, it is still possible to pass as any parameter a value that is
invalid. The explicit nature of Haskell parameters does not prevent passing a
database connection string that does not exist, or a pointer to an incorrectly
setup data structure.&lt;/p&gt;

&lt;p&gt;Haskell is opinionated, and forces you to consider all the state up front before
calling a function. While this makes it harder to forget about state, it also
makes abstractions more leaky. Instead of relying on a function which may or may
not use a database, you must know and pass the database connection.&lt;/p&gt;

&lt;p&gt;Even though I believe the Haskell type system makes abstractions more leaky, I
prefer having to think up front about all my state. I find it makes the code
more clear, and helps me control what functions have access to state.&lt;/p&gt;

&lt;p&gt;Edit: Thanks to &lt;a href=&#34;https://www.reddit.com/r/haskell/comments/4go5dr/wrangling_state_in_haskell/d2j9aqz&#34;&gt;/u/kccqzy&lt;/a&gt; on reddit for offering a way to make
&lt;code&gt;appendToFile&lt;/code&gt; use point-free style.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Hot Loading Angular2 With State</title>
      <link>http://deliberate-software.com/figwheel-angular2/</link>
      <pubDate>Wed, 13 Apr 2016 00:00:00 +0000</pubDate>
      
      <guid>http://deliberate-software.com/figwheel-angular2/</guid>
      <description>&lt;p&gt;In &lt;a href=&#34;http://deliberate-software.com/cljs-angular2/&#34;&gt;&amp;ldquo;Using Angular2 in Clojurescript&amp;rdquo;&lt;/a&gt;
I showed how to get ClojureScript to run an Angular2 template. Basic hotswapping
worked, but state was lost on each load. Tweaking the original demo allows for
figwheel to swap in the template without losing client state.&lt;/p&gt;

&lt;p&gt;Here is a demo of hotswapping with state preservation:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://deliberate-software.com/images/hotswap.gif&#34;&gt;&lt;/img&gt;&lt;/p&gt;

&lt;p&gt;In this demo, we add three things to a list, then change the template that draws
the list. The client state stays in the browser, while the template changes
around it! Amazing!&lt;/p&gt;

&lt;p&gt;To get this working, follow the steps in the
&lt;a href=&#34;http://deliberate-software.com/cljs-angular2/&#34;&gt;&amp;ldquo;Using Angular2 in Clojurescript&amp;rdquo;&lt;/a&gt; first post.&lt;/p&gt;

&lt;p&gt;Replace the env/dev/cljs/dev.cljs contents with this simpler reloader:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-clojure&#34;&gt;(defn mount-component []
  ((.. js/ng -platform -browser -bootstrap)
   (.-AppComponent (.-app js/window))))

(figwheel/watch-and-reload :websocket-url &amp;quot;ws://localhost:3449/figwheel-ws&amp;quot;
                           :on-jsload mount-component)

(defonce only-attach-listener-once
  (.addEventListener js/document &amp;quot;DOMContentLoaded&amp;quot; mount-component))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We now only re-mount the component on figwheel notification. The state is moved
to an atom in the core namespace like so:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-clojure&#34;&gt;(defn get-app []
   (or (.-app js/window)
       (set! (.-app js/window) #js {})))

;; keep state of the component in a defonce atom
(defonce heroes (atom []))

(let [app (get-app)
      c (.Component (.-core js/ng)
                    #js {:selector &amp;quot;my-app&amp;quot;
                         :template (html [:div
                                          [:h1 &amp;quot; Demo&amp;quot;]
                                          [:div [:h2 &amp;quot;Hero List:&amp;quot;]]
                                          &amp;quot;
&amp;lt;input #newHero (keyup.enter)=\&amp;quot;addHero(newHero.value); newHero.value=&#39;&#39; \&amp;quot; &amp;gt;
&amp;lt;button (click)=\&amp;quot;addHero(newHero.value); newHero.value=&#39;&#39; \&amp;quot;&amp;gt;Add&amp;lt;/button&amp;gt;
&amp;lt;ul&amp;gt;&amp;lt;li *ngFor=\&amp;quot;#hero of heroes()\&amp;quot;&amp;gt;{{hero}}&amp;lt;/li&amp;gt;&amp;lt;/ul&amp;gt;
&amp;quot;
                                          ])})
      c (.Class c #js {:constructor (fn [])
                       :addHero (fn [hero]
                                  (swap! heroes #(conj % hero)))
                       :heroes (fn [] @heroes)
                       })]
  (set! (.-AppComponent app) c))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The site now will recompile and reload while preserving the state of the
component. This pattern can be extended to allow certain state to be preserved
while other state is reloaded. In this demo, the state in the &lt;code&gt;#newHero&lt;/code&gt;
field is not preserved, while the &lt;code&gt;heroes&lt;/code&gt; list is.&lt;/p&gt;

&lt;p&gt;I don&amp;rsquo;t have a great story for using hiccups to generate the special angular
tags like &lt;code&gt;*ngFor&lt;/code&gt;, &lt;code&gt;(click)&lt;/code&gt;, or &lt;code&gt;(keyup.enter)&lt;/code&gt;. For this demo, I
left that html as just a raw string.&lt;/p&gt;

&lt;p&gt;Check out the full working example on GitHub &lt;a href=&#34;https://github.com/steveshogren/angular2-cljs/tree/5025e2983ab054c88717c89528b85c7f9aaea851&#34;&gt;here&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Using Angular2 in ClojureScript</title>
      <link>http://deliberate-software.com/cljs-angular2/</link>
      <pubDate>Mon, 11 Apr 2016 00:00:00 +0000</pubDate>
      
      <guid>http://deliberate-software.com/cljs-angular2/</guid>
      <description>

&lt;p&gt;Getting ClojureScript to run Angular2 is not very difficult. Here is a sample
project demonstrating a working Angular2 site using Figwheel for hot-reloading
&lt;a href=&#34;https://github.com/steveshogren/angular2-cljs/tree/ae1a1abfe91a84cb5146931ff731885a2b1d5486&#34;&gt;on GitHub&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;1-install-luminus-cljs:468cef4ba8bc346f91f6a6d4062843b7&#34;&gt;1. Install Luminus +cljs&lt;/h3&gt;

&lt;p&gt;First, setup a basic ClojureScript site using Luminus starter template from
&lt;a href=&#34;http://www.luminusweb.net/docs&#34;&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;lein new luminus cljs-angular2 +cljs
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This builds a great basic starter project with ClojureScript and figwheel
already running. The template uses Reagent and React, which are excellent, but
we want Angular2!&lt;/p&gt;

&lt;h3 id=&#34;2-replace-figwheel-site-loader:468cef4ba8bc346f91f6a6d4062843b7&#34;&gt;2. Replace Figwheel Site Loader&lt;/h3&gt;

&lt;p&gt;Open the env/dev/cljs/dev.cljs file, which starts the site when running from
development.&lt;/p&gt;

&lt;p&gt;Replace the call to start a figwheel watcher with this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-clojurescript&#34;&gt;(defn reload []
  (core/init!)
  ((.. js/ng -platform -browser -bootstrap)
   (.-AppComponent (.-app js/window))))

(figwheel/watch-and-reload :websocket-url &amp;quot;ws://localhost:3449/figwheel-ws&amp;quot;
                           :on-jsload reload)

(core/init!)
(defonce only-attach-listener-once
  (.addEventListener js/document &amp;quot;DOMContentLoaded&amp;quot;
                     (fn []
                       ((.. js/ng -platform -browser -bootstrap)
                        (.-AppComponent (core/get-app))))))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The defonce will make sure I accidentally don&amp;rsquo;t attach the same event listener
twice when re-evaluating files at the repl.&lt;/p&gt;

&lt;h3 id=&#34;3-make-angular2-component:468cef4ba8bc346f91f6a6d4062843b7&#34;&gt;3. Make Angular2 Component&lt;/h3&gt;

&lt;p&gt;Replace the src-cljs/cljs-angular2/core.cljs file with this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-clojurescript&#34;&gt;(ns cljs-angular2.core
  (:require-macros [hiccups.core :as hiccups :refer [html]]))

(defn get-app []
   (or (.-app js/window)
       (set! (.-app js/window) #js {})))

(defn init! []
  (let [app (get-app)
        c (.Component (.-core js/ng)
                      #js {:selector &amp;quot;my-app&amp;quot;
                           :template (html [:div
                                            [:h1 &amp;quot;My first Angular 2 app&amp;quot;]
                                            [:div [:h2 &amp;quot;test&amp;quot;]]
                                            [:div [:h3 &amp;quot;test2&amp;quot;]]])})
        c (.Class c #js {:constructor (fn [])})]
    (set! (.-AppComponent app) c)))

&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;4-add-angular2-dependencies:468cef4ba8bc346f91f6a6d4062843b7&#34;&gt;4. Add Angular2 Dependencies&lt;/h3&gt;

&lt;p&gt;Add a package.json file into resources/public/ and fill it with this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{
  &amp;quot;name&amp;quot;: &amp;quot;angular2-quickstart&amp;quot;,
  &amp;quot;version&amp;quot;: &amp;quot;1.0.0&amp;quot;,
  &amp;quot;scripts&amp;quot;: {
    &amp;quot;start&amp;quot;: &amp;quot;npm run lite&amp;quot;,
    &amp;quot;lite&amp;quot;: &amp;quot;lite-server&amp;quot;
  },
  &amp;quot;license&amp;quot;: &amp;quot;ISC&amp;quot;,
  &amp;quot;dependencies&amp;quot;: {
    &amp;quot;angular2&amp;quot;: &amp;quot;2.0.0-beta.14&amp;quot;,
    &amp;quot;es6-shim&amp;quot;: &amp;quot;^0.35.0&amp;quot;,
    &amp;quot;reflect-metadata&amp;quot;: &amp;quot;0.1.2&amp;quot;,
    &amp;quot;rxjs&amp;quot;: &amp;quot;5.0.0-beta.2&amp;quot;,
    &amp;quot;zone.js&amp;quot;: &amp;quot;0.6.6&amp;quot;
  },
  &amp;quot;devDependencies&amp;quot;: {
    &amp;quot;concurrently&amp;quot;: &amp;quot;^2.0.0&amp;quot;,
    &amp;quot;lite-server&amp;quot;: &amp;quot;^2.2.0&amp;quot;
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now run &lt;code&gt;npm install&lt;/code&gt; from inside the resources/public directory.&lt;/p&gt;

&lt;h3 id=&#34;5-add-hiccups:468cef4ba8bc346f91f6a6d4062843b7&#34;&gt;5. Add Hiccups&lt;/h3&gt;

&lt;p&gt;Modify the project.clj in the root directory to include the &lt;code&gt;hiccups&lt;/code&gt;
dependency so we don&amp;rsquo;t have to write nasty html strings:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-clojure&#34;&gt;:dependencies [[hiccups &amp;quot;0.3.0&amp;quot;]
               ...
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;6-add-dependencies-to-home-html:468cef4ba8bc346f91f6a6d4062843b7&#34;&gt;6. Add Dependencies To Home HTML&lt;/h3&gt;

&lt;p&gt;Add the following to resources/templates/home.html before the line including
&lt;code&gt;{% script &amp;quot;/js/app.js&amp;quot; %}&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;my-app&amp;gt;Loading...&amp;lt;/my-app&amp;gt;
&amp;lt;script src=&amp;quot;node_modules/es6-shim/es6-shim.min.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;script src=&amp;quot;node_modules/angular2/es6/dev/src/testing/shims_for_IE.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;

&amp;lt;script src=&amp;quot;node_modules/angular2/bundles/angular2-polyfills.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;script src=&amp;quot;node_modules/rxjs/bundles/Rx.umd.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;script src=&amp;quot;node_modules/angular2/bundles/angular2-all.umd.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;7-start-site:468cef4ba8bc346f91f6a6d4062843b7&#34;&gt;7. Start Site!&lt;/h3&gt;

&lt;p&gt;Start the site with three tabs open running:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;lein run
lein cljsbuild auto
lein figwheel
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;lein run&lt;/code&gt; command should emit a line showing the port number like:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[2016-04-10 16:16:51,326][INFO][cljs-angular2.core] server started on port: 3000
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Just open your browser to &lt;code&gt;localhost:3000&lt;/code&gt; where 3000 is the port number
from the &lt;code&gt;lein run&lt;/code&gt; command. Try to modify the core.cljs file to have a new
template, and the site should automatically refresh with the new changes! If
that doesn&amp;rsquo;t work, make sure you are running both the cljsbuild on auto and
figwheel processes.&lt;/p&gt;

&lt;p&gt;Easy as that!&lt;/p&gt;

&lt;p&gt;If you get stuck, I checked in a working version &lt;a href=&#34;https://github.com/steveshogren/angular2-cljs/tree/ae1a1abfe91a84cb5146931ff731885a2b1d5486&#34;&gt;on GitHub&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Wrangling State In Clojure</title>
      <link>http://deliberate-software.com/clojure-state/</link>
      <pubDate>Tue, 29 Mar 2016 00:00:00 +0000</pubDate>
      
      <guid>http://deliberate-software.com/clojure-state/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;&amp;ldquo;Clojure is immutable, so you can&amp;rsquo;t change anything, how useless!&amp;rdquo;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Immutable languages make application state an interesting concept.&lt;/p&gt;

&lt;p&gt;In Clojure, you can deal with application state in two main ways. The first way
is to pass the state around as parameters to your functions. An example of
&lt;strong&gt;Pass As Parameter&lt;/strong&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-clojure&#34;&gt;(defn delete! [db-con table id]
  (jdbc/delete! db-con table [&amp;quot;id=?&amp;quot; id]))

;; valid-for-delete omitted

(defn delete-user [db-con user-id]
  (if (valid-for-delete db-con &amp;quot;user&amp;quot; user-id)
    (delete! db-con &amp;quot;user&amp;quot; user-id)))

(defn -main [&amp;amp; [connection-string user-id]]
  (let [db-con (make-connection connection-string)]
    (delete-user db-con user-id)))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This requires every function that eventually accesses a database to also have
the database connection. The trade-off is one of simplicity: it is easier to
test and interact with code that takes all of its dependencies as parameters.&lt;/p&gt;

&lt;p&gt;The alternative is to set a thread-safe value somewhere and give the underlying
code access to it. In Clojure, the &lt;code&gt;atom&lt;/code&gt; primitive is the first choice for
this. A common misconception is that Clojure prevents all mutation. The
&lt;code&gt;atom&lt;/code&gt; primitive can be mutated, it just has to be done with a special
&lt;code&gt;swap!&lt;/code&gt; function. Let&amp;rsquo;s call this: &lt;strong&gt;Mutate Shared Location&lt;/strong&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-clojure&#34;&gt;(def db-con (atom nil))

(defn delete! [table id]
  (jdbc/delete! @db-con table [&amp;quot;id=?&amp;quot; id]))

;; valid-for-delete omitted

(defn delete-user [user-id]
  (if (valid-for-delete &amp;quot;user&amp;quot; user-id)
    (delete! &amp;quot;user&amp;quot; user-id)))

(defn -main [&amp;amp; [connection-string user-id]]
  (swap! db-con (fn [old] (make-connection connection-string)))
  (delete-user user-id))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;atom&lt;/code&gt; allows us to not have to pass around the state. We mutate
&lt;code&gt;db-con&lt;/code&gt; with the connection parameters before calling any database accessing
functions. Unfortunately, this sets up an implicit dependency: &lt;code&gt;delete!&lt;/code&gt;
will only work if the &lt;code&gt;db-con&lt;/code&gt; atom was setup beforehand.&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;Dependencies&lt;/th&gt;
&lt;th&gt;Correctly Call Function&lt;/th&gt;
&lt;th&gt;Adding New State&lt;/th&gt;
&lt;th&gt;Best When&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Pass As Parameter&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Explicit&lt;/td&gt;
&lt;td&gt;Easier&lt;/td&gt;
&lt;td&gt;Harder&lt;/td&gt;
&lt;td&gt;State Values Change Frequently&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Mutate Shared Location&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Implicit&lt;/td&gt;
&lt;td&gt;Harder&lt;/td&gt;
&lt;td&gt;Easier&lt;/td&gt;
&lt;td&gt;State Values Change Rarely&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;strong&gt;Mutate Shared Location&lt;/strong&gt; might look familiar, in a lot of other languages it
is implemented with the Singleton Design Pattern. Often a Singleton class will
act as the mutable shared location for storing state.&lt;/p&gt;

&lt;p&gt;When adding new application state, I typically default to &lt;strong&gt;Pass As Parameter&lt;/strong&gt;
as my first choice. When &lt;strong&gt;Pass As Parameter&lt;/strong&gt; grows costly, I fall back to
&lt;strong&gt;Mutate Shared Location&lt;/strong&gt;. &lt;strong&gt;Pass As Parameter&lt;/strong&gt; works best when the value
changes regularly.&lt;/p&gt;

&lt;p&gt;An exception would be something as ubiquitous as a database connection in a CRUD
application. A CRUD application will typically need a database connection at
every leaf node, and it rarely changes, so I will use &lt;strong&gt;Mutate Shared Location&lt;/strong&gt;
from the start.&lt;/p&gt;

&lt;p&gt;With these two ways of passing application state, we are offered the flexibility
to choose the best tool for the job.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>When Self-Organizing Teams Are Effective</title>
      <link>http://deliberate-software.com/self-organizing-teams/</link>
      <pubDate>Wed, 16 Mar 2016 00:00:00 +0000</pubDate>
      
      <guid>http://deliberate-software.com/self-organizing-teams/</guid>
      <description>

&lt;blockquote&gt;
&lt;p&gt;&amp;ldquo;Great, now instead of programmers, we are politicians&amp;rdquo;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;A self-organizing team can be one of the most effective ways to build a team of
high-quality professionals.&lt;/p&gt;

&lt;h2 id=&#34;what-is-a-self-organizing-team:c36738b5d4cff136bd50ed28a796f49d&#34;&gt;What Is A Self-Organizing Team?&lt;/h2&gt;

&lt;p&gt;I have managed several self-organizing teams over the last few years. They are
expected to follow these tenets:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The whole team organizes themselves to best meet the business needs&lt;/li&gt;
&lt;li&gt;Each team chooses their practices and working agreements&lt;/li&gt;
&lt;li&gt;All technical and organizational decisions are driven through consensus&lt;/li&gt;
&lt;li&gt;Product owners determine &amp;ldquo;what&amp;rdquo; happens, the team determines &amp;ldquo;how&amp;rdquo;&lt;/li&gt;
&lt;li&gt;All staff participates in a culture of high-quality development&lt;/li&gt;
&lt;li&gt;Systems and practices are designed to maintain the greatest productivity across
the next decade&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;when-it-works-well:c36738b5d4cff136bd50ed28a796f49d&#34;&gt;When It Works Well&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Small teams&lt;/li&gt;
&lt;li&gt;Highly skilled workers&lt;/li&gt;
&lt;li&gt;Need for high-quality software&lt;/li&gt;
&lt;li&gt;Business need for continuous and stable productivity for 5+ years&lt;/li&gt;
&lt;li&gt;Buy-in from management that &amp;ldquo;productivity is worth feeling out of control&amp;rdquo;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Self-organizing teams work best when most people on your team are eager to do
more, be more, and learn more. A team of such developers will find a single
leader to be a bottleneck. Running every idea past a single decision maker will
impair their abilities to grow and gain critical thinking skills.&lt;/p&gt;

&lt;h2 id=&#34;case-study:c36738b5d4cff136bd50ed28a796f49d&#34;&gt;Case Study&lt;/h2&gt;

&lt;p&gt;I currently lead a self-organizing team of ten developers. We alone actively
develop in a 4.6 million line codebase. The codebase is over 10 years old, and
the entire team has turned over twice since the project started. This is no
maintenance project, this quarter we converted the main calculation engine
(~600KLOC) to allow calculations to be parallelized across dozens of nodes for a
substantial increase in throughput.&lt;/p&gt;

&lt;p&gt;Our team has recently been recognized as producing the most business value with
the highest quality across our +700 person software company. Our CEO and SVP of
Product have highlighted our recent accolades. I am certain this was only
possible because of the intrinsic motivation of our staff caused by
self-organization.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;We actively develop in a 10 year old codebase sized at ~460KLOC per developer&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;When deciding on working agreements, the original team voted on strict
pair-programming, frequent pair switches
(&lt;a href=&#34;http://csis.pace.edu/~grossman/dcs/XR4-PromiscuousPairing.pdf&#34;&gt;promiscuous pairing&lt;/a&gt;),
and test-driven development. Each subsequent iteration of the team has continued
to vote for these agreements. We believe that it is one of the easiest ways to
keep a team capable in such an enormous codebase. Randomized pairing and 2-8
hour switching prevents siloing of knowledge.&lt;/p&gt;

&lt;p&gt;In any other company, our least experienced developers would be team leads and
architects; and our most experienced developers would be CTO&amp;rsquo;s. They&amp;rsquo;ve gotten
this experience by living it. In case you think we&amp;rsquo;ve hired a team of seasoned
graybeards, our average developer only has six years of experience.&lt;/p&gt;

&lt;p&gt;Each member of our team is responsible for &amp;ldquo;being the lead&amp;rdquo; in certain ways. The
individual&amp;rsquo;s own interests guide them to develop expertise in subjects. By being
an expert, others listen to them, so they often have an attentive audience when
speaking on their specialties. This positive feedback loop encourages additional
research.&lt;/p&gt;

&lt;h2 id=&#34;how-to-start:c36738b5d4cff136bd50ed28a796f49d&#34;&gt;How to Start&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Tip:&lt;/strong&gt; The most important way to build such a team is to allow them to fail&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The team must be allowed to face the consequences of their actions in a safe
space. If a refactoring project goes badly, the team should have the individual
clean up their mess. When someone is spending time on a project that doesn&amp;rsquo;t
align with the goals of the business, the team should speak with them. When a
developer successfully campaigns for a change that increases productivity, it
should be celebrated. In all cases, strive to have your office be a safe place
to fail.&lt;/p&gt;

&lt;p&gt;Every time someone in authority demands the team do something different, it
reduces the intrinsic motivation of the team. Each demand teaches the team
members that they don&amp;rsquo;t have to be responsible, someone else will take care of
the &amp;ldquo;important&amp;rdquo; things for them. Treat such demands with the utmost care, only
making demands extremely infrequently.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Tip:&lt;/strong&gt; Fewer demands allows for greater intrinsic motivation&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;A self-organizing team is very much like a democracy. The team is expected and
entrusted to organize around the needs of the business. Decisions should be made
by consensus. Very rarely should an &amp;ldquo;override&amp;rdquo; be needed from management.&lt;/p&gt;

&lt;h1 id=&#34;conclusion:c36738b5d4cff136bd50ed28a796f49d&#34;&gt;Conclusion&lt;/h1&gt;

&lt;p&gt;Self-organizing teams are one of the most effective ways to manage a
high-performing group. The team benefits from the best aspects of each member.
Team members &amp;ldquo;grow up&amp;rdquo; quickly, as they are exposed to others around them who
behave like trusted professionals. Each developer becomes intrinsically
motivated, outperforming their peers in similar command and control teams.&lt;/p&gt;

&lt;h1 id=&#34;replies:c36738b5d4cff136bd50ed28a796f49d&#34;&gt;Replies&lt;/h1&gt;

&lt;p&gt;&lt;a href=&#34;https://lobste.rs/u/petergao&#34;&gt;PeterGao&lt;/a&gt; on lobste.rs
&lt;a href=&#34;https://lobste.rs/s/1fhkxo/when_self-organizing_teams_are_effective/comments/e3niex#c_e3niex&#34;&gt;pointed out&lt;/a&gt;
that undergrad school projects often see everyone grouping by skill, with all
the best in a group together. I too have had bad luck with undergrad CS school
projects, especially since at the time I was a C-performer. School projects mix
a fairly homogeneous group of immature students with a subtly different goal:
“pick a few other people, your work will be compared to everyone else’s”.
Self-selected grouping by skill makes sense, it’s effectively a competition. One
of the recommended alterations for group projects is “your grade is the average
grade of all the group projects”. Suddenly, you won’t see those teams separating
by skill. Instead students will organize with a team mix as even as possible,
with cross-communication (and likely rotation) happening to ensure high quality
across all the projects. Bam, now you’ve got my office ;)&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Avoid Pop Culture Architecture</title>
      <link>http://deliberate-software.com/pop-culture-architecture/</link>
      <pubDate>Fri, 19 Feb 2016 00:00:00 +0000</pubDate>
      
      <guid>http://deliberate-software.com/pop-culture-architecture/</guid>
      <description>

&lt;blockquote&gt;
&lt;p&gt;&amp;ldquo;ActiveRecord is so hot right now!&amp;rdquo; - comment in 2006&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Pop Culture Architecture is the current &amp;ldquo;fad&amp;rdquo; of the day. I have seen it be
microservices, business capabilities, CQRS, service-oriented architecture,
Domain-Driven Design, test driven development, ORMs, ActiveRecord, and MVC. Each
of these have been fashionable at some point.&lt;/p&gt;

&lt;p&gt;Fashion is ultimately a signaling mechanism for status. We are attracted to
fashionable architectures because they signal we have worked on elite teams. The
more difficult or costly the trade-offs of the architecture, the more elite and
special our team must have been to implement it successfully.&lt;/p&gt;

&lt;h2 id=&#34;example-microservices:5f95d372c851097c31e5c149858c384a&#34;&gt;Example: Microservices&lt;/h2&gt;

&lt;p&gt;Microservices is a current fashionable design. Microservices have very clear
pros and cons. They come with the ability to have a huge team or a fragmented
deployment that potentially allows for horizontal scaling. For that ability, you
will pay the immense costs: loss of strong consistency and transactions, a
labyrinthine operational footprint and deployment, increased communication
effort, expensive integration testing, and a code base that takes longer to
program. &lt;a href=&#34;http://martinfowler.com/articles/microservice-trade-offs.html&#34;&gt;(1)&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;If you have a small team or system that does not need horizontal scaling on
every single component, a microservice architecture is unlikely to solve your
communication or trust issues. You will spend dollars on deployment, consistency
issues, distributed debugging, and basic programming just to save a penny on
communication and teamwork.
&lt;a href=&#34;http://www.stackbuilders.com/news/the-hidden-costs-of-microservices&#34;&gt;(2)&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;For most teams, the logical conclusion probably will be: a microservice
architecture solves problems we don&amp;rsquo;t have.&lt;/p&gt;

&lt;p&gt;Microservices remain fashionable because they indicate work at the size and
scale of a handful of elite companies. You would only likely encounter a couple
hundred companies in the world that have a development staff so large or loads
so high as to truly require such a system. Because of the rarity of actual need,
it is a perfect signaling mechanism for status.&lt;/p&gt;

&lt;p&gt;Saying that you implemented a microservice architecture implies &amp;ldquo;my team was so
large or my product so popular, my team could afford to pay almost any cost to
meet the demand.&amp;rdquo;&lt;/p&gt;

&lt;p&gt;Carefully consider your architecture decisions. Do not allow fashion to dictate
your choices. Take pride in selecting the appropriate architecture for the
project, no matter how unpopular.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Haskell is the Dark Souls of Programming</title>
      <link>http://deliberate-software.com/haskell-is-the-dark-souls-of-programming/</link>
      <pubDate>Sat, 06 Feb 2016 00:00:00 +0000</pubDate>
      
      <guid>http://deliberate-software.com/haskell-is-the-dark-souls-of-programming/</guid>
      <description>

&lt;p&gt;Please don&amp;rsquo;t hit me, Haskell does a great job of that already.&lt;/p&gt;

&lt;p&gt;I love Haskell for the same reasons I love Dark Souls. Fantastic and inscrutable
lore, a great &lt;del&gt;combat&lt;/del&gt; type system, a cliff-wall difficulty curve, and
unending punishment.&lt;/p&gt;

&lt;p&gt;I want to collect some statistics from the GitHub API.&lt;/p&gt;

&lt;h3 id=&#34;step-one-stack:6807ae504e3906e54fafcf1fb117cd62&#34;&gt;Step One - Stack&lt;/h3&gt;

&lt;p&gt;I download stack and start a project:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;&amp;gt; cd /home/jack/programming &amp;amp;&amp;amp; stack new github-stats &amp;amp;&amp;amp; cd github-stats
Downloading template &amp;quot;new-template&amp;quot; to create project &amp;quot;github-stats&amp;quot; in github-stats/ ... 
 ......
All done.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So far so good. Does it work?&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;  &amp;gt; stack build &amp;amp;&amp;amp; stack exec -- github-stats-exe 
   github-stats-0.1.0.0: configure
   ..... 
   Registering github-stats-0.1.0.0...
   someFunc
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Awww yisss. This is going to be so easy!&lt;/p&gt;

&lt;h3 id=&#34;step-two-https-get-request:6807ae504e3906e54fafcf1fb117cd62&#34;&gt;Step Two - HTTPS GET Request&lt;/h3&gt;

&lt;p&gt;&lt;img src=&#34;http://deliberate-software.com/images/tomb_of_the_giants.gif&#34;&gt;&lt;/img&gt;&lt;/p&gt;

&lt;p&gt;Now I need to query the GitHub API. Not my first time to the rodeo, I generate a
personal access token from GitHub and copy it to a local file. What query should
I run first? How about the count for all ASM tetris repositories? Poking around
the &lt;a href=&#34;https://developer.github.com/v3/search/#search-repositories&#34;&gt;docs&lt;/a&gt; comes up
with:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;GET https://api.github.com/search/repositories?q=tetris+language:assembly&amp;amp;sort=stars&amp;amp;order=desc
User-Agent: steveshogren
Authorization: token PUT_TOKEN_HERE
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;{.. &amp;ldquo;total_count&amp;rdquo;: 354}&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Easy life. Now how do you GET a resource in Haskell? Ah,
&lt;a href=&#34;https://hackage.haskell.org/package/HTTP-4000.3.2/docs/Network-HTTP.html&#34;&gt;Network.HTTP&lt;/a&gt;!
I copy the front page sample into &lt;code&gt;src/Lib.hs&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-haskell&#34;&gt;module Lib
    ( someFunc
    ) where

x = simpleHTTP (getRequest &amp;quot;https://www.github.com/&amp;quot;) &amp;gt;&amp;gt;= fmap (take 100) . getResponseBody

someFunc :: IO ()
someFunc = 
   print x
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So simple! This is why laugh at my NodeJS loving friends!&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;&amp;gt; stack build
src/Lib.hs:5:5: Not in scope: ‘simpleHTTP’
src/Lib.hs:5:17: Not in scope: ‘getRequest’
src/Lib.hs:5:77: Not in scope: ‘getResponseBody’
Compilation failed.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Doesn&amp;rsquo;t compile. Durp, hackage is a package library, I need to add this to my
cabal. What is the name of the package? HTTP-4000? HTTP-4000.3.2? Nothing in
hackage seems to indicate what goes into the cabal file. I discover it is just
HTTP through trial and error. I update my cabal file&amp;hellip; in all three
build-depends&amp;hellip;?&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-haskell&#34;&gt;  build-depends:       base &amp;gt;= 4.7 &amp;amp;&amp;amp; &amp;lt; 5
                       , HTTP
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Hrm, same error.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;&amp;gt; stack build
src/Lib.hs:5:5: Not in scope: ‘simpleHTTP’
src/Lib.hs:5:17: Not in scope: ‘getRequest’
src/Lib.hs:5:77: Not in scope: ‘getResponseBody’
Compilation failed.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Oh, durp, I&amp;rsquo;d need an import. (WHY ISN&amp;rsquo;T THIS IN THE CODE SAMPLE?!) Also, print
doesn&amp;rsquo;t work, I need &lt;code&gt;putStrLn&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-haskell&#34;&gt;import Network.HTTP

x = simpleHTTP (getRequest &amp;quot;https://www.github.com/&amp;quot;) &amp;gt;&amp;gt;= fmap (take 100) . getResponseBody

someFunc :: IO ()
someFunc = x &amp;gt;&amp;gt;= putStrLn
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here goes!!!&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt; &amp;gt; stack build &amp;amp;&amp;amp; stack exec -- github-stats-exe
github-stats-exe: user error (https not supported)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Wat. Further inspection of the docs shows a line WAAY DOWN in paragraph 5.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;NOTE: This package only supports HTTP;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&#34;http://deliberate-software.com/images/nope_better.gif&#34;&gt;&lt;/img&gt;&lt;/p&gt;

&lt;p&gt;When &lt;del&gt;playing Dark Souls&lt;/del&gt;programming Haskell, sometimes the best move
is to run away. I search again. &lt;code&gt;haskell https request&lt;/code&gt; returns
&amp;ldquo;http-conduit&amp;rdquo; as the best choice. After adding http-conduit to my cabal, I come
up with this beast without any surprises:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-haskell&#34;&gt;query :: IO String
query = do
    initReq &amp;lt;- parseUrl &amp;quot;https://api.github.com/search/repositories&amp;quot;
    let r = initReq
                   { method = &amp;quot;GET&amp;quot;
                    , requestHeaders = [(hUserAgent, &amp;quot;steveshogren&amp;quot;)
                                      , (hAuthorization, &amp;quot;token PUT_TOKEN_HERE&amp;quot;)]}
    let request = setQueryString [(&amp;quot;q&amp;quot;, Just &amp;quot;tetris+language:assembly&amp;quot;)
                                 ,(&amp;quot;order&amp;quot;, Just &amp;quot;desc&amp;quot;)
                                 ,(&amp;quot;sort&amp;quot;, Just &amp;quot;stars&amp;quot;)] r
    manager &amp;lt;- newManager tlsManagerSettings
    res &amp;lt;- httpLbs request manager
    return . show . responseBody $ res

someFunc :: IO ()
someFunc = do
   query &amp;gt;&amp;gt;= putStrLn
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Huzzah! Results! I&amp;rsquo;m getting back a monster string of json data.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&amp;ldquo;\&amp;ldquo;{\\&amp;ldquo;total_count\\&amp;rdquo;:66, &amp;hellip;.}\&amp;rdquo;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&#34;http://deliberate-software.com/images/praisethesun.gif&#34;&gt;&lt;/img&gt;&lt;/p&gt;

&lt;h3 id=&#34;step-three-parsing-json:6807ae504e3906e54fafcf1fb117cd62&#34;&gt;Step Three - Parsing JSON&lt;/h3&gt;

&lt;p&gt;Time to parse this mega JSON string. Aeson seems to be the biggest contender. To
use Aeson and get the total_count value from the return, I needed the following
additions:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-haskell&#34;&gt;{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE DeriveGeneric #-}

import GHC.Generics
import Data.Aeson

data ResultCount = ResultCount {
  total_count :: Int }
  deriving (Generic, Show)

instance ToJSON ResultCount
instance FromJSON ResultCount
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ResultCount allows me to use &lt;code&gt;decode&lt;/code&gt; from aeson instead of &lt;code&gt;show&lt;/code&gt; to
parse the &amp;ldquo;total_count&amp;rdquo; from the JSON response into an Int. Sure enough, it
does!&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-haskell&#34;&gt;{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE DeriveGeneric #-}
module Lib
    ( someFunc
    ) where

import Control.Monad
import Network
import Network.HTTP.Conduit
import Network.HTTP.Types.Header
import GHC.Generics
import Data.Aeson

data ResultCount = ResultCount {
  total_count :: Int }
  deriving (Generic, Show)

instance ToJSON ResultCount
instance FromJSON ResultCount

query :: IO (Maybe Int)
query = do
    initReq &amp;lt;- parseUrl &amp;quot;https://api.github.com/search/repositories&amp;quot;
    let r = initReq
                   { method = &amp;quot;GET&amp;quot;
                    , requestHeaders = [(hUserAgent, &amp;quot;steveshogren&amp;quot;)
                                      , (hAuthorization, &amp;quot;token PUT_TOKEN_HERE&amp;quot;)]}
    let request = setQueryString [(&amp;quot;q&amp;quot;, Just &amp;quot;tetris+language:assembly&amp;quot;)
                                 ,(&amp;quot;order&amp;quot;, Just &amp;quot;desc&amp;quot;)
                                 ,(&amp;quot;sort&amp;quot;, Just &amp;quot;stars&amp;quot;)] r
    manager &amp;lt;- newManager tlsManagerSettings
    res &amp;lt;- httpLbs request manager
    return . liftM total_count . decode . responseBody $ res

someFunc :: IO ()
someFunc = query &amp;gt;&amp;gt;= print
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Puts out: &lt;code&gt;Just 66&lt;/code&gt;. Success! Wait. 66 isn&amp;rsquo;t the same count I got when
running from the browser. Check again. Sure enough, browser comes up with a
totally different count.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://deliberate-software.com/images/come_at_me_bro.gif&#34;&gt;&lt;/img&gt;&lt;/p&gt;

&lt;p&gt;Maybe the query request isn&amp;rsquo;t correct? Adding a &lt;code&gt;print request&lt;/code&gt; on line 31
after building the request shows:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-haskell&#34;&gt;Request {
  host                 = &amp;quot;api.github.com&amp;quot;
  port                 = 443
  secure               = True
  requestHeaders       = [(&amp;quot;User-Agent&amp;quot;,&amp;quot;steveshogren&amp;quot;),(&amp;quot;Authorization&amp;quot;,&amp;quot;token PUT_TOKEN_HERE&amp;quot;)]
  path                 = &amp;quot;/search/repositories&amp;quot;
  queryString          = &amp;quot;?q=tetris%2Blanguage%3Aassembly&amp;amp;order=desc&amp;amp;sort=stars&amp;quot;
  method               = &amp;quot;GET&amp;quot;
  proxy                = Nothing
  rawBody              = False
  redirectCount        = 10
  responseTimeout      = Just (-3425)
  requestVersion       = HTTP/1.1
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The queryString isn&amp;rsquo;t right! It encoded my &lt;code&gt;+&lt;/code&gt; and &lt;code&gt;:&lt;/code&gt;! After an hour of
reading through docs and researching URL encoding specs, it dawns on me. &lt;code&gt;+&lt;/code&gt;
is an encoded whitespace.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;No face-palm gif could ever represent the shear magnitude of my current
emotions&amp;hellip; You&amp;rsquo;ll have to use your imagination&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I change my query to &lt;code&gt;&amp;quot;tetris language:assembly&amp;quot;&lt;/code&gt; and the right
count comes back! &lt;code&gt;Just 354&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;I finally have something that correctly fetches a count of repositories from
GitHub and parses it into an Int. After over four hours of &lt;del&gt;Dark
Souls&lt;/del&gt;Haskell punishment, we deserve to enjoy a bonfire!&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://deliberate-software.com/images/solaire_sitting.gif&#34;&gt;&lt;/img&gt;&lt;/p&gt;

&lt;h2 id=&#34;edit-bonus-round:6807ae504e3906e54fafcf1fb117cd62&#34;&gt;Edit: Bonus Round!&lt;/h2&gt;

&lt;p&gt;Thanks to
&lt;a href=&#34;http://bitemyapp.com/posts/2016-02-06-haskell-is-not-trivial-not-unfair.html&#34;&gt;Chris Allen&lt;/a&gt;
and
&lt;a href=&#34;https://www.reddit.com/r/programming/comments/44hdl6/haskell_is_the_dark_souls_of_programming/czqaxfu&#34;&gt;/u/JeanParker&lt;/a&gt;
for pointing me towards &lt;a href=&#34;http://www.serpentine.com/wreq/&#34;&gt;wreq&lt;/a&gt;, which weirdly
didn&amp;rsquo;t come up when I looked around for libs yesterday. Yep, it was 6th on the
Google when searching for &lt;code&gt;haskell https get&lt;/code&gt;. &lt;code&gt;Network.HTTP&lt;/code&gt; is the
top three results, and that doesn&amp;rsquo;t even &lt;em&gt;do&lt;/em&gt; https.&lt;/p&gt;

&lt;p&gt;¯\&lt;em&gt;(ツ)&lt;/em&gt;/¯&lt;/p&gt;

&lt;p&gt;Armed with their helpful suggestions, I knocked this out this morning.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-haskell&#34;&gt;import Network.Wreq
import Control.Lens
import Data.Aeson
import Data.Aeson.Lens
import qualified Data.Text as T
import qualified Data.ByteString.Char8 as BS

opts :: String -&amp;gt; String -&amp;gt; Options
opts lang token = defaults &amp;amp; param &amp;quot;q&amp;quot; .~ [T.pack $ &amp;quot;tetris language:&amp;quot; ++ lang]
                        &amp;amp; param &amp;quot;order&amp;quot; .~ [&amp;quot;desc&amp;quot;]
                        &amp;amp; param &amp;quot;sort&amp;quot; .~ [&amp;quot;stars&amp;quot;]
                        &amp;amp; header &amp;quot;Authorization&amp;quot; .~ [BS.pack $ &amp;quot;token &amp;quot; ++ token]

query lang = do
    token &amp;lt;- readFile &amp;quot;token&amp;quot;
    r &amp;lt;- getWith (opts lang token) &amp;quot;https://api.github.com/search/repositories&amp;quot;
    return $ r ^? responseBody . key &amp;quot;total_count&amp;quot; . _Number
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;MUCH better. This includes reading my token from file called &amp;ldquo;token&amp;rdquo; so I don&amp;rsquo;t
accidentally commit it. Also includes building up the different query options
based on inputs, which was the next step. Thanks y&amp;rsquo;all.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://deliberate-software.com/images/solaire_idle.gif&#34;&gt;&lt;/img&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Pixel gifs sourced from
&lt;a href=&#34;http://zedotagger.deviantart.com/gallery/54317550/Dark-Souls&#34;&gt;zedotagger&lt;/a&gt; on
deviantart, thanks zedotagger!&lt;/p&gt;
&lt;/blockquote&gt;
</description>
    </item>
    
    <item>
      <title>Development Disappointment Disorder</title>
      <link>http://deliberate-software.com/development-disappointment-disorder/</link>
      <pubDate>Thu, 04 Feb 2016 00:00:00 +0000</pubDate>
      
      <guid>http://deliberate-software.com/development-disappointment-disorder/</guid>
      <description>

&lt;blockquote&gt;
&lt;p&gt;&amp;ldquo;We&amp;rsquo;ve never had a successful release&amp;rdquo;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;You just finished this really hard feature. The whole thing was worse than
anyone realized. Not only that, but the feature wasn&amp;rsquo;t clearly explained, so you
lost time churning on the actual requirements. Despite all the confusion,
iteration, and technical challenges, you managed to get it working! You look
back, savoring how much you have learned and grown.&lt;/p&gt;

&lt;p&gt;You show it off to the product owner. He barely seems to hear you. His shoulders
slump in disappointment.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&amp;ldquo;Great, but we are still four weeks behind.&amp;rdquo;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Your team is infected with &lt;strong&gt;Development Disappointment Disorder&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;It looks different in every team. The manager who sets unreasonable deadlines
then demands overtime. The project manager who gets angry at every little thing.
Developers who feel they need to point fingers to shift the blame. The boss who
is never happy no matter what is achieved. The team that feels they have never
had a successful release.&lt;/p&gt;

&lt;h2 id=&#34;unreasonable-expectations:4153c418f6ff9c9d005520a12de36a01&#34;&gt;Unreasonable Expectations&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Development Disappointment Disorder is caused by unreasonable expectations.&lt;/strong&gt;
Someone thinks, hopes, or wishes they can get 100 units of productivity from a
team and codebase that only can sustain 30-40 units. They want the impossible,
and no amount of cajoling, pressuring, yelling, or passive aggressive comments
will change reality.&lt;/p&gt;

&lt;p&gt;Productivity is not completely a people problem. Every team has an upper limit
to what they can produce in a system. The human mind has boundaries. Very real
limits exist given the team&amp;rsquo;s size and existing codebases. While new technical
tools and libraries enable more productive teams, these changes often are
hindered by an existing codebase. The team with a multi-million line C# codebase
is not going to get much value from the productivity gains possible with
Haskell&amp;rsquo;s type system.&lt;/p&gt;

&lt;p&gt;You cannot rush software development without incurring a drop in quality,
stability, or maintainability. The work is complex and difficult: every expert
in our field agrees with adages like &amp;ldquo;adding developers to a late project makes
it later.&amp;rdquo;&lt;/p&gt;

&lt;h2 id=&#34;suggestions:4153c418f6ff9c9d005520a12de36a01&#34;&gt;Suggestions&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;For the technical staff:&lt;/strong&gt; How accurate are your estimates? How consistent
is your throughput? Do you regularly under-estimate your features? Do
developers often say, &amp;ldquo;oh, that&amp;rsquo;s only&amp;hellip;&amp;rdquo;? Are some types of features &amp;ldquo;always
late&amp;rdquo;?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You must learn to be blameless in this situation, and that means striving to
  give as accurate an estimate as you can with what you have. Throwing estimates
  out without much thought only makes things worse. How long did a similar
  feature take last time? If you regularly have inaccurate estimates in a
  certain area of the system, put extra care into those estimates, working to
  provide the best estimate you can.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;For the business:&lt;/strong&gt; There is only so many units of productivity that fit
into a given time frame.You need to assess every feature and estimate, and
consider the risk with each.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Acting disappointed, angry, or passive aggressive will not get you more
  features, it will only demotivate the technical staff. You will get more
  consistency, because they will consistently work slower. You will get more
  hours, but each hour will see a
  &lt;a href=&#34;http://www.igda.org/?page=crunchsixlessons&#34;&gt;massive drop in valuable work.&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Acting disappointed, angry, or passive aggressive will not get you more features&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;If you are unhappy with the work produced, you need to consider why. Were you
  told it would be sooner? Did you promise that to someone? What changed since
  then? If the feature isn&amp;rsquo;t actually needed, why did you pick it? If spending
  twice as much made it not worthwhile, was it really a good choice?&lt;/p&gt;

&lt;p&gt;What would happen if you didn&amp;rsquo;t promise &lt;em&gt;when&lt;/em&gt; the features would be done?
  Either way, your promise doesn&amp;rsquo;t change when it will be done, it just adds
  risk to your credibility. Often the only thing to be gained by giving out
  estimates and time-lines is risk. Unless the customer is truly blocked on your
  estimate, simply communicate what you are doing, not when you hope it will be
  done.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Often the only thing to be gained by telling customers an estimate is risk&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;For the team:&lt;/strong&gt; Celebrate your successes. Abolish the notion of a &amp;ldquo;failed
release&amp;rdquo;. Build up a culture that finds little victories throughout the
release.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;With these tools you can fight Development Disappointment Disorder. You can
start to celebrate what you do accomplish. &lt;strong&gt;A team that is energized and motivated will accomplish more.&lt;/strong&gt; The team that celebrates their work will strive for more.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Designing A Compassionate Interview For A High Performing Individual</title>
      <link>http://deliberate-software.com/compassionate-interviewing/</link>
      <pubDate>Mon, 11 Jan 2016 00:00:00 +0000</pubDate>
      
      <guid>http://deliberate-software.com/compassionate-interviewing/</guid>
      <description>

&lt;p&gt;After my post &lt;a href=&#34;http://deliberate-software.com/on-defeat/&#34;&gt;Interview Humiliation&lt;/a&gt;, a number of
people have asked me how I interview compassionately. I strive to make my interviews as
stress-free and respectful as possible while still rendering a yes/no at the end.&lt;/p&gt;

&lt;p&gt;Any good interview process needs to start with goals:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Respect the candidate&amp;rsquo;s time&lt;/li&gt;
&lt;li&gt;Make the candidate comfortable&lt;/li&gt;
&lt;li&gt;Under-skilled candidates should feel no shame&lt;/li&gt;
&lt;li&gt;Both passing and failing candidates should want to tell their friends to
apply&lt;/li&gt;
&lt;li&gt;We should render the same decision if the interview is repeated multiple
times (with different exercises each time)&lt;/li&gt;
&lt;li&gt;The candidate should know the process in advance and not be able to earn a
pass through short term &amp;ldquo;cramming&amp;rdquo;&lt;/li&gt;
&lt;li&gt;The candidate should feel we are all working collaboratively, instead of us
against them&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;the-ideal-candidate:cf61b2cfb55395d828ffadc28b2a9a0d&#34;&gt;The Ideal Candidate&lt;/h2&gt;

&lt;p&gt;&lt;img src=&#34;http://deliberate-software.com/images/whiteboards2.jpg&#34;&gt;&lt;/img&gt;&lt;/p&gt;

&lt;p&gt;We want to hire for high-level skills. Fast learning, strategic thinking, good
design, and emotional intelligence are more important than rote memorization. We
care more about &amp;ldquo;ability to grow&amp;rdquo; than &amp;ldquo;current skills&amp;rdquo;. Our job does not
involve whiteboard coding, puzzle questions, or anything that can be discovered
with a decent IDE, so those are left out.&lt;/p&gt;

&lt;p&gt;We care a lot about &amp;ldquo;no jerks&amp;rdquo;. We want our workplace to be fun, relaxing, and
supportive. We want candidates who are comfortable being wrong and corrected
regularly, and who can correct others politely.&lt;/p&gt;

&lt;p&gt;We do not care about any question that could be easily be answered by Google. If
an internet search can easily answer the question, it is pointless to care if
the human in front of me happens to know it. Given the search revolution of the
last decade, the value of memorized facts falls to almost zero. Facts as a proxy
for actual job skill probably used to be accurate until the internet allowed
every interview question to become public record.&lt;/p&gt;

&lt;h2 id=&#34;scoring:cf61b2cfb55395d828ffadc28b2a9a0d&#34;&gt;Scoring&lt;/h2&gt;

&lt;p&gt;I hope someone one day invents a perfect productivity score! For now, counting
bugs, features, correct answers, etc, are all proxies that poorly represent
actual productivity. If those actually worked, why don&amp;rsquo;t we use them for raises,
bonuses, and reviews? Because. They. Do. Not. Work.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Counting bugs, features, correct answers, etc, are all proxies that poorly
represent actual productivity&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;A well-designed rubric &lt;em&gt;can&lt;/em&gt; work. A rubric is a way of measuring the
&amp;ldquo;un-measurable&amp;rdquo;. You probably have seen them in year-end reviews. A grid with
categories on one side, and a 1-5 score with a paragraph explanation for each.
We only score what has to be explained with a description from the interviewers.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&amp;ldquo;How was the candidate&amp;rsquo;s communication skills?&amp;rdquo;&lt;/p&gt;

&lt;p&gt;&amp;ldquo;They misunderstood me only a few times, and I only had trouble understanding
them once or twice. The watchers all felt like the communication was pretty
good. They were definitely above average: &amp;frac34;.&amp;rdquo;&lt;/p&gt;

&lt;p&gt;&amp;ldquo;How about design skills?&amp;rdquo;&lt;/p&gt;

&lt;p&gt;&amp;ldquo;They were able to clearly design every abstraction. They deeply understood
passing functions as values, see how this takes a function for polymorphism?
We prodded a bit, and they were able to give a couple other ways to achieve
the same behavior. We all agreed it was best the way it was. All said, they
did most of the heavy lifting for this whole project, and it is superbly
designed: 4/4&amp;rdquo;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;our-process:cf61b2cfb55395d828ffadc28b2a9a0d&#34;&gt;Our Process&lt;/h2&gt;

&lt;p&gt;To &amp;ldquo;level-set&amp;rdquo; our expectations, we had several of our developers at different
levels perform the interview live in front of the team. We made them use various
languages and exercises they had never seen before. This &amp;ldquo;level-setting&amp;rdquo; helped
us to see how known good developers perform when way out of their element and
uncomfortable.&lt;/p&gt;

&lt;p&gt;All interviews are assigned to developers randomly, and all are expected to
participate. The candidate should have two developers around at all time, to
prevent bias by any individual. One pairs while the others rotate watching
silently. The watchers are expected to stay quiet, to prevent confusion.&lt;/p&gt;

&lt;p&gt;Before the first interview, the candidate is sent something very much like this
document. We think there is no way someone could &amp;ldquo;fake us out&amp;rdquo; on any criteria.
The things we look for take years of practice to cultivate, so &amp;ldquo;cramming&amp;rdquo; should
not help much (if at all). The one exception to that is if they have never heard
of Test Driven Development, we do recommend they Google it for a few minutes, as
prior knowledge helps smooth the phone screen considerably.&lt;/p&gt;

&lt;h3 id=&#34;phone-screen:cf61b2cfb55395d828ffadc28b2a9a0d&#34;&gt;Phone Screen&lt;/h3&gt;

&lt;p&gt;We pair program over the internet using a shared programming environment called
&lt;a href=&#34;c9.io&#34;&gt;Cloud9&lt;/a&gt;. We (currently) have projects set up for Java, JavaScript,
Python, Ruby, and C#. The candidate may choose their desired language. We then
pair program using Test Driven Development to build out a well defined exercise.
The candidate may entirely verbally &amp;ldquo;navigate&amp;rdquo;, while one of our programmers
entirely &amp;ldquo;drives&amp;rdquo; and types out the code. This is acceptable.&lt;/p&gt;

&lt;p&gt;If the candidate has never seen any of those languages, Google or asking the
interviewer is totally fair game, and does not count against them. If the
candidate has completely no idea, the interviewer is expected to politely
complete the task while keeping the candidate engaged.&lt;/p&gt;

&lt;p&gt;The phone screen is under an hour, with 30 minutes for the pair programming.
The remaining time is for questions about our office. We let them drive the
second half of the interview, asking us questions about what our team and
process is like. We attempt to answer clearly and honestly, both good and bad.&lt;/p&gt;

&lt;h3 id=&#34;in-person:cf61b2cfb55395d828ffadc28b2a9a0d&#34;&gt;In-Person&lt;/h3&gt;

&lt;p&gt;The in-person interview is from 9:30 to 3:00. We are not thrilled with how much
time it takes and would like to shorten it, but so far have no superior
alternatives.&lt;/p&gt;

&lt;p&gt;At the start of the day, we spend 30 minutes chatting and asking questions back
and forth. Our questions are meant to tell us about the candidate&amp;rsquo;s background
and &amp;ldquo;programming philosophy&amp;rdquo;: books read, favorite languages, interesting
projects they&amp;rsquo;ve worked on, etc. We allow them as many questions as they would
like.&lt;/p&gt;

&lt;p&gt;The rest of the day is very much like a &amp;ldquo;typical day at work&amp;rdquo;, but with
programming exercises instead of production code. We pair program on the
exercises, following the same flow from the phone screen. The exercises have no
&amp;ldquo;tricks&amp;rdquo;, they are reasonably straightforward and don&amp;rsquo;t require any prior domain
or CS theory knowledge. Throughout the day, the candidate is free to get food,
drinks, and run to the restroom.&lt;/p&gt;

&lt;p&gt;The developer who is pairing has a primary role of making the candidate feel
comfortable and accomplish any effort with a 50/50 split of effort. If the
candidate really is struggling, the developer is expected to keep working with
the candidate, even to the point of doing the hard parts and giving them the
easy parts. A completely unskilled candidate will see their pair doing all the
work with a smile and politely asking for &amp;ldquo;help&amp;rdquo; with variable names and such.&lt;/p&gt;

&lt;p&gt;The developer pair is also expected to give the candidate some time to think
if they are lost. The candidate at the end of the interview should feel like
they have a complete understanding of what happened. The exercises are
designed to be &amp;ldquo;too much to finish&amp;rdquo;, and as such finishing the exercises is
not a success criteria as much as working well together and writing
maintainable code.&lt;/p&gt;

&lt;p&gt;We feel this gives us a highly accurate understanding of a candidate&amp;rsquo;s skill,
while still putting them at ease. Many times we&amp;rsquo;ve seen a terrified candidate
light up fifteen minutes into a pairing session while watching their developer
pair do most of the work. Something about seeing code written &amp;ldquo;activates&amp;rdquo; even
the most nervous candidate. All the thoughts of nerves turn into a concrete
&amp;ldquo;oh, wait, I know what he just did, and I&amp;rsquo;ve got an opinion on that!&amp;rdquo;&lt;/p&gt;

&lt;h2 id=&#34;conclusion:cf61b2cfb55395d828ffadc28b2a9a0d&#34;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;We like this process because it is exactly what our job is like. We pair program
for a lot of work, and the interview is meant to give candidates a sample of
that. No one should show up for their first day of work and say, &amp;ldquo;wait, I
actually hate pair programming.&amp;rdquo; By thinking through our goals and an &amp;ldquo;ideal
candidate&amp;rdquo;, we were able to design a process that meets those goals.&lt;/p&gt;

&lt;p&gt;I recommend you take an hour to write out your goals and needs. Then see how
your interview process matches. Are you looking for a &amp;ldquo;human Google&amp;rdquo;? Does your
job involve whiteboard coding? Would telling the candidate the exact process in
advance with all the questions let them game the system? Because every single
interview question I&amp;rsquo;ve seen is up on Google to be found and memorized on easy
to read lists. How much time does your process take? Could it be shortened? Does
it require the candidate to spend a lot of time at home? You might be surprised
at what you find!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Daily Meditation Improves Technical Leadership</title>
      <link>http://deliberate-software.com/daily-meditation-greatly-improved-my-technical-leadership/</link>
      <pubDate>Mon, 14 Dec 2015 00:00:00 +0000</pubDate>
      
      <guid>http://deliberate-software.com/daily-meditation-greatly-improved-my-technical-leadership/</guid>
      <description>

&lt;p&gt;A couple years ago, a coworker told me a success story about mindful meditation.
He explained how his wife took a class that required an hour of daily meditation
for a whole month. He reported that she found it uncomfortable, but the effects
were astounding. She claimed to feel more relaxed, more focused, and more
&amp;ldquo;herself&amp;rdquo;. She found new reserves of motivation. She dropped the book she&amp;rsquo;d been
trying to write for years, and started a business. After that business failed,
she started another, this time successfully.&lt;/p&gt;

&lt;p&gt;Immediately convinced, I started by listening to guided
&lt;a href=&#34;https://en.wikipedia.org/wiki/Mindfulness#Mindfulness_meditation&#34;&gt;mindfulness meditations&lt;/a&gt;
on YouTube and &lt;a href=&#34;https://www.headspace.com/science&#34;&gt;phone apps&lt;/a&gt;. After a couple
weeks of that, I started doing breathing exercises on my own while sitting
listening to rain sounds. I made a habit of doing it for about an hour every day
on my lunch break. A few months later, I hated it.&lt;/p&gt;

&lt;p&gt;For whatever reason, after each session I would feel very uncomfortable. I would
be confronted with emotions that made me feel worthless and embarrassed. My mind
was bringing forward all these painful memories and feelings. Over time, I
started to dread the lunch break.&lt;/p&gt;

&lt;h2 id=&#34;the-revelation:b62e7cc9b8c7dde38594fd84cce85d41&#34;&gt;The Revelation&lt;/h2&gt;

&lt;p&gt;Then, one day, I had a profound sense of understanding. I realized what was
causing these negative emotions. I was in the middle of a major push to guide
our team to adopt a new programming language. While I&amp;rsquo;d led many such
initiatives before, I saw that I&amp;rsquo;d always had the same struggles. My ego and
self-worth were so tied into &amp;ldquo;my&amp;rdquo; campaigns that I wasn&amp;rsquo;t able to clearly hear
criticism. When people pointed out legitimate concerns or weaknesses, I would
get embarrassed and take it as a personal failure.&lt;/p&gt;

&lt;p&gt;I could see, from the very beginning, my current &amp;ldquo;campaign&amp;rdquo; had been poorly
executed. After researching the new technology for a long time, I felt like I
saw a place where it could solve some of our needs. Instead of carefully writing
out a proposal, I &amp;ldquo;half-jokingly&amp;rdquo; brought it up whenever I could. When the
listeners didn&amp;rsquo;t immediately react positively, I quickly retracted the idea,
&amp;ldquo;just kidding&amp;rdquo;. Over weeks I dropped not-so-subtle hints, &amp;ldquo;this would be better
with&amp;hellip;&amp;ldquo;, or, &amp;ldquo;we wouldn&amp;rsquo;t have this problem if&amp;hellip;&amp;rdquo;. Instead of convincing
anyone of anything, I just broadcasted to everyone how insecure I felt about the
issue. Everyone could clearly see that I cared, but I was too afraid to put
myself out there and make a serious suggestion. For months nothing changed, and
I felt more and more bitter that &amp;ldquo;my idea&amp;rdquo; wasn&amp;rsquo;t being listened to. In reality,
I hadn&amp;rsquo;t even made a serious suggestion yet!&lt;/p&gt;

&lt;p&gt;Eventually, the people around me started to listen and research the new
language. They agreed it really did solve a need we had. After a while, enough
people got on board that we started using it more. Even then, I held tightly to
&amp;ldquo;my idea&amp;rdquo;, afraid that it would prove to be a failure. When someone ran into
issues, I would get defensive. Even though I tried to keep my emotions in check,
I clearly took any criticism of the language as if it was a personal failing, no
matter how legitimate. I&amp;rsquo;d tightly coupled my ego to my ideas, and I always had.&lt;/p&gt;

&lt;p&gt;After a few months of meditating, this idea rocked my world. My negative
emotions came from a realization that my actions were not in line with my
values. I don&amp;rsquo;t want my self-worth to be tied to a simple tool. No tool is worth
it. Every tool fails. I&amp;rsquo;d sold myself short, lowered my self-worth to that of a
tool. This completely blocked my ability to be an effective technical leader.&lt;/p&gt;

&lt;p&gt;I couldn&amp;rsquo;t hear criticism of my ideas without getting defensive, so I couldn&amp;rsquo;t
think critically. I couldn&amp;rsquo;t help work out solutions to the best of my ability,
because that would mean admitting personal failure. Every side comment or
momentary struggle felt like a catastrophe.&lt;/p&gt;

&lt;p&gt;After realizing this, I felt a wave of relief. My emotional struggle leading
this programming language change made sense! And I had an easy way out! I simply
had to distance myself from my ideas, separate my self-worth from my tools. The
more I meditated, the easier it got.&lt;/p&gt;

&lt;h2 id=&#34;present-day:b62e7cc9b8c7dde38594fd84cce85d41&#34;&gt;Present Day&lt;/h2&gt;

&lt;p&gt;While I still sometimes get the old pang of embarrassment or defensiveness, now
I understand where it comes from, and how to move forward. I can let my ideas
go. I can consider ideas critically. I can make changes and adjustments if the
ideas are not working.&lt;/p&gt;

&lt;p&gt;This summer I decided to write up my learning. I wanted to always be able to
look back and remember these important lessons. My write-up was the seed for the
book &lt;a href=&#34;https://leanpub.com/convincingcoworkers&#34;&gt;Convincing Coworkers&lt;/a&gt;. I explain
the lessons learned from implementing a half dozen major technical changes, and
how I learned to lead without letting my ego cloud my thinking.&lt;/p&gt;

&lt;p&gt;If you want to become a more effective leader, I highly recommend a practice of
daily meditation. Meditation gives your mind a chance to deeply consider your
actions and values. It allows your subconscious to reflect on what and why you
act.&lt;/p&gt;

&lt;p&gt;Not everyone will struggle from the same issues as me. Every leader has a
different set of challenges and situations. Meditation lets your mind analyze
your unique weaknesses and strengths, coming up with a tailored perspective.
Meditating allows your mind to creatively look for ways to improve itself. While
rarely comfortable, this process can have incredible benefits.&lt;/p&gt;

&lt;h2 id=&#34;appendix-i-m-uncomfortable-with-the-connotations-of-meditation:b62e7cc9b8c7dde38594fd84cce85d41&#34;&gt;Appendix: &amp;ldquo;I&amp;rsquo;m uncomfortable with the connotations of meditation&amp;rdquo;&lt;/h2&gt;

&lt;p&gt;You may feel uncomfortable with meditation because of its current strong
associations with religion. Meditation is not inherently religious. I consider
meditation like an exercise routine for the mind. If you are religious, and
exercise your body as a form of religious expression, exercise is a religious
practice. If you are not religious, and you exercise to improve your health and
well-being, exercise is a secular practice. Meditation is just a form of mental
exercise. Simple as that.&lt;/p&gt;

&lt;p&gt;Meditation is a tool, and the tool wielder determines its use. Don&amp;rsquo;t let a fear
of the connotations of meditation stop you from experiencing improved
leadership, creativity, and focus!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Conj Talk: Teaching Clojure at IBM</title>
      <link>http://deliberate-software.com/teaching-clojure/</link>
      <pubDate>Wed, 18 Nov 2015 00:00:00 +0000</pubDate>
      
      <guid>http://deliberate-software.com/teaching-clojure/</guid>
      <description>&lt;p&gt;My talk at Conj 2015, enjoy!
&lt;a href=&#34;https://www.youtube.com/watch?v=BsLiPt90HDo&#34;&gt;Teaching Clojure&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>