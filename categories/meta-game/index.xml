<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Meta Game on deliberate software</title>
    <link>http://deliberate-software.com/categories/meta-game/</link>
    <description>Recent content in Meta Game on deliberate software</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 11 Apr 2017 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://deliberate-software.com/categories/meta-game/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>What Keeps a Self-Organizing Team From Falling Apart</title>
      <link>http://deliberate-software.com/self-organizing-balance/</link>
      <pubDate>Tue, 11 Apr 2017 00:00:00 +0000</pubDate>
      
      <guid>http://deliberate-software.com/self-organizing-balance/</guid>
      <description>

&lt;p&gt;My team has a decade of experience applying
&lt;a href=&#34;http://deliberate-software.com/self-organizing-teams/&#34;&gt;self-organizing teams&lt;/a&gt; and
&lt;a href=&#34;http://deliberate-software.com/pairprogramming/&#34;&gt;pair-programming&lt;/a&gt; to reduce wasted productivity in an
enterprise banking application.&lt;/p&gt;

&lt;h2 id=&#34;the-benefits:e13b7cc1815b02599f68c3eaaf953c0f&#34;&gt;The Benefits&lt;/h2&gt;

&lt;h3 id=&#34;no-technical-lead:e13b7cc1815b02599f68c3eaaf953c0f&#34;&gt;No Technical Lead&lt;/h3&gt;

&lt;p&gt;Our self-organizing practices eliminate the need for a technical lead who
assigns and follows up on work. No work is assigned to any individual.&lt;/p&gt;

&lt;h3 id=&#34;individual-empowerment:e13b7cc1815b02599f68c3eaaf953c0f&#34;&gt;Individual Empowerment&lt;/h3&gt;

&lt;p&gt;Developers are free to remove pain points as needed, so most have a strong sense
of ownership. Team members feel empowered to champion for broad changes to the
codebase.&lt;/p&gt;

&lt;h3 id=&#34;few-meetings:e13b7cc1815b02599f68c3eaaf953c0f&#34;&gt;Few Meetings&lt;/h3&gt;

&lt;p&gt;Without the need for significant process or oversight, the team has very few
meetings a week. In a survey of the last several months, the average team member
had less than &lt;strong&gt;three hours of meetings a week.&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&#34;how-does-this-work:e13b7cc1815b02599f68c3eaaf953c0f&#34;&gt;How does this work?&lt;/h2&gt;

&lt;p&gt;As amazing as it all sounds, what prevents this process from falling into
anarchy? How has this been working for us for over ten years with very little
oversight? The team has completely changed three times (roughly a 3.6 year
average turnaround) so it can&amp;rsquo;t only be about &amp;ldquo;the right people&amp;rdquo;.&lt;/p&gt;

&lt;h3 id=&#34;self-correction-while-maintaining-trust:e13b7cc1815b02599f68c3eaaf953c0f&#34;&gt;Self-Correction While Maintaining Trust&lt;/h3&gt;

&lt;p&gt;The author of
&lt;a href=&#34;http://www.reinventingorganizations.com/&#34;&gt;Reinventing Organizations&lt;/a&gt; talks
about the concept of &amp;ldquo;self-correction&amp;rdquo; that allows self-organizing teams to
adapt without writing a thick rule-book of policies. Healthy, self-organizing
teams build a &lt;strong&gt;simple system that self-corrects&lt;/strong&gt; instead of adding new
policies when trust is abused. Rather than trying to design the perfect
rule-book, they let individuals grow into trusted, intelligent agents who are
expected to learn and improve.&lt;/p&gt;

&lt;p&gt;The author suggests that three things are needed for self-correcting teams:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;A shared understanding of what’s healthy&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Information&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;A forum for conversation to trigger self-corrective action&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;our-process:e13b7cc1815b02599f68c3eaaf953c0f&#34;&gt;Our Process&lt;/h2&gt;

&lt;p&gt;Our process has several examples of self-correction, and several places we are
still sorting out how to best self-correct. We currently apply these
democratically-elected practices:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Full-time pair-programming on all production code&lt;/li&gt;
&lt;li&gt;No work is assigned to any individual or pair&lt;/li&gt;
&lt;li&gt;Any pair can make any technical decision&lt;/li&gt;
&lt;li&gt;Pairs are shuffled randomly twice a day&lt;/li&gt;
&lt;li&gt;Everyone participates in a five-minute status update twice a day&lt;/li&gt;
&lt;li&gt;Weekly &amp;ldquo;retrospective&amp;rdquo; is held to reflect and make changes&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;example-any-pair-can-make-any-technical-decision:e13b7cc1815b02599f68c3eaaf953c0f&#34;&gt;Example: Any pair can make any technical decision&lt;/h3&gt;

&lt;p&gt;Consider the practice that &amp;ldquo;any pair can make any technical decision.&amp;rdquo; The
&lt;strong&gt;information&lt;/strong&gt; comes when the pairs switch every half-day. Bob and Sally might
think designing the module one way is a good idea in the morning, but Sally and
Jane might see things with a fresh perspective in the afternoon. The information
spreads organically every four hours as a fresh set of eyes gets to see the
work. The &lt;strong&gt;forum for self-corrective action&lt;/strong&gt; happens when the new pair
discusses the previous session&amp;rsquo;s decisions.&lt;/p&gt;

&lt;p&gt;If a pair makes a technical decision that isn&amp;rsquo;t ideal, the next pair will have
the opportunity to choose to continue down that path or adjust the code to a
better solution. To prevent significant rework, we meet once a week for under an
hour to chat about the upcoming week&amp;rsquo;s features and get a rough idea of the
direction the team wants to go.&lt;/p&gt;

&lt;p&gt;In practice, rework happens only occasionally as everyone strives to produce the
best designs they can. No one wants to see their work undone because of a missed
requirement or poor design, which prompts a healthy desire to do one&amp;rsquo;s best.&lt;/p&gt;

&lt;h3 id=&#34;example-work-isn-t-assigned:e13b7cc1815b02599f68c3eaaf953c0f&#34;&gt;Example: Work Isn&amp;rsquo;t Assigned&lt;/h3&gt;

&lt;p&gt;Work isn&amp;rsquo;t assigned to pairs or individuals. The &lt;strong&gt;shared understanding&lt;/strong&gt; is
that the most valuable thing for the business is for pairs to work through the
priority queue of enhancements and technical debt. We promote &lt;strong&gt;information&lt;/strong&gt;
with a twice daily status update of what each pair accomplished. We have a
retrospective &lt;strong&gt;forum&lt;/strong&gt; once a week to discuss what is healthy and prompt
self-corrective action.&lt;/p&gt;

&lt;p&gt;In practice, pairs rarely &amp;ldquo;go rogue&amp;rdquo;. Only occasionally in the last few years
has it happened, and the issues have been resolved through the weekly
retrospective. A recent example comes from a pair who semi-secretly stayed on an
interesting feature for over a week instead of rotating as agreed. Several other
team-members felt like they&amp;rsquo;d missed out on getting to build it and brought up
their feelings in the weekly forum. It turned out there was a legitimate benefit
to the pair&amp;rsquo;s decision to stay on the feature for so long. The conclusion was
the pair would&amp;rsquo;ve gotten a lot more support if they&amp;rsquo;d been upfront with the team
with what they saw and their decision to stay on the project for longer than
usual.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Some simple communication would&amp;rsquo;ve saved everyone some hassle&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Rather than adding a new policy to the rule-book, the whole team got a reminder
on two great lessons. First, nothing is as simple as it seems. Second, a pinch
of communication prevents a pound of hassle.&lt;/p&gt;

&lt;h3 id=&#34;application-no-you-don-t-need-to-do-pair-programming-fulltime:e13b7cc1815b02599f68c3eaaf953c0f&#34;&gt;Application (No, you don&amp;rsquo;t need to do pair-programming fulltime!)&lt;/h3&gt;

&lt;p&gt;Self-correction and self-organization is on a continuum. The more your team
grows to self-correct, the more benefits you gain.&lt;/p&gt;

&lt;p&gt;Not every team should have the same practices for self-correction. Our specific
practices of pair-programming, rotating, and pair-empowerment are not magic:
they are just good examples of applied self-correction. We have found
pair-programming and pair switching to work well for us, but there are infinite
ways to grow a system that self-corrects.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&amp;ldquo;Trust, but verify.&amp;rdquo; - Russian proverb&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Self-correcting practices allow individuals to perform at their best with fewer
rule books, fewer meetings, fewer bottlenecks, and less oversight. Individuals
are trusted to perform their best, and the team is provided with a way to
discuss improvements. A self-correcting team will find individuals empowered to
improve the business in incredible ways.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>When Self-Organizing Teams Are Effective</title>
      <link>http://deliberate-software.com/self-organizing-teams/</link>
      <pubDate>Wed, 16 Mar 2016 00:00:00 +0000</pubDate>
      
      <guid>http://deliberate-software.com/self-organizing-teams/</guid>
      <description>

&lt;p&gt;A self-organizing team can be one of the most effective ways to build a team of
high-quality professionals.&lt;/p&gt;

&lt;h2 id=&#34;what-is-a-self-organizing-team:c36738b5d4cff136bd50ed28a796f49d&#34;&gt;What Is A Self-Organizing Team?&lt;/h2&gt;

&lt;p&gt;I have managed several self-organizing teams over the last few years. They are
expected to follow these tenets:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The whole team organizes themselves to best meet the business needs&lt;/li&gt;
&lt;li&gt;Each team chooses their practices and working agreements&lt;/li&gt;
&lt;li&gt;All technical and organizational decisions are driven through consensus&lt;/li&gt;
&lt;li&gt;Product owners determine &amp;ldquo;what&amp;rdquo; happens, the team determines &amp;ldquo;how&amp;rdquo;&lt;/li&gt;
&lt;li&gt;All staff participates in a culture of high-quality development&lt;/li&gt;
&lt;li&gt;Systems and practices are designed to maintain the greatest productivity across
the next decade&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;when-it-works-well:c36738b5d4cff136bd50ed28a796f49d&#34;&gt;When It Works Well&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Small teams&lt;/li&gt;
&lt;li&gt;Highly skilled workers&lt;/li&gt;
&lt;li&gt;Need for high-quality software&lt;/li&gt;
&lt;li&gt;Business need for continuous and stable productivity for 5+ years&lt;/li&gt;
&lt;li&gt;Buy-in from management that &amp;ldquo;productivity is worth feeling out of control&amp;rdquo;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Self-organizing teams work best when most people on your team are eager to do
more, be more, and learn more. A team of such developers will find a single
leader to be a bottleneck. Running every idea past a single decision maker will
impair their abilities to grow and gain critical thinking skills.&lt;/p&gt;

&lt;h2 id=&#34;case-study:c36738b5d4cff136bd50ed28a796f49d&#34;&gt;Case Study&lt;/h2&gt;

&lt;p&gt;I currently lead a self-organizing team of ten developers. We alone actively
develop in a 4.6 million line codebase. The codebase is over 10 years old, and
the entire team has turned over twice since the project started. This is no
maintenance project, this quarter we converted the main calculation engine
(~600KLOC) to allow calculations to be parallelized across dozens of nodes for a
substantial increase in throughput.&lt;/p&gt;

&lt;p&gt;Our team has recently been recognized as producing the most business value with
the highest quality across our +700 person software company. Our CEO and SVP of
Product have highlighted our recent accolades. I am certain this was only
possible because of the intrinsic motivation of our staff caused by
self-organization.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;We actively develop in a 10 year old codebase sized at ~460KLOC per developer&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;When deciding on working agreements, the original team voted on strict
pair-programming, frequent pair switches
(&lt;a href=&#34;http://csis.pace.edu/~grossman/dcs/XR4-PromiscuousPairing.pdf&#34;&gt;promiscuous pairing&lt;/a&gt;),
and test-driven development. Each subsequent iteration of the team has continued
to vote for these agreements. We believe that it is one of the easiest ways to
keep a team capable in such an enormous codebase. Randomized pairing and 2-8
hour switching prevents siloing of knowledge.&lt;/p&gt;

&lt;p&gt;In any other company, our least experienced developers would be team leads and
architects; and our most experienced developers would be CTO&amp;rsquo;s. They&amp;rsquo;ve gotten
this experience by living it. In case you think we&amp;rsquo;ve hired a team of seasoned
graybeards, our average developer only has six years of experience.&lt;/p&gt;

&lt;p&gt;Each member of our team is responsible for &amp;ldquo;being the lead&amp;rdquo; in certain ways. The
individual&amp;rsquo;s own interests guide them to develop expertise in subjects. By being
an expert, others listen to them, so they often have an attentive audience when
speaking on their specialties. This positive feedback loop encourages additional
research.&lt;/p&gt;

&lt;h2 id=&#34;how-to-start:c36738b5d4cff136bd50ed28a796f49d&#34;&gt;How to Start&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Tip:&lt;/strong&gt; The most important way to build such a team is to allow them to fail&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The team must be allowed to face the consequences of their actions in a safe
space. If a refactoring project goes badly, the team should have the individual
clean up their mess. When someone is spending time on a project that doesn&amp;rsquo;t
align with the goals of the business, the team should speak with them. When a
developer successfully campaigns for a change that increases productivity, it
should be celebrated. In all cases, strive to have your office be a safe place
to fail.&lt;/p&gt;

&lt;p&gt;Every time someone in authority demands the team do something different, it
reduces the intrinsic motivation of the team. Each demand teaches the team
members that they don&amp;rsquo;t have to be responsible, someone else will take care of
the &amp;ldquo;important&amp;rdquo; things for them. Treat such demands with the utmost care, only
making demands extremely infrequently.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Tip:&lt;/strong&gt; Fewer demands allows for greater intrinsic motivation&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;A self-organizing team is very much like a democracy. The team is expected and
entrusted to organize around the needs of the business. Decisions should be made
by consensus. Very rarely should an &amp;ldquo;override&amp;rdquo; be needed from management.&lt;/p&gt;

&lt;h1 id=&#34;conclusion:c36738b5d4cff136bd50ed28a796f49d&#34;&gt;Conclusion&lt;/h1&gt;

&lt;p&gt;Self-organizing teams are one of the most effective ways to manage a
high-performing group. The team benefits from the best aspects of each member.
Team members &amp;ldquo;grow up&amp;rdquo; quickly, as they are exposed to others around them who
behave like trusted professionals. Each developer becomes intrinsically
motivated, outperforming their peers in similar command and control teams.&lt;/p&gt;

&lt;h1 id=&#34;replies:c36738b5d4cff136bd50ed28a796f49d&#34;&gt;Replies&lt;/h1&gt;

&lt;p&gt;&lt;a href=&#34;https://lobste.rs/u/petergao&#34;&gt;PeterGao&lt;/a&gt; on lobste.rs
&lt;a href=&#34;https://lobste.rs/s/1fhkxo/when_self-organizing_teams_are_effective/comments/e3niex#c_e3niex&#34;&gt;pointed out&lt;/a&gt;
that undergrad school projects often see everyone grouping by skill, with all
the best in a group together. I too have had bad luck with undergrad CS school
projects, especially since at the time I was a C-performer. School projects mix
a fairly homogeneous group of immature students with a subtly different goal:
“pick a few other people, your work will be compared to everyone else’s”.
Self-selected grouping by skill makes sense, it’s effectively a competition. One
of the recommended alterations for group projects is “your grade is the average
grade of all the group projects”. Suddenly, you won’t see those teams separating
by skill. Instead students will organize with a team mix as even as possible,
with cross-communication (and likely rotation) happening to ensure high quality
across all the projects. Bam, now you’ve got my office ;)&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Avoid Pop Culture Architecture</title>
      <link>http://deliberate-software.com/pop-culture-architecture/</link>
      <pubDate>Fri, 19 Feb 2016 00:00:00 +0000</pubDate>
      
      <guid>http://deliberate-software.com/pop-culture-architecture/</guid>
      <description>

&lt;blockquote&gt;
&lt;p&gt;&amp;ldquo;ActiveRecord is so hot right now!&amp;rdquo; - comment in 2006&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Pop Culture Architecture is the current &amp;ldquo;fad&amp;rdquo; of the day. I have seen it be
microservices, business capabilities, CQRS, service-oriented architecture,
Domain-Driven Design, test driven development, ORMs, ActiveRecord, and MVC. Each
of these have been fashionable at some point.&lt;/p&gt;

&lt;p&gt;Fashion is ultimately a signaling mechanism for status. We are attracted to
fashionable architectures because they signal we have worked on elite teams. The
more difficult or costly the trade-offs of the architecture, the more elite and
special our team must have been to implement it successfully.&lt;/p&gt;

&lt;h2 id=&#34;example-microservices:5f95d372c851097c31e5c149858c384a&#34;&gt;Example: Microservices&lt;/h2&gt;

&lt;p&gt;Microservices is a current fashionable design. Microservices have very clear
pros and cons. They come with the ability to have a huge team or a fragmented
deployment that potentially allows for horizontal scaling. For that ability, you
will pay the immense costs: loss of strong consistency and transactions, a
labyrinthine operational footprint and deployment, increased communication
effort, expensive integration testing, and a code base that takes longer to
program. &lt;a href=&#34;http://martinfowler.com/articles/microservice-trade-offs.html&#34;&gt;(1)&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;If you have a small team or system that does not need horizontal scaling on
every single component, a microservice architecture is unlikely to solve your
communication or trust issues. You will spend dollars on deployment, consistency
issues, distributed debugging, and basic programming just to save a penny on
communication and teamwork.
&lt;a href=&#34;http://www.stackbuilders.com/news/the-hidden-costs-of-microservices&#34;&gt;(2)&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;For most teams, the logical conclusion probably will be: a microservice
architecture solves problems we don&amp;rsquo;t have.&lt;/p&gt;

&lt;p&gt;Microservices remain fashionable because they indicate work at the size and
scale of a handful of elite companies. You would only likely encounter a couple
hundred companies in the world that have a development staff so large or loads
so high as to truly require such a system. Because of the rarity of actual need,
it is a perfect signaling mechanism for status.&lt;/p&gt;

&lt;p&gt;Saying that you implemented a microservice architecture implies &amp;ldquo;my team was so
large or my product so popular, my team could afford to pay almost any cost to
meet the demand.&amp;rdquo;&lt;/p&gt;

&lt;p&gt;Carefully consider your architecture decisions. Do not allow fashion to dictate
your choices. Take pride in selecting the appropriate architecture for the
project, no matter how unpopular.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Development Disappointment Disorder</title>
      <link>http://deliberate-software.com/development-disappointment-disorder/</link>
      <pubDate>Thu, 04 Feb 2016 00:00:00 +0000</pubDate>
      
      <guid>http://deliberate-software.com/development-disappointment-disorder/</guid>
      <description>

&lt;blockquote&gt;
&lt;p&gt;&amp;ldquo;We&amp;rsquo;ve never had a successful release&amp;rdquo;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;You just finished this really hard feature. The whole thing was worse than
anyone realized. Not only that, but the feature wasn&amp;rsquo;t clearly explained, so you
lost time churning on the actual requirements. Despite all the confusion,
iteration, and technical challenges, you managed to get it working! You look
back, savoring how much you have learned and grown.&lt;/p&gt;

&lt;p&gt;You show it off to the product owner. He barely seems to hear you. His shoulders
slump in disappointment.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&amp;ldquo;Great, but we are still four weeks behind.&amp;rdquo;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Your team is infected with &lt;strong&gt;Development Disappointment Disorder&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;It looks different in every team. The manager who sets unreasonable deadlines
then demands overtime. The project manager who gets angry at every little thing.
Developers who feel they need to point fingers to shift the blame. The boss who
is never happy no matter what is achieved. The team that feels they have never
had a successful release.&lt;/p&gt;

&lt;h2 id=&#34;unreasonable-expectations:4153c418f6ff9c9d005520a12de36a01&#34;&gt;Unreasonable Expectations&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Development Disappointment Disorder is caused by unreasonable expectations.&lt;/strong&gt;
Someone thinks, hopes, or wishes they can get 100 units of productivity from a
team and codebase that only can sustain 30-40 units. They want the impossible,
and no amount of cajoling, pressuring, yelling, or passive aggressive comments
will change reality.&lt;/p&gt;

&lt;p&gt;Productivity is not completely a people problem. Every team has an upper limit
to what they can produce in a system. The human mind has boundaries. Very real
limits exist given the team&amp;rsquo;s size and existing codebases. While new technical
tools and libraries enable more productive teams, these changes often are
hindered by an existing codebase. The team with a multi-million line C# codebase
is not going to get much value from the productivity gains possible with
Haskell&amp;rsquo;s type system.&lt;/p&gt;

&lt;p&gt;You cannot rush software development without incurring a drop in quality,
stability, or maintainability. The work is complex and difficult: every expert
in our field agrees with adages like &amp;ldquo;adding developers to a late project makes
it later.&amp;rdquo;&lt;/p&gt;

&lt;h2 id=&#34;suggestions:4153c418f6ff9c9d005520a12de36a01&#34;&gt;Suggestions&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;For the technical staff:&lt;/strong&gt; How accurate are your estimates? How consistent
is your throughput? Do you regularly under-estimate your features? Do
developers often say, &amp;ldquo;oh, that&amp;rsquo;s only&amp;hellip;&amp;rdquo;? Are some types of features &amp;ldquo;always
late&amp;rdquo;?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You must learn to be blameless in this situation, and that means striving to
  give as accurate an estimate as you can with what you have. Throwing estimates
  out without much thought only makes things worse. How long did a similar
  feature take last time? If you regularly have inaccurate estimates in a
  certain area of the system, put extra care into those estimates, working to
  provide the best estimate you can.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;For the business:&lt;/strong&gt; There is only so many units of productivity that fit
into a given time frame.You need to assess every feature and estimate, and
consider the risk with each.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Acting disappointed, angry, or passive aggressive will not get you more
  features, it will only demotivate the technical staff. You will get more
  consistency, because they will consistently work slower. You will get more
  hours, but each hour will see a
  &lt;a href=&#34;http://www.igda.org/?page=crunchsixlessons&#34;&gt;massive drop in valuable work.&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Acting disappointed, angry, or passive aggressive will not get you more features&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;If you are unhappy with the work produced, you need to consider why. Were you
  told it would be sooner? Did you promise that to someone? What changed since
  then? If the feature isn&amp;rsquo;t actually needed, why did you pick it? If spending
  twice as much made it not worthwhile, was it really a good choice?&lt;/p&gt;

&lt;p&gt;What would happen if you didn&amp;rsquo;t promise &lt;em&gt;when&lt;/em&gt; the features would be done?
  Either way, your promise doesn&amp;rsquo;t change when it will be done, it just adds
  risk to your credibility. Often the only thing to be gained by giving out
  estimates and time-lines is risk. Unless the customer is truly blocked on your
  estimate, simply communicate what you are doing, not when you hope it will be
  done.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Often the only thing to be gained by telling customers an estimate is risk&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;For the team:&lt;/strong&gt; Celebrate your successes. Abolish the notion of a &amp;ldquo;failed
release&amp;rdquo;. Build up a culture that finds little victories throughout the
release.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;With these tools you can fight Development Disappointment Disorder. You can
start to celebrate what you do accomplish. &lt;strong&gt;A team that is energized and motivated will accomplish more.&lt;/strong&gt; The team that celebrates their work will strive for more.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Designing A Compassionate Interview For A High Performing Individual</title>
      <link>http://deliberate-software.com/compassionate-interviewing/</link>
      <pubDate>Mon, 11 Jan 2016 00:00:00 +0000</pubDate>
      
      <guid>http://deliberate-software.com/compassionate-interviewing/</guid>
      <description>

&lt;p&gt;After my post &lt;a href=&#34;http://deliberate-software.com/on-defeat/&#34;&gt;Interview Humiliation&lt;/a&gt;, a number of
people have asked me how I interview compassionately. I strive to make my interviews as
stress-free and respectful as possible while still rendering a yes/no at the end.&lt;/p&gt;

&lt;p&gt;Any good interview process needs to start with goals:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Respect the candidate&amp;rsquo;s time&lt;/li&gt;
&lt;li&gt;Make the candidate comfortable&lt;/li&gt;
&lt;li&gt;Under-skilled candidates should feel no shame&lt;/li&gt;
&lt;li&gt;Both passing and failing candidates should want to tell their friends to
apply&lt;/li&gt;
&lt;li&gt;We should render the same decision if the interview is repeated multiple
times (with different exercises each time)&lt;/li&gt;
&lt;li&gt;The candidate should know the process in advance and not be able to earn a
pass through short term &amp;ldquo;cramming&amp;rdquo;&lt;/li&gt;
&lt;li&gt;The candidate should feel we are all working collaboratively, instead of us
against them&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;the-ideal-candidate:cf61b2cfb55395d828ffadc28b2a9a0d&#34;&gt;The Ideal Candidate&lt;/h2&gt;

&lt;p&gt;&lt;img src=&#34;http://deliberate-software.com/images/whiteboards2.jpg&#34;&gt;&lt;/img&gt;&lt;/p&gt;

&lt;p&gt;We want to hire for high-level skills. Fast learning, strategic thinking, good
design, and emotional intelligence are more important than rote memorization. We
care more about &amp;ldquo;ability to grow&amp;rdquo; than &amp;ldquo;current skills&amp;rdquo;. Our job does not
involve whiteboard coding, puzzle questions, or anything that can be discovered
with a decent IDE, so those are left out.&lt;/p&gt;

&lt;p&gt;We care a lot about &amp;ldquo;no jerks&amp;rdquo;. We want our workplace to be fun, relaxing, and
supportive. We want candidates who are comfortable being wrong and corrected
regularly, and who can correct others politely.&lt;/p&gt;

&lt;p&gt;We do not care about any question that could be easily be answered by Google. If
an internet search can easily answer the question, it is pointless to care if
the human in front of me happens to know it. Given the search revolution of the
last decade, the value of memorized facts falls to almost zero. Facts as a proxy
for actual job skill probably used to be accurate until the internet allowed
every interview question to become public record.&lt;/p&gt;

&lt;h2 id=&#34;scoring:cf61b2cfb55395d828ffadc28b2a9a0d&#34;&gt;Scoring&lt;/h2&gt;

&lt;p&gt;I hope someone one day invents a perfect productivity score! For now, counting
bugs, features, correct answers, etc, are all proxies that poorly represent
actual productivity. If those actually worked, why don&amp;rsquo;t we use them for raises,
bonuses, and reviews? Because. They. Do. Not. Work.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Counting bugs, features, correct answers, etc, are all proxies that poorly
represent actual productivity&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;A well-designed rubric &lt;em&gt;can&lt;/em&gt; work. A rubric is a way of measuring the
&amp;ldquo;un-measurable&amp;rdquo;. You probably have seen them in year-end reviews. A grid with
categories on one side, and a 1-5 score with a paragraph explanation for each.
We only score what has to be explained with a description from the interviewers.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&amp;ldquo;How was the candidate&amp;rsquo;s communication skills?&amp;rdquo;&lt;/p&gt;

&lt;p&gt;&amp;ldquo;They misunderstood me only a few times, and I only had trouble understanding
them once or twice. The watchers all felt like the communication was pretty
good. They were definitely above average: &amp;frac34;.&amp;rdquo;&lt;/p&gt;

&lt;p&gt;&amp;ldquo;How about design skills?&amp;rdquo;&lt;/p&gt;

&lt;p&gt;&amp;ldquo;They were able to clearly design every abstraction. They deeply understood
passing functions as values, see how this takes a function for polymorphism?
We prodded a bit, and they were able to give a couple other ways to achieve
the same behavior. We all agreed it was best the way it was. All said, they
did most of the heavy lifting for this whole project, and it is superbly
designed: 4/4&amp;rdquo;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;our-process:cf61b2cfb55395d828ffadc28b2a9a0d&#34;&gt;Our Process&lt;/h2&gt;

&lt;p&gt;To &amp;ldquo;level-set&amp;rdquo; our expectations, we had several of our developers at different
levels perform the interview live in front of the team. We made them use various
languages and exercises they had never seen before. This &amp;ldquo;level-setting&amp;rdquo; helped
us to see how known good developers perform when way out of their element and
uncomfortable.&lt;/p&gt;

&lt;p&gt;All interviews are assigned to developers randomly, and all are expected to
participate. The candidate should have two developers around at all time, to
prevent bias by any individual. One pairs while the others rotate watching
silently. The watchers are expected to stay quiet, to prevent confusion.&lt;/p&gt;

&lt;p&gt;Before the first interview, the candidate is sent something very much like this
document. We think there is no way someone could &amp;ldquo;fake us out&amp;rdquo; on any criteria.
The things we look for take years of practice to cultivate, so &amp;ldquo;cramming&amp;rdquo; should
not help much (if at all). The one exception to that is if they have never heard
of Test Driven Development, we do recommend they Google it for a few minutes, as
prior knowledge helps smooth the phone screen considerably.&lt;/p&gt;

&lt;h3 id=&#34;phone-screen:cf61b2cfb55395d828ffadc28b2a9a0d&#34;&gt;Phone Screen&lt;/h3&gt;

&lt;p&gt;We pair program over the internet using a shared programming environment called
&lt;a href=&#34;c9.io&#34;&gt;Cloud9&lt;/a&gt;. We (currently) have projects set up for Java, JavaScript,
Python, Ruby, and C#. The candidate may choose their desired language. We then
pair program using Test Driven Development to build out a well defined exercise.
The candidate may entirely verbally &amp;ldquo;navigate&amp;rdquo;, while one of our programmers
entirely &amp;ldquo;drives&amp;rdquo; and types out the code. This is acceptable.&lt;/p&gt;

&lt;p&gt;If the candidate has never seen any of those languages, Google or asking the
interviewer is totally fair game, and does not count against them. If the
candidate has completely no idea, the interviewer is expected to politely
complete the task while keeping the candidate engaged.&lt;/p&gt;

&lt;p&gt;The phone screen is under an hour, with 30 minutes for the pair programming.
The remaining time is for questions about our office. We let them drive the
second half of the interview, asking us questions about what our team and
process is like. We attempt to answer clearly and honestly, both good and bad.&lt;/p&gt;

&lt;h3 id=&#34;in-person:cf61b2cfb55395d828ffadc28b2a9a0d&#34;&gt;In-Person&lt;/h3&gt;

&lt;p&gt;The in-person interview is from 9:30 to 3:00. We are not thrilled with how much
time it takes and would like to shorten it, but so far have no superior
alternatives.&lt;/p&gt;

&lt;p&gt;At the start of the day, we spend 30 minutes chatting and asking questions back
and forth. Our questions are meant to tell us about the candidate&amp;rsquo;s background
and &amp;ldquo;programming philosophy&amp;rdquo;: books read, favorite languages, interesting
projects they&amp;rsquo;ve worked on, etc. We allow them as many questions as they would
like.&lt;/p&gt;

&lt;p&gt;The rest of the day is very much like a &amp;ldquo;typical day at work&amp;rdquo;, but with
programming exercises instead of production code. We pair program on the
exercises, following the same flow from the phone screen. The exercises have no
&amp;ldquo;tricks&amp;rdquo;, they are reasonably straightforward and don&amp;rsquo;t require any prior domain
or CS theory knowledge. Throughout the day, the candidate is free to get food,
drinks, and run to the restroom.&lt;/p&gt;

&lt;p&gt;The developer who is pairing has a primary role of making the candidate feel
comfortable and accomplish any effort with a 50/50 split of effort. If the
candidate really is struggling, the developer is expected to keep working with
the candidate, even to the point of doing the hard parts and giving them the
easy parts. A completely unskilled candidate will see their pair doing all the
work with a smile and politely asking for &amp;ldquo;help&amp;rdquo; with variable names and such.&lt;/p&gt;

&lt;p&gt;The developer pair is also expected to give the candidate some time to think
if they are lost. The candidate at the end of the interview should feel like
they have a complete understanding of what happened. The exercises are
designed to be &amp;ldquo;too much to finish&amp;rdquo;, and as such finishing the exercises is
not a success criteria as much as working well together and writing
maintainable code.&lt;/p&gt;

&lt;p&gt;We feel this gives us a highly accurate understanding of a candidate&amp;rsquo;s skill,
while still putting them at ease. Many times we&amp;rsquo;ve seen a terrified candidate
light up fifteen minutes into a pairing session while watching their developer
pair do most of the work. Something about seeing code written &amp;ldquo;activates&amp;rdquo; even
the most nervous candidate. All the thoughts of nerves turn into a concrete
&amp;ldquo;oh, wait, I know what he just did, and I&amp;rsquo;ve got an opinion on that!&amp;rdquo;&lt;/p&gt;

&lt;h2 id=&#34;conclusion:cf61b2cfb55395d828ffadc28b2a9a0d&#34;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;We like this process because it is exactly what our job is like. We pair program
for a lot of work, and the interview is meant to give candidates a sample of
that. No one should show up for their first day of work and say, &amp;ldquo;wait, I
actually hate pair programming.&amp;rdquo; By thinking through our goals and an &amp;ldquo;ideal
candidate&amp;rdquo;, we were able to design a process that meets those goals.&lt;/p&gt;

&lt;p&gt;I recommend you take an hour to write out your goals and needs. Then see how
your interview process matches. Are you looking for a &amp;ldquo;human Google&amp;rdquo;? Does your
job involve whiteboard coding? Would telling the candidate the exact process in
advance with all the questions let them game the system? Because every single
interview question I&amp;rsquo;ve seen is up on Google to be found and memorized on easy
to read lists. How much time does your process take? Could it be shortened? Does
it require the candidate to spend a lot of time at home? You might be surprised
at what you find!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Daily Meditation Improves Technical Leadership</title>
      <link>http://deliberate-software.com/daily-meditation-greatly-improved-my-technical-leadership/</link>
      <pubDate>Mon, 14 Dec 2015 00:00:00 +0000</pubDate>
      
      <guid>http://deliberate-software.com/daily-meditation-greatly-improved-my-technical-leadership/</guid>
      <description>

&lt;p&gt;A couple years ago, a coworker told me a success story about mindful meditation.
He explained how his wife took a class that required an hour of daily meditation
for a whole month. He reported that she found it uncomfortable, but the effects
were astounding. She claimed to feel more relaxed, more focused, and more
&amp;ldquo;herself&amp;rdquo;. She found new reserves of motivation. She dropped the book she&amp;rsquo;d been
trying to write for years, and started a business. After that business failed,
she started another, this time successfully.&lt;/p&gt;

&lt;p&gt;Immediately convinced, I started by listening to guided
&lt;a href=&#34;https://en.wikipedia.org/wiki/Mindfulness#Mindfulness_meditation&#34;&gt;mindfulness meditations&lt;/a&gt;
on YouTube and &lt;a href=&#34;https://www.headspace.com/science&#34;&gt;phone apps&lt;/a&gt;. After a couple
weeks of that, I started doing breathing exercises on my own while sitting
listening to rain sounds. I made a habit of doing it for about an hour every day
on my lunch break. A few months later, I hated it.&lt;/p&gt;

&lt;p&gt;For whatever reason, after each session I would feel very uncomfortable. I would
be confronted with emotions that made me feel worthless and embarrassed. My mind
was bringing forward all these painful memories and feelings. Over time, I
started to dread the lunch break.&lt;/p&gt;

&lt;h2 id=&#34;the-revelation:b62e7cc9b8c7dde38594fd84cce85d41&#34;&gt;The Revelation&lt;/h2&gt;

&lt;p&gt;Then, one day, I had a profound sense of understanding. I realized what was
causing these negative emotions. I was in the middle of a major push to guide
our team to adopt a new programming language. While I&amp;rsquo;d led many such
initiatives before, I saw that I&amp;rsquo;d always had the same struggles. My ego and
self-worth were so tied into &amp;ldquo;my&amp;rdquo; campaigns that I wasn&amp;rsquo;t able to clearly hear
criticism. When people pointed out legitimate concerns or weaknesses, I would
get embarrassed and take it as a personal failure.&lt;/p&gt;

&lt;p&gt;I could see, from the very beginning, my current &amp;ldquo;campaign&amp;rdquo; had been poorly
executed. After researching the new technology for a long time, I felt like I
saw a place where it could solve some of our needs. Instead of carefully writing
out a proposal, I &amp;ldquo;half-jokingly&amp;rdquo; brought it up whenever I could. When the
listeners didn&amp;rsquo;t immediately react positively, I quickly retracted the idea,
&amp;ldquo;just kidding&amp;rdquo;. Over weeks I dropped not-so-subtle hints, &amp;ldquo;this would be better
with&amp;hellip;&amp;ldquo;, or, &amp;ldquo;we wouldn&amp;rsquo;t have this problem if&amp;hellip;&amp;rdquo;. Instead of convincing
anyone of anything, I just broadcasted to everyone how insecure I felt about the
issue. Everyone could clearly see that I cared, but I was too afraid to put
myself out there and make a serious suggestion. For months nothing changed, and
I felt more and more bitter that &amp;ldquo;my idea&amp;rdquo; wasn&amp;rsquo;t being listened to. In reality,
I hadn&amp;rsquo;t even made a serious suggestion yet!&lt;/p&gt;

&lt;p&gt;Eventually, the people around me started to listen and research the new
language. They agreed it really did solve a need we had. After a while, enough
people got on board that we started using it more. Even then, I held tightly to
&amp;ldquo;my idea&amp;rdquo;, afraid that it would prove to be a failure. When someone ran into
issues, I would get defensive. Even though I tried to keep my emotions in check,
I clearly took any criticism of the language as if it was a personal failing, no
matter how legitimate. I&amp;rsquo;d tightly coupled my ego to my ideas, and I always had.&lt;/p&gt;

&lt;p&gt;After a few months of meditating, this idea rocked my world. My negative
emotions came from a realization that my actions were not in line with my
values. I don&amp;rsquo;t want my self-worth to be tied to a simple tool. No tool is worth
it. Every tool fails. I&amp;rsquo;d sold myself short, lowered my self-worth to that of a
tool. This completely blocked my ability to be an effective technical leader.&lt;/p&gt;

&lt;p&gt;I couldn&amp;rsquo;t hear criticism of my ideas without getting defensive, so I couldn&amp;rsquo;t
think critically. I couldn&amp;rsquo;t help work out solutions to the best of my ability,
because that would mean admitting personal failure. Every side comment or
momentary struggle felt like a catastrophe.&lt;/p&gt;

&lt;p&gt;After realizing this, I felt a wave of relief. My emotional struggle leading
this programming language change made sense! And I had an easy way out! I simply
had to distance myself from my ideas, separate my self-worth from my tools. The
more I meditated, the easier it got.&lt;/p&gt;

&lt;h2 id=&#34;present-day:b62e7cc9b8c7dde38594fd84cce85d41&#34;&gt;Present Day&lt;/h2&gt;

&lt;p&gt;While I still sometimes get the old pang of embarrassment or defensiveness, now
I understand where it comes from, and how to move forward. I can let my ideas
go. I can consider ideas critically. I can make changes and adjustments if the
ideas are not working.&lt;/p&gt;

&lt;p&gt;This summer I decided to write up my learning. I wanted to always be able to
look back and remember these important lessons. My write-up was the seed for the
book &lt;a href=&#34;https://leanpub.com/convincingcoworkers&#34;&gt;Convincing Coworkers&lt;/a&gt;. I explain
the lessons learned from implementing a half dozen major technical changes, and
how I learned to lead without letting my ego cloud my thinking.&lt;/p&gt;

&lt;p&gt;If you want to become a more effective leader, I highly recommend a practice of
daily meditation. Meditation gives your mind a chance to deeply consider your
actions and values. It allows your subconscious to reflect on what and why you
act.&lt;/p&gt;

&lt;p&gt;Not everyone will struggle from the same issues as me. Every leader has a
different set of challenges and situations. Meditation lets your mind analyze
your unique weaknesses and strengths, coming up with a tailored perspective.
Meditating allows your mind to creatively look for ways to improve itself. While
rarely comfortable, this process can have incredible benefits.&lt;/p&gt;

&lt;h2 id=&#34;appendix-i-m-uncomfortable-with-the-connotations-of-meditation:b62e7cc9b8c7dde38594fd84cce85d41&#34;&gt;Appendix: &amp;ldquo;I&amp;rsquo;m uncomfortable with the connotations of meditation&amp;rdquo;&lt;/h2&gt;

&lt;p&gt;You may feel uncomfortable with meditation because of its current strong
associations with religion. Meditation is not inherently religious. I consider
meditation like an exercise routine for the mind. If you are religious, and
exercise your body as a form of religious expression, exercise is a religious
practice. If you are not religious, and you exercise to improve your health and
well-being, exercise is a secular practice. Meditation is just a form of mental
exercise. Simple as that.&lt;/p&gt;

&lt;p&gt;Meditation is a tool, and the tool wielder determines its use. Don&amp;rsquo;t let a fear
of the connotations of meditation stop you from experiencing improved
leadership, creativity, and focus!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Conj Talk: Teaching Clojure at IBM</title>
      <link>http://deliberate-software.com/teaching-clojure/</link>
      <pubDate>Wed, 18 Nov 2015 00:00:00 +0000</pubDate>
      
      <guid>http://deliberate-software.com/teaching-clojure/</guid>
      <description>&lt;p&gt;My talk at Conj 2015, enjoy!
&lt;a href=&#34;https://www.youtube.com/watch?v=BsLiPt90HDo&#34;&gt;Teaching Clojure&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Interview Humiliation</title>
      <link>http://deliberate-software.com/on-defeat/</link>
      <pubDate>Thu, 29 Oct 2015 00:00:00 +0000</pubDate>
      
      <guid>http://deliberate-software.com/on-defeat/</guid>
      <description>

&lt;p&gt;(All these great ideas, but no one is listening? Check out my
book: &lt;a href=&#34;https://leanpub.com/convincingcoworkers&#34;&gt;Convincing Coworkers&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;One day, I went into an interview, and I was humiliated.&lt;/p&gt;

&lt;h3 id=&#34;the-setup:b9c1bea9b4cd584af96fb286bdd6cbd2&#34;&gt;The Setup&lt;/h3&gt;

&lt;p&gt;I used to think very highly of myself. This was early on in the Test Driven
Development (TDD) craze, and I was one of the best I knew at it. I knew
interfaces, classes, mocking frameworks, and best practices. I&amp;rsquo;d been taught all
the tricks from some very smart people, and my confidence was high. Not only
that, but I&amp;rsquo;d just finished at work the restoration of an abandoned legacy
codebase to a bug-free, fully tested state completely on my own.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;d shipped Java, PHP, Perl, C#, and VB.NET, and I hadn&amp;rsquo;t been programming more
than a couple years. My first job, they&amp;rsquo;d made me a team lead over some very
senior developers within a year of my hire date. I was learning Clojure and
Common Lisp, and had just shipped an Android game I made entirely alone
(including the 2D physics engine).&lt;/p&gt;

&lt;p&gt;I thought I was incredible. Yet, due to an overwhelming sense of Imposter
Syndrome, I keenly knew that there were things I didn&amp;rsquo;t know. I&amp;rsquo;m mostly self
taught, so a lot of common CS concepts felt alien. I was waking up before work
and teaching myself algorithms, lisps, and math.&lt;/p&gt;

&lt;p&gt;Enter Company A.&lt;/p&gt;

&lt;p&gt;I flew through the phone screen &amp;ldquo;this is the best phone screen we&amp;rsquo;ve seen!&amp;rdquo; Of
course it is. &amp;ldquo;Your resume is very impressive.&amp;rdquo; Oh, I know!&lt;/p&gt;

&lt;p&gt;I get to the on-site interview.&lt;/p&gt;

&lt;h3 id=&#34;the-on-site:b9c1bea9b4cd584af96fb286bdd6cbd2&#34;&gt;The On-Site&lt;/h3&gt;

&lt;p&gt;I hadn&amp;rsquo;t been thoughtful enough to ask what to wear, so I wore a suit. I was
asked to present a project I&amp;rsquo;d worked on, and I picked my recently shipped
physics game that was up on Google Play. I walked into the reception area a few
minutes early.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;quot;You are 25 minutes late.&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;What?! I explain that I have the email saying 9:30! No matter, &amp;ldquo;hurry, they are
waiting!&amp;rdquo; Maybe I can salvage this. I walk into a conference room with a dozen
people sitting around a table looking bored and pissed.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;quot;Let&#39;s see your presentation.&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I start to open up my laptop. Meanwhile, they start to joke around to each other:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;quot;Oh, wow, Linux, what is this, 2003? I&#39;d hoped I&#39;d never have to see the
grub boot screen again! Can&#39;t you afford a real machine?&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I try to joke back while multitasking with my laptop. They only have the Mac
projector cable. No adapter. I&amp;rsquo;d thought ahead, and handed one of the developers
a thumb drive with the presentation and code. The interviewers are joking and
laughing to each other at my choice of clothes.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;quot;A suit, classic, where are you interviewing after this, a sales job?&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I roll with it, make some joke about &amp;ldquo;styling&amp;rdquo;. I start presenting about the 2D
physics engine I&amp;rsquo;d written as a learning project for my game. One of the most
interesting parts to me was how I&amp;rsquo;d first written it without any unit testing,
following just Clean Code practices. I then re-wrote it using heavy TDD. The
design turned out very different both times, which I thought was interesting to
see how TDD had influenced the design.&lt;/p&gt;

&lt;p&gt;About five minutes in, I am cut off:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;quot;This presentation is bullshit. You have no evidence, nothing valuable to
show, just spurious subjective opinions. You&#39;ve put up a straw man and now
are trying to knock it down assuming we are idiots. I&#39;ve seen enough.&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;At this point, it has been barely 15 minutes since I walked in. I remain calm
and professional, and start to address the raised concerns. I play the
meta-game, wondering if perhaps this is a test to see how I&amp;rsquo;ll react when
questioned and embarrassed. Even if this wasn&amp;rsquo;t a test, I was determined to be
at my most professional and finish with my head held high.&lt;/p&gt;

&lt;p&gt;Five developers walk out before I can finish my first sentence. One of the
remaining six interviewers looks embarrassed and asks if I could live code them
a web scraper in any language instead of the presentation. I turn my laptop
around (still no projector) and ask if PHP is acceptable. They are a Python
shop, and PHP is the closest to what they use that I am comfortable using when
this nervous.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;quot;PHP? Gross. I suppose if it is all you know...&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Unfortunately, I&amp;rsquo;ve got so much adrenaline in me that it takes me a few tries to
log in. I get on a roll after five minutes, and write the scraper. They throw me
a few more requirements, and within a half hour I&amp;rsquo;ve written stories for and
completed them all. At least two of the interviewers seem quite impressed.
Someone looks at their watch, &amp;ldquo;well, that&amp;rsquo;s all the stories we have, I guess
let&amp;rsquo;s break for lunch.&amp;rdquo;&lt;/p&gt;

&lt;p&gt;Lunch is a 35 minute walk up a hill in humid 93F weather, and I am wearing a
suit and dress shoes. When we get back from lunch I am hot, tired, and
foot-sore. I distinctly remember my feet blistering inside my sweat-soaked
patent leather shoes. I am called into the conference room again. At this point,
I am genuinely curious if this is some sort of extreme patience/calmness test,
or if I am being filmed for a reality show. No such luck.&lt;/p&gt;

&lt;p&gt;At the head of the table is the developer who &amp;ldquo;called me out&amp;rdquo; for my
presentation. Apparently my lunch mates were supposed to only take an hour, we
took almost 90 minutes. He looks at me, rolls his eyes, and asks in the most
sarcastic tone I have ever heard:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;quot;So, got any questions for me?&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I ask a few normal questions, meanwhile he is constantly checking his watch and
rolling his eyes. He answers briefly and rudely. I thank him for his time, and
ask him if there is more. He laughs.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;quot;Oh, we are done here.&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I am shown to the door.&lt;/p&gt;

&lt;p&gt;I sit in the car for a half hour, wondering what just happened. I look over to
the passenger seat piled high with text books I have been studying, books on
language design, compilers, algorithms, physics engines, TDD, and productivity.&lt;/p&gt;

&lt;p&gt;I was asked none of it. I threw up from stress out the car door into their
parking lot.&lt;/p&gt;

&lt;h3 id=&#34;aftermath:b9c1bea9b4cd584af96fb286bdd6cbd2&#34;&gt;Aftermath&lt;/h3&gt;

&lt;p&gt;I found out later their recruiter had given me and many other candidates the
wrong time. She was fired shortly after.&lt;/p&gt;

&lt;p&gt;I never found out if I had done something to make everyone so angry. I now
suspect that they were massively turned off by a host of things. Polyglot
programming, practicing TDD, the suit, the not Mac, the late arrival, and a bad
presentation probably all contributed to an immediate disqualification. I
rationally realize they were terrible and treated me terribly, but the
embarrassment is still there. I suspect my presentation was terrible from the
get go: that they were expecting some rock-star and instead got me.&lt;/p&gt;

&lt;p&gt;A number of times I have woken up in a cold sweat having dreamt about that
interview. In the large scheme of things, a bad interview is such a small thing,
but fear is fear. I still to this day wonder what I did wrong. Was I arrogant,
cocky, insufferable? Did my ego cause them to treat me that way, or was it all
them? What could I have done differently? I was only in there for a few minutes!&lt;/p&gt;

&lt;p&gt;Few events in my professional life have shaped me as much as that interview. I
have turned it into a forge for my talent, the anvil on which I beat my pride.
When I don&amp;rsquo;t know something, I am more willing to shrug and laugh it off, all
while learning as fast as I can. When I am humiliated professionally, I know
I&amp;rsquo;ve come through worse and thrived.&lt;/p&gt;

&lt;h3 id=&#34;break-the-cycle:b9c1bea9b4cd584af96fb286bdd6cbd2&#34;&gt;Break The Cycle&lt;/h3&gt;

&lt;p&gt;This story fills me with an overwhelming desire to never continue the cycle of
abuse. I strive every interview to try to respectfully work with the candidate,
and never humiliate them. I want every person I interview to leave feeling loved
as a human and respected, even if they are completely incapable to perform the
duties of the job.&lt;/p&gt;

&lt;p&gt;When I ask a question, if they struggle, we work it out together. When I ask for
code, we write it together, even if that means I have to do all the work. I can
make myself their servant, while still assessing their skill with accuracy and
dispassion. Those with the skill will show it, and those without will not feel
humiliated. I let them interview me, and if that means they want me to go up to
the whiteboard and struggle through a merge sort, so be it. In this way, I push
back against the interview culture that normalizes degradation and humiliation.&lt;/p&gt;

&lt;p&gt;If you are interviewing others, take a serious look at your practices. Would a
failed candidate feel humiliated and disrespected? What will they tell their
coworkers and friends at meetups about your company? Will they talk about
feeling respected, and how they hope to get the chance to work with you one day?
Or will they talk of a group of self-righteous jerks who abuse their power to
make others feel small? You can break the cycle.&lt;/p&gt;

&lt;p&gt;(All these great ideas, but no one is listening? Check out my
book: &lt;a href=&#34;https://leanpub.com/convincingcoworkers&#34;&gt;Convincing Coworkers&lt;/a&gt;)&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Learning Lisp Was Hard</title>
      <link>http://deliberate-software.com/learning-lisp-was-hard/</link>
      <pubDate>Wed, 17 Jun 2015 00:00:00 +0000</pubDate>
      
      <guid>http://deliberate-software.com/learning-lisp-was-hard/</guid>
      <description>

&lt;p&gt;Several times in the last week people have lamented to me that they &amp;ldquo;just don&amp;rsquo;t
get Lisp&amp;rdquo;. After hearing it for the third time, I thought back to my experience
learning a Lisp.&lt;/p&gt;

&lt;p&gt;When I set out to learn a Lisp, I expected it would be easy.&lt;/p&gt;

&lt;p&gt;I figured, &amp;ldquo;I am pretty awesome at PHP, and have worked professionally in Perl,
Python, and Java, this should be a cakewalk!&amp;rdquo; I&amp;rsquo;d read Paul Graham&amp;rsquo;s essays on
how Lisp is his secret weapon, and figured I needed to get into this secret
weapon stuff. My ego said, &amp;ldquo;since Paul is amazing, and I am too, I&amp;rsquo;ll be a
natural!&amp;rdquo;&lt;/p&gt;

&lt;p&gt;I expected to tinker around with &amp;ldquo;Lisp&amp;rdquo; (I didn&amp;rsquo;t know there was more
than one) and shortly master it (ship a website).&lt;/p&gt;

&lt;p&gt;What happened instead took me a little longer&amp;hellip;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;05/11 - 06/11 ~15 Hrs Attempted &lt;em&gt;Land Of Lisp&lt;/em&gt; (gave up)&lt;/li&gt;
&lt;li&gt;04/12 - 08/12 ~60 Hrs Rewrote a PHP side project in Clojure&lt;/li&gt;
&lt;li&gt;08/12 - 08/12 ~5 Hrs Attempted &lt;em&gt;Let Over Lambda&lt;/em&gt; (gave up)&lt;/li&gt;
&lt;li&gt;08/12 - 09/12 ~10 Hrs Read &lt;em&gt;Clojure Programming&lt;/em&gt; twice&lt;/li&gt;
&lt;li&gt;09/12 - 12/12 ~30 Hrs Took &lt;em&gt;CS173 Programming Languages&lt;/em&gt; online at Brown University&lt;/li&gt;
&lt;li&gt;05/13 - 07/13 ~50 Hrs Worked through &lt;em&gt;Let Over Lambda&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;05/13 - 07/14 ~250 Hrs Worked through &lt;em&gt;SICP&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;07/14 - Shipped production Clojure code&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This shows only the major events: books and large projects, but doesn&amp;rsquo;t show all
the countless blogs, tutorials, and tiny projects that also filled in the gaps.&lt;/p&gt;

&lt;p&gt;I think Lisps started to &amp;ldquo;click&amp;rdquo; for me around mid 2013, about two years after
deciding that I&amp;rsquo;d &amp;ldquo;tinker around&amp;rdquo; for a bit before &amp;ldquo;mastering&amp;rdquo; it. I was
approximately 170 hours in at that point. The book that finally made it all
click was &lt;em&gt;Let Over Lambda&lt;/em&gt;, but it took me two attempts and almost a year of
pre-learning to be able to understand enough to internalize the material.&lt;/p&gt;

&lt;p&gt;All said and done, I spent approximately 420 hours between Scheme, Common Lisp,
Racket, Typed Racket, and Clojure before I felt confident enough to suggest
shipping Clojure at work. I don&amp;rsquo;t claim to be a fast learner at all, and I fully
expect some people will snort with derision at how much time it took me - which
is kind of the point of this post.&lt;/p&gt;

&lt;p&gt;This timeline should show those who are struggling that what you are feeling is
normal. Learning anything new is hard. The more &amp;ldquo;new&amp;rdquo; it is, the harder it will
be. Clojure, macros, emacs, and a repl workflow are all very different from
everything I was used to and significantly more powerful than I would&amp;rsquo;ve
guessed. It took a long time for that to become normal, and for that power to
sink in and become a tool I anticipated having.&lt;/p&gt;

&lt;p&gt;If you are struggling and feel like a failure, understand &lt;em&gt;there is no wrong
way&lt;/em&gt;. It might take you a long time of repeated exposure before the alien
tooling starts to look familiar, and then comfortable. Maybe that book you are
struggling with actually IS too advanced, so find an easier one, and circle back
to the harder book later. Maybe, like me, you need some part of many different
books, tutorials, side projects, and katas.&lt;/p&gt;

&lt;p&gt;If you are struggling learning and in the Philly area, I am happy to meet up to
chat. I am also happy to help over the wire as well. I understand how
demoralizing the constant battle is to learn something new, especially when it
feels like your ego is on the line and the whole internet is pressuring you to
learn new things. Don&amp;rsquo;t give up, it&amp;rsquo;s not impossible.&lt;/p&gt;

&lt;h1 id=&#34;was-it-worth-it:9faaa4d71d8cbfa8443b331acd2e9e5e&#34;&gt;Was it worth it?&lt;/h1&gt;

&lt;p&gt;I can anticipate the follow up question: &amp;ldquo;was it worth it?&amp;rdquo; Absolutely yes. I
now feel a fluid comfort with my current professional stack (C#, F#, Clojure,
and JS) that previously I did not have. I am significantly more productive at
programming, regardless of the language. Work that was previously challenging is
now trivial, and work that was previously &amp;ldquo;impossible&amp;rdquo; now feels fun and
challenging. Was it learning Lisp specifically that caused all those changes?
Probably not, but I believe it was learning something far outside my normal
comfort zone that made the difference. I think I would have had equivalent
experiences had I invested that time learning Scala (the ML parts), Haskell,
Idris, J, R, Forth, etc.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Superiority Fatigue</title>
      <link>http://deliberate-software.com/superiority-fatigue/</link>
      <pubDate>Thu, 14 May 2015 00:00:00 +0000</pubDate>
      
      <guid>http://deliberate-software.com/superiority-fatigue/</guid>
      <description>&lt;p&gt;Learning new tools, technologies, and methodologies is
hard. Counter-intuitively, the most exhausting part is &lt;em&gt;after&lt;/em&gt; you&amp;rsquo;ve gained a
good comprehension of the tool, and now, filled with excitement, you try to
explain it to someone else.&lt;/p&gt;

&lt;p&gt;They almost always react with hostility.&lt;/p&gt;

&lt;p&gt;What is going on? You just took time to learn this exciting tool that could save
everyone a lot of time, and not only do they not care, but they resent you for
it!  Don&amp;rsquo;t they see how this could be great for everyone?&lt;/p&gt;

&lt;p&gt;The issue, like humans, is complex and dynamic. Maybe they feel like you&amp;rsquo;ve now
made them look lazy in comparison. Maybe they have tried other tools in the past
only to discover they weren&amp;rsquo;t as a good as promised. Maybe they are afraid they
won&amp;rsquo;t be able to learn the new tool as quickly as they need to, and will be left
behind. Maybe they are afraid all the time they spent learning the existing
tools will have been wasted. Maybe they are comfortable where they are, and
don&amp;rsquo;t care about increased productivity. Maybe they are tired of learning new
things.&lt;/p&gt;

&lt;p&gt;Most times I have seen this, I think the root emotion is fear. Fear of failure,
of change, of being embarrassed, of looking inferior. Fear is a powerful
emotion.&lt;/p&gt;

&lt;p&gt;When you respond with further hostility, this only will compound their
fear. Should they put their comfort and ego before the needs of the business?
No, but your counterattack will only further prove to them that their fear was
deserved.&lt;/p&gt;

&lt;p&gt;The final hardest part of learning a new tool is when you are forced to use an
inferior tool. Suddenly that liberating fresh air of power is replaced with a
suffocating claustrophobia of weakness. Even if the tool isn&amp;rsquo;t really that
inferior, it now &lt;em&gt;feels&lt;/em&gt; terrible. It becomes worse when you and many others
around you agree with the better value proposition of a new tool, and yet you
are still required to use the inferior tool due to someone in power blocking you
for political reasons.&lt;/p&gt;

&lt;p&gt;For the developer who sets out to learn new things, you must learn to deal with
inferior tools. Once you start learning, you will always find yourself in a
situation where you are required to use an inferior tool. For me, this has been
one of the hardest things to face in my career.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Suggested Skill Progression</title>
      <link>http://deliberate-software.com/skill-continuum/</link>
      <pubDate>Tue, 02 Dec 2014 00:00:00 +0000</pubDate>
      
      <guid>http://deliberate-software.com/skill-continuum/</guid>
      <description>

&lt;p&gt;(Want to become a Vim expert? Check out my new book: &lt;a href=&#34;https://leanpub.com/deliberatevim&#34;&gt;10 Minute Vim&lt;/a&gt;)&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt; Learning Vim is a waste of time; I can prove it! - Anonymous
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I recently had a gentle discussion with a new teammate about whether
or not they should learn to use Vim. My team uses a Vim emulator
inside Visual Studio and Emacs, and so we recommended he learn at
least the basics so to reduce friction when pair-programming (which we
do almost all the time).&lt;/p&gt;

&lt;p&gt;He really had no desire to learn it, and took no small amount of
offense when we suggested it. The friction he felt trying to &amp;ldquo;start
over&amp;rdquo; really bothered him. He set out to prove that Vim was not worth
his time, and that it was actually us who needed to stop using it,
because we were the duped slow ones.&lt;/p&gt;

&lt;p&gt;As any such localized experiments go, he never really came up with
anything conclusive either way. Personally, I suspect he spent more
time trying to figure out why Vim was worse than if he had just
buckled down and learned it. This got me thinking about skills we
learn as developers, and how much they cost.&lt;/p&gt;

&lt;h1 id=&#34;skills:32c130b82f3d281900b59a4e4247f69d&#34;&gt;Skills&lt;/h1&gt;

&lt;p&gt;Most skills fall along a continuum of tactical to strategic.&lt;/p&gt;

&lt;h3 id=&#34;tactical-skills:32c130b82f3d281900b59a4e4247f69d&#34;&gt;Tactical Skills&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Typing speed/accuracy&lt;/li&gt;
&lt;li&gt;Keyboard shortcuts&lt;/li&gt;
&lt;li&gt;&amp;ldquo;Mouse-free&amp;rdquo; editing systems: Vim, Emacs&lt;/li&gt;
&lt;li&gt;Clean coding practices&lt;/li&gt;
&lt;li&gt;Refactoring tools&lt;/li&gt;
&lt;li&gt;Repl Driven Development / Test Driven Development&lt;/li&gt;
&lt;li&gt;Debugging&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;mid-way-skills:32c130b82f3d281900b59a4e4247f69d&#34;&gt;Mid-way Skills&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Unit testing&lt;/li&gt;
&lt;li&gt;Building abstractions&lt;/li&gt;
&lt;li&gt;Designing simple solutions&lt;/li&gt;
&lt;li&gt;Automating tasks&lt;/li&gt;
&lt;li&gt;Learning new languages and frameworks&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;strategic-skills:32c130b82f3d281900b59a4e4247f69d&#34;&gt;Strategic Skills&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Gathering requirements&lt;/li&gt;
&lt;li&gt;Training developers&lt;/li&gt;
&lt;li&gt;Organizing and leading teams&lt;/li&gt;
&lt;li&gt;&amp;ldquo;Understanding the real problem&amp;rdquo;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The more strategic the skills, the &amp;ldquo;softer&amp;rdquo; they become. The reason for this is
that soft skills often allow for the greatest leverage on a project.&lt;/p&gt;

&lt;p&gt;Why is this?&lt;/p&gt;

&lt;p&gt;Consider the developer, who by more accurately gathering requirements for a few
extra days, realizes that the stakeholder can use a preexisting solution instead
of a six month planned project. If you consider how many keystrokes he saved,
there is no way he could have typed fast enough to make up six months of effort.
Unless he can type out a six month project in a few days, his time was better
spent where it was. Obviously, these opportunities do not happen all the time,
but they &lt;em&gt;do&lt;/em&gt; happen and it doesn&amp;rsquo;t take more than one or two a year to have
major impact!&lt;/p&gt;

&lt;p&gt;Think about the return on investment for training developers. If you have an
average team (and yes, we all do), there is a good chance you have some lower
performing developers. I have witnessed many times where a few months of pairing
to brush up the skills of a less skilled developer allowed them to become much
more productive. In terms of total company effort, that small investment paid
back many times before the end of the year as the newly trained developer was
able to tackle their work with the renewed vigor that comes from a greater
mastery of their work.&lt;/p&gt;

&lt;p&gt;Similarly, the judicious use of automation for deployment, testing, and building
greatly reduces the friction of development for entire teams. Lowered friction
means less cognitive burden.&lt;/p&gt;

&lt;p&gt;That being said, I think there comes a point where you have to put fingers to
keyboard and actually produce working software. Of course, the fastest and best
software is the software you never have to write. But, when you absolutely must
write or modify software, the ability to execute is essential. Tactical skills
increase in significance the closer you get to the work.&lt;/p&gt;

&lt;p&gt;While a great software tactician will never &amp;ldquo;beat&amp;rdquo; a great strategist in terms
of raw business value, a great strategist that is a terrible tactician can only
talk their way out of work. A strategist who forgets or ignores good tactics is
what we call an &amp;ldquo;architecture astronaut&amp;rdquo; or an &amp;ldquo;ivory tower architect&amp;rdquo;. These
disconnected strategists eventually start to remove business value as their
solutions make less and less practical sense.&lt;/p&gt;

&lt;p&gt;I think a developer who wants to improve should make sure they are improving all
across the spectrum. Don&amp;rsquo;t focus only on strategic or tactical skills, but seek
projects and teams that will allow you to gain skills across the board. I like
to try to focus on one skill from each side of the continuum each year. This
year, it is emacs automation and monads on the tactical side, and leading mature
teams on the strategic. By alternating readings, I find fuel to apply the
strategies using these new tactics!&lt;/p&gt;

&lt;p&gt;Lastly, on the subject of &amp;ldquo;what to study&amp;rdquo;, I think it is possible to study a
number of subjects all across the continuum. Unless you have weeks where you
never type any code at all, you can practice and learn new tactical techniques
all the time. If it slows you down today, but speeds you up next week, it might
just be worth it. Even if it slowed you down to a quarter your usual speed for
two weeks, but then gives you a measly 5% boost to productively after that,
you&amp;rsquo;ll earn that time back by the end of the year, plus some. And 5% is not hard
to do. I&amp;rsquo;d guess learning a few new navigation or refactoring shortcuts would
net you 5% easily.&lt;/p&gt;

&lt;p&gt;When studying more strategic skills, the same holds, but they are harder to
learn. The best way I have found for learning strategic skills is to read books
about it, and try to work around others who are good at it. Neither books or
working with others will get you all the way there, you also have to apply it
yourself.&lt;/p&gt;

&lt;h1 id=&#34;progression:32c130b82f3d281900b59a4e4247f69d&#34;&gt;Progression&lt;/h1&gt;

&lt;p&gt;I usually recommend that the more experienced a person is, the more mastery they
should have in the tactical skills. A suggested path I&amp;rsquo;ve recommended for a new
developer would look like this:&lt;/p&gt;

&lt;h3 id=&#34;0-6-months:32c130b82f3d281900b59a4e4247f69d&#34;&gt;0 - 6 Months:&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Typing speed/accuracy&lt;/li&gt;
&lt;li&gt;Keyboard shortcuts&lt;/li&gt;
&lt;li&gt;Repl Driven Development / Test Driven Development&lt;/li&gt;
&lt;li&gt;Unit testing&lt;/li&gt;
&lt;li&gt;Clean coding practices&lt;/li&gt;
&lt;li&gt;Designing simple solutions&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;0-2-years:32c130b82f3d281900b59a4e4247f69d&#34;&gt;0 - 2 Years:&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Debugging&lt;/li&gt;
&lt;li&gt;Refactoring tools&lt;/li&gt;
&lt;li&gt;Building abstractions&lt;/li&gt;
&lt;li&gt;Automating tasks&lt;/li&gt;
&lt;li&gt;Learning new languages and frameworks&lt;/li&gt;
&lt;li&gt;&amp;ldquo;Mouse-free&amp;rdquo; editing systems: Vim, Emacs&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;0-50-years:32c130b82f3d281900b59a4e4247f69d&#34;&gt;0 - 50+ Years:&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Gathering requirements&lt;/li&gt;
&lt;li&gt;Training developers&lt;/li&gt;
&lt;li&gt;Organizing and leading teams&lt;/li&gt;
&lt;li&gt;Understanding the real problem&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This is not a hard and fast list. If you are completely unsure of what to learn,
I recommend this rough progression just to get you started. If you are a two
year developer, and you cannot touch type, I think learning it can really help,
alongside the other 0 - 2 year skills.&lt;/p&gt;

&lt;p&gt;Not all skills along the list build on a mastery of the ones below it. A
developer can absolutely get to a very senior mastery of the strategic skills
only knowing one language and using notepad.exe. I believe that they are missing
out on a deep richness that comes from better knowing their field, and I suggest
they spend some time learning new languages and tools. The more tactical the
skill, usually, the easier it is to learn, so it won&amp;rsquo;t take very much time to
come up to speed.&lt;/p&gt;

&lt;p&gt;The hardest thing I think a more senior developer has to deal with is humbling
themselves to learn a perceived &amp;ldquo;entry-level&amp;rdquo; skill. I have another post brewing
about this very topic, so I&amp;rsquo;ll not get too much into it here. But if you have
gotten to a place where you feel like you are so senior that some skills are too
&amp;ldquo;entry-level&amp;rdquo; for you to learn, I think you need to humble yourself and learn
them. Nothing can be gained from pretending like they are not valuable.
Additionally, the assumption that your time is now so valuable that it is &amp;ldquo;a
waste&amp;rdquo; to spend it on learning tactical skills is absurd.&lt;/p&gt;

&lt;p&gt;Claiming you are too good to waste on low level skills not only belittles
everyone around you, but belies a deep misunderstanding of our field. The senior
developer who takes five times as long to enter and edit code isn&amp;rsquo;t just
spending longer to do that task, but they are paying a missed opportunity cost
in time they could have spent in more strategic endeavors. They could have been
training, planning, gathering requirements, building better automation, etc,
instead they stubbornly claim &amp;ldquo;typing isn&amp;rsquo;t what software is about&amp;rdquo;. By giving
it so little credence, they have made it most of their actual mental effort!
Take simple touch-typing. Imagine how much mental effort it takes the
hunt-and-peck typist to write out a single line of code. That is mental overhead
that is simply wasted. The developer who doesn&amp;rsquo;t have to think about how to move
a file or edit a structure finds themselves quickly through the tactical efforts
with little distraction, free to think deeply.&lt;/p&gt;

&lt;h1 id=&#34;resources:32c130b82f3d281900b59a4e4247f69d&#34;&gt;Resources&lt;/h1&gt;

&lt;p&gt;Here are some links and books to get you started on these topics.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Typing speed/accuracy - &lt;a href=&#34;http://store.steampowered.com/agecheck/app/246580/&#34;&gt;Typing of the Dead&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&amp;ldquo;Mouse-free&amp;rdquo; editing systems: Vim, Emacs - &lt;a href=&#34;http://vim-adventures.com/&#34;&gt;Vim Adventures&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Clean coding practices - &lt;a href=&#34;https://cleancoders.com/&#34;&gt;Clean Coders&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Repl Driven Development - &lt;a href=&#34;http://blog.jayfields.com/2014/01/repl-driven-development.html&#34;&gt;RDD&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Test Driven Development - &lt;a href=&#34;http://www.amazon.com/Test-Driven-Development-By-Example/dp/0321146530&#34;&gt;http://www.amazon.com/Test-Driven-Development-By-Example/dp/0321146530&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Debugging - &lt;a href=&#34;http://c.learncodethehardway.org/book/ex31.html&#34;&gt;Debugging&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Building abstractions / Designing Simple Solutions - &lt;a href=&#34;http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-4.html#%_toc_start&#34;&gt;Structure and Interpretation of Computer Programs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Training developers - &lt;a href=&#34;http://en.wikipedia.org/wiki/Pair_programming&#34;&gt;Pair Programming&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Organizing and leading teams - &lt;a href=&#34;http://managinghumans.com/&#34;&gt;Managing Humans&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Understanding the real problem - &lt;a href=&#34;http://en.wikipedia.org/wiki/Thinking,_Fast_and_Slow&#34;&gt;Thinking Fast and Slow&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Learning new languages and frameworks - &lt;a href=&#34;http://norvig.com/21-days.html&#34;&gt;Teach Yourself Programming in Ten Years&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Automating tasks &lt;a href=&#34;http://www.stuartellis.eu/articles/rake/&#34;&gt;Rake to Automate Tasks&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;(Want to become a Vim expert? Check out my new book: &lt;a href=&#34;https://leanpub.com/deliberatevim&#34;&gt;10 Minute Vim&lt;/a&gt;)&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>What Book Should I Read Next?</title>
      <link>http://deliberate-software.com/next-book/</link>
      <pubDate>Sat, 26 Jul 2014 00:00:00 +0000</pubDate>
      
      <guid>http://deliberate-software.com/next-book/</guid>
      <description>

&lt;p&gt;Edit: As a supplement to this: check out my &lt;a class=&#34;homelink&#34;
href=&#34;/page/books&#34;&gt;favorite books&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&amp;ldquo;It&amp;rsquo;s my first job, what book should I read first?&amp;rdquo;&lt;/p&gt;

&lt;p&gt;Recently, a few developers I am mentoring were curious about what book
to read first. Even mid and senior level developers I&amp;rsquo;ve known
sometimes struggle with this question.&lt;/p&gt;

&lt;p&gt;If you want to be truly great, you have to read technical books and
white papers, and you have to learn new programming languages. You
could figure the content out yourself from first principles, but you
will be about 50 years behind those who just read the
books. Additionally, if you stick to a certain language, you are
limiting yourself to only thinking about a problem in a way common to
the language.&lt;/p&gt;

&lt;p&gt;Just like with adding new features to a project, you should prioritize
your learning.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;d start by getting into the mindset that you will need roughly a
decade and at least ten thousand high quality hours to become a master
programmer. To be able to get that many high-value hours, you will
need to carefully select your jobs, and constantly be learning new
things that actually make you a better developer.&lt;/p&gt;

&lt;h2 id=&#34;languages:904c8ce0eabb9b2e2b79e3dcb6c341c9&#34;&gt;Languages&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;    &amp;quot;A language that doesn&#39;t affect the way you think about programming,
    is not worth knowing.&amp;quot; - Alan Perlis
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I agree with &lt;a
href=&#34;http://michaelochurch.wordpress.com/2012/07/27/six-languages-to-master/&#34;&gt;other developers&lt;/a&gt; who assert that a language is &lt;a
href=&#34;http://en.wikiquote.org/wiki/Alan_Perlis&#34;&gt;not worth learning&lt;/a&gt;
unless it teaches you something new and mind-expanding. There are exceptions of course. Maybe you want to switch stacks to get an awesome high-value job. By all means, learn the new stack.&lt;/p&gt;

&lt;p&gt;If you want to follow the extremely good &lt;a
href=&#34;http://pragprog.com/the-pragmatic-programmer&#34;&gt;advice of others&lt;/a&gt; and learn one new programming language a year, make each
one count. For example, if you are a Ruby guy, it is safe to say you
will learn nothing of really any mind-expanding value if you try to
learn PHP, Python, JavaScript, or Perl.&lt;/p&gt;

&lt;p&gt;Same for the family of Java, C++, C#, or VB.NET. One of those is plenty.&lt;/p&gt;

&lt;p&gt;Instead shoot for languages that will really beef up your thought
process. I like the advice given by &lt;a href=&#34;http://norvig.com/21-days.html&#34;&gt;Peter Norvig&lt;/a&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;     &amp;quot;Learn at least a half dozen programming languages. Include one
     language that supports class abstractions (like Java or C++), one that
     supports functional abstraction (like Lisp or ML), one that supports
     syntactic abstraction (like Lisp), one that supports declarative
     specifications (like Prolog or C++ templates), one that supports
     coroutines (like Icon or Scheme), and one that supports parallelism
     (like Sisal).&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I would add to that my own personal list: a language that forces you
to use monands for controlling side-effects (Haskell), and a language
that allows for dependent types (Idris).&lt;/p&gt;

&lt;p&gt;If you are saying, &amp;ldquo;wow, in Python, you have to put a colon at the end
of the function signature line, unlike in Ruby, that blows my mind&amp;rdquo;,
or &amp;ldquo;wow, in Java, the String keyword is uppercase instead of
lowercase!&amp;rdquo; chances are you are getting a very low return for your
investment of time.&lt;/p&gt;

&lt;p&gt;What is important about a new language is &lt;em&gt;not&lt;/em&gt; a new syntax. A new
syntax is just cruft that gets in the way of the new concepts. A new
concept might be closures. If you have always worked in Java, a
closure will really expand your mind. Or macros. If you have never
seen macros, the concept alone is completely foreign, not just the
syntax. That is where the value is. A good test if you are learning
something new is if you have to research what the concept even means,
without even needing to see the syntax first. For example, when I
started learning monads, I didn&amp;rsquo;t even need to see the syntax for how
Haskell does them, I didn&amp;rsquo;t even understand the concept &lt;em&gt;at all&lt;/em&gt;, so I
could read pretty much anything about the concept and get value out of
it. That is the high value content.&lt;/p&gt;

&lt;h2 id=&#34;frameworks:904c8ce0eabb9b2e2b79e3dcb6c341c9&#34;&gt;Frameworks&lt;/h2&gt;

&lt;p&gt;I would say very few frameworks are going to expand your mind in a way
that is worth the effort to learn them. Some very select frameworks
can cause you to think of a problem in a novel way and thus expand
your mind (off the top of my head: React.js, Core.Async, Akka,
Datomic) but those are very few and far between.&lt;/p&gt;

&lt;p&gt;Obviously, in production use, frameworks have their place, and they
can provide an immense boost to your day-to-day productivity and
safety, but very few overall will expand your mind in such a way that
would make you better at the craft. It is not hard to reason why. A
framework can only do what is possible in the language. If the
language is only so powerful, the framework cannot be more powerful
than that. You will be using tools that you could&amp;rsquo;ve written yourself
with your current skill level, but you won&amp;rsquo;t even get the benefit of
writing it yourself. Hopefully, those tools will be safer and save you
a lot of time, but saved time cranking out widgets at work will not
directly cause you to better understand programming.&lt;/p&gt;

&lt;h2 id=&#34;paradigms:904c8ce0eabb9b2e2b79e3dcb6c341c9&#34;&gt;Paradigms&lt;/h2&gt;

&lt;p&gt;It is fashionable these days to get into functional programming. If
you haven&amp;rsquo;t learned a language that supports a functional paradigm, I
highly recommend that as a good place to start. That being the case,
don&amp;rsquo;t forget to add a logic, a literate, and a declarative programming
language to your list too (you have ten years remember, you&amp;rsquo;ll need a
list). Why not pile on a stack based language too?&lt;/p&gt;

&lt;h2 id=&#34;libraries:904c8ce0eabb9b2e2b79e3dcb6c341c9&#34;&gt;Libraries&lt;/h2&gt;

&lt;p&gt;While it is important to be aware of the libraries in your space, I
would say these often provide the least mind-expanding
opportunities. A library, much like a framework, is usually
constrained by the power of the language. In most languages, libraries
are just convenience abstractions at or below the same abstraction
layer as the rest of your code. I would never consider doing my
day-to-day work without the full power of available libraries, but
they are not going to help me think any better about the work.&lt;/p&gt;

&lt;h2 id=&#34;meta-books:904c8ce0eabb9b2e2b79e3dcb6c341c9&#34;&gt;&amp;ldquo;Meta&amp;rdquo; books&lt;/h2&gt;

&lt;p&gt;A vast number of books exist that attempt to impart something of a
&amp;ldquo;mindset&amp;rdquo; for the developer. Usually, the author is retelling his
experiences, which can be entertaining, but of limited reuse. The best
meta books are those that use actual research and data to try to
explain our industry. Books like Peopleware, Code Complete, and
Pragmatic Programmer are great in this regard. These best books can
cause you to see the creation of software artifacts with a totally
different light: e.g. I remember first reading about using a
programming language to generate automatically the source files for a
given project. At the time for me, it was revolutionary.&lt;/p&gt;

&lt;h2 id=&#34;pattern-books:904c8ce0eabb9b2e2b79e3dcb6c341c9&#34;&gt;Pattern Books&lt;/h2&gt;

&lt;p&gt;I lately have come to think &amp;ldquo;pattern books&amp;rdquo; like Domain Driven Design,
Design Patterns, Patterns of Enterprise Architecture, Refactoring, etc
are just a way to try to replicate missing features in a language of a
lower power. These seem to be written for entirely Java and C#, and are mostly
complex solutions to complex problems created by the lack of power of the language. Apparently, I
am not alone: &lt;a
href=&#34;http://www.c2.com/cgi/wiki?AreDesignPatternsMissingLanguageFeatures&#34;&gt;Are Design Patterns Missing Language Features?&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;That being said, I think some parts of these books are helpful,
specifically, the ubiquitous language ideas from Domain Driven
Design. If your team has decided on always using the terms from a
certain book, and you are the only person who does not know them, I do
recommend at least skimming it just to ensure smooth communication.&lt;/p&gt;

&lt;h2 id=&#34;suggestions:904c8ce0eabb9b2e2b79e3dcb6c341c9&#34;&gt;Suggestions&lt;/h2&gt;

&lt;p&gt;I won&amp;rsquo;t suggest too many books or languages, but those I do are very
highly recommended.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-4.html#%_toc_start&#34;&gt;Structure and Interpretation of Computer Programs&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;The best book I&amp;rsquo;ve ever read. No other book I&amp;rsquo;ve read even comes close to beating this for sheer value per minute as this book. Do all the exercies, and you&amp;rsquo;ll be way ahead of the curve.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Code Complete&lt;/li&gt;
&lt;li&gt;Clean Code&lt;/li&gt;
&lt;li&gt;Pragmatic Programmer&lt;/li&gt;
&lt;li&gt;Productive Programming&lt;/li&gt;
&lt;li&gt;Peopleware&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;wrap-up:904c8ce0eabb9b2e2b79e3dcb6c341c9&#34;&gt;Wrap up&lt;/h2&gt;

&lt;p&gt;It takes courage to step outside your comfort zone and learn something
new. You might be the only person learning something new on your
team. That is ok! Don&amp;rsquo;t worry about &amp;ldquo;converting&amp;rdquo; everyone else to the
path of learning, and do not make fun of them or the only language
they know. (Developers who only know one language take any comment
good or bad about &amp;ldquo;their&amp;rdquo; language as a comment about themselves.) If
you do make fun of them, you will start to resent them. It&amp;rsquo;ll make you
look like an outsider, and they will ignore you and finally push you
out of the team.&lt;/p&gt;

&lt;p&gt;When you learn a new thing, be very careful to not run around trying
to use it everywhere. I am very careful to not use any new tool in
production until I&amp;rsquo;ve &amp;ldquo;moved on&amp;rdquo; to learning another tool, so I could
critically consider the best tool for the job without the &amp;ldquo;honeymoon&amp;rdquo;
effect clouding my judgment.&lt;/p&gt;

&lt;p&gt;My experience has been: keep getting better, and you will find
yourself in better and better places to work. A person who puts in the
effort to really master the craft is easy to spot and hard to
fake. Most people want to work with those who think like them, and you
cannot think like a master engineer only knowing one tool, so get
started now, and have fun!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Learn To Database</title>
      <link>http://deliberate-software.com/learn-to-database/</link>
      <pubDate>Wed, 16 Apr 2014 00:00:00 +0000</pubDate>
      
      <guid>http://deliberate-software.com/learn-to-database/</guid>
      <description>&lt;p&gt;
  &#34;... and it has to return 45,000 records a minute, or we are all
  screwed.&#34;
&lt;/p&gt; &lt;p&gt; Monday morning, we inherited a legacy codebase. Tuesday, the
  word came down on stone tablets. Forty-five thousand records a
  minute, and no amount of political maneuvering or incremental gains
  were going to do. Too many broken promises. The last team mass quit
  over three months, leaving us the two most junior
  developers. Someone high up promised big, and the buck stopped with
  us.
&lt;/p&gt; &lt;p&gt; &#34;Does anyone even know the throughput now?&#34;
&lt;/p&gt; &lt;p&gt; We still don&#39;t even have the dumb thing running on our
  machines. Two weeks later we have it running and enough data to test
  it. 2500 records a minute. When scaled to 45000 records it is still
  going 30 minutes later, so it doesn&#39;t even scale linearly. We are
  screwed.
&lt;/p&gt; &lt;p&gt; Most of us are front-end developers who stepped forward when
  everyone else stepped back. Databases are a distant memory,
  something we maybe did a few jobs back. You &#34;join&#34; tables, right?
  What we know of this process is it selects from 2-3 dozen databases
  using an ORM while running through an engine that does some
  supposedly massive calculations on the data, returning a message with
  several hundred fields. It can&#39;t be that hard to speed up.
&lt;/p&gt; &lt;p&gt; &#34;We need a new architecture, with read-optimized databases
  and queue-based messaging.&#34;
&lt;/p&gt; &lt;p&gt; None of us have ever built such a system, but we have read
  about it, and like the faithful we nod solemnly in agreement. Why
  not? If the database is read-optimized, surely it will perform like
  we need. But a few desist.
&lt;/p&gt; &lt;p&gt; Like paratroopers dropped into unknown territory without a
  map, we start to canvas the code, looking for landmarks. We split
  into two teams, one to try to speed up the current system, the other
  to start on the new architecture. Two teams trying two different
  approaches doubles our chances, right? Whiteboards around our desks
  fill with maps, glossaries, and diagrams. My team starts to dissect
  this mostly home-made ORM.
&lt;/p&gt; &lt;p&gt; &#34;Why is this selecting from the same table twice?&#34;
&lt;/p&gt; &lt;p&gt; The ORM generated query selects a list of id&#39;s from table A,
  then puts those id&#39;s into a list as a filter for the same table:
&lt;/p&gt; &lt;p&gt;
  SELECT * FROM A WHERE ID IN (SELECT ID FROM A WHERE ...)
&lt;/p&gt; &lt;p&gt; We scratch our heads a bit, but hey, that can&#39;t hurt
  anything, surely the database figures that sort of stuff out? Isn&#39;t
  that what... indexes do? Our most database-savvy developer can&#39;t
  stop coming back to that query. He says it doesn&#39;t smell
  right. Finally, he takes out the &#34;WHERE IN&#34; filter, shims in the
  query, and runs the process.
&lt;/p&gt; &lt;p&gt;
  &#34;Guys, the whole thing, all 45k came back in 40 seconds.&#34;
&lt;/p&gt; &lt;p&gt; We scoff at him, good joke! Our profiling showed time chewed
  up fairly evenly at every level throughout the entire
  process, not just the initial query. So the process came back,
  just empty, right? And who knows what Ancient Ones you disturbed by
  messing around with what the ORM generates, it will probably never
  work again. We run it again, 40 seconds, correct count of
  records. Odd, freak coincidence. We run it with the old filter still
  in place, it comes back 30+ minutes later, same exact data. Whoa,
  wait, what?
&lt;/p&gt; &lt;p&gt; Turns out, this ORM uses SELECT-WHERE-IN for every entity
  join. That first SELECT FROM A WHERE ID IN (SELECT ID FROM A WHERE
  ...) was used as the base criteria for every single lazy look-up of
  every entity on A, which were legion. What looked like slowness
  across the entire process was really ORM lazy loading at every
  level, with that first SELECT-WHERE-IN as the final filter in a line
  of nested SELECTS, some four levels deep. That initial bad query
  gets run countless times, and when it is slow, the whole system is
  slow.
&lt;/p&gt; &lt;p&gt; This is the story of how I learned an important lesson: if
  you are going to database, LEARN TO DATABASE.
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>You Should Go Home at 5:01</title>
      <link>http://deliberate-software.com/501-developer/</link>
      <pubDate>Sat, 14 Dec 2013 00:00:00 +0000</pubDate>
      
      <guid>http://deliberate-software.com/501-developer/</guid>
      <description>&lt;p&gt;Can we agree for this post that money, energy, time, and effort are all forms of
power? Like literally, if I wanted to build a building, I am going to need
tools, skills, materials, labor. I can use the most liquid form of power I have
(cash) to acquire all these things, or I can use a much less liquid form of
power (my time) to harvest, extract, refine, learn, and build my building
myself. Usually, economies of scale mean it is dramatically more efficient for
me to specialize in one way of converting time into liquid power. Then, when I
need something, I simply pass that money on to someone else who is also a
specialist.&lt;/p&gt;

&lt;p&gt;Now you know why I don&amp;rsquo;t quarry my own stone to build an amphitheater in my back
yard.&lt;/p&gt;

&lt;p&gt;When you work a job, you are converting one form of power you have: time (and
usually skills), into another much more liquid form of power: money. One can
extend the model to include calories and shelter (the power to sleep safely)
along with time and skills. Great, this is just basic economics, right? You need
power (money) to buy power (food and shelter) to buy power (time) to convert
back into more power (money). Since you are &amp;ldquo;harvesting&amp;rdquo; something finite and
therefore scarce (time out of your short life), if you are disciplined and
lucky, you can consistently end up with a net positive.&lt;/p&gt;

&lt;p&gt;On to the point! I read a post today mentioning
the &lt;a href=&#34;http://www.hanselman.com/blog/DarkMatterDevelopersTheUnseen99.aspx&#34;&gt;&amp;ldquo;5:01 developer&amp;rdquo;&lt;/a&gt;. It made me mad.&lt;/p&gt;

&lt;p&gt;Ideas like this are so subtle they just seep into your psyche. I don&amp;rsquo;t think
anyone would say under normal conditions, &amp;ldquo;I should really work for free today&amp;rdquo;.
But, effectively, that is what this whole phrase is about. The phrase lets
people who cram eight hours of work into ten hours &amp;ldquo;get back&amp;rdquo; at those that get
the same work done in six to eight. To clarify, this title is not about &amp;ldquo;saving
the company&amp;rdquo; or &amp;ldquo;giving back to society&amp;rdquo;; those are unusual conditions. No, it
is a chastisement of developers who do not &amp;ldquo;give back to the company&amp;rdquo;. Sort of a
tax, for the privilege of getting paid to work there, you should, according to
this ideal, just give back some of that power they gave you. Thinking about this
with the power model, you should accept money to work there in exchange for your
time, but, when the time comes, you should deliberately short-change yourself by
giving them extra time. Like some sort of weird tip.&lt;/p&gt;

&lt;p&gt;Hopefully this sounds as ridiculous as it really is.&lt;/p&gt;

&lt;p&gt;Now, in that post, the author sort of backpedals a little bit, saying that
&lt;i&gt;what he really meant&lt;/i&gt; was a developer who stops thinking about development
as soon as work is over: someone not passionate. The issue I have is the whole
wording of that phrase assumes a passion for their &lt;i&gt;job&lt;/i&gt;, not a passion for
their &lt;i&gt;craft&lt;/i&gt;.&lt;/p&gt;

&lt;p&gt;I do not think it makes sense to demand every person be &lt;i&gt;passionate&lt;/i&gt; about
the job they are doing. There have been many times I have (even at a job I
normally loved) done long, boring, and fruitless work. I did not do that work
out of my passion for the &amp;ldquo;Mission: Save the World of Enterprise Banking&amp;rdquo;, but
because I am a professional: I do what needs to be done to the best of my
abilities.&lt;/p&gt;

&lt;p&gt;I think professionalism is very important. In others I work with, I want to see
the attitude that causes someone to stay abreast in their field. I want to be
around those who keep their own saws sharp, who come in and work hard, and who
push themselves and those around them to be best they can.&lt;/p&gt;

&lt;p&gt;Back to overtime: in my experience, very few offices care enough about their
developers to let them sharpen their saws at work, so why would you waste your
precious free time there? Will they pay you more for it? Doubtful. Will they be
less likely to fire you when times get tough? &lt;i&gt;Maybe&lt;/i&gt;. Sounds to me like a
lot of speculation. A lot of investment for a marginal or non-existent return.
If you want more money: either ask for a raise, go take a raise at a new job, or
work a second job on the side. Those have a direct impact on your income.
Putting in extra hours hoping someone will notice and reward you for it makes
about as much sense as assuming you will get a raise for wearing the boss&amp;rsquo;s
favorite color every day.&lt;/p&gt;

&lt;p&gt;Consider the person who stays one extra hour a day as an &amp;ldquo;investment&amp;rdquo;. The
typical end of the year raise scale I have seen in the US in companies larger
than 30 people is a 0-5% increase a year. Uncommonly does someone get more than
that, and should not be considered a usual practice. The typical best you can
expect is 5%, maybe a bonus (in four diverse jobs, none gave bonuses, so I
haven&amp;rsquo;t considered them personally). Back to the extra hour a day. Not
completely out there, not putting in a vast amount extra, right? Well, one extra
hour is 12.5% percent more hours a day. But the most you can expect, on average,
is 5%, if you are lucky! To put it in perspective, I have seen guys put in 12
hour days and get fired because the boss didn&amp;rsquo;t get along with them.&lt;/p&gt;

&lt;p&gt;At a &lt;i&gt;few&lt;/i&gt; points in my career, I worked longer hours. Once it was because
I truly enjoyed the work and it was fun. Another time it was because I felt like
the extra time was going to directly pay off as an investment (it didn&amp;rsquo;t). A few
times I have stuck around to &amp;ldquo;wrap this off&amp;rdquo; or &amp;ldquo;help out with something deeply
unusual that has to be done outside normal work hours&amp;rdquo;. I recently recommended
to my little brother he work longer hours, as he was hired without many needed
skills and on shaky footing with the boss. He worked out a deal where he spent
two extra hours a day for a couple months reading and practicing to get &amp;ldquo;caught
up&amp;rdquo;. His boss got to see his hustle when he was the first one in and last one
out every day; he got to study away from the distractions of everyday life.
&lt;b&gt;In all circumstances, make overtime the exception, never the rule.&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;One last point. Before you think me a selfish jerk about my free time, know that
I make it a daily habit to spend 30-60 minutes outside work advancing my
development skills. I practice interactive rebases, work through awesome books,
do online courses, advance side projects, contribute to open source, give local
meetup talks, and learn new languages. These are the basics of what I feel is
necessary to sustain and advance myself as a professional. If I simply worked a
45-50 hour work week instead, I personally would not have the motivation to
&lt;i&gt;afterwards&lt;/i&gt; stay so abreast of important changes in the development world.
I would become much less effective over time, never getting any better. When the
need for new paradigms or technologies arose, I would be so stuck in a rut that
fear and ignorance would drive all my decisions.&lt;/p&gt;

&lt;p&gt;Treat overtime like an investment, and make it wisely. You are literally mining
your life for time, so make sure you are comfortable with your investment
strategies.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Sorry, but Refactorings Are Not Free (Technical Debt Interest)</title>
      <link>http://deliberate-software.com/refactoring-not-free/</link>
      <pubDate>Mon, 27 May 2013 00:00:00 +0000</pubDate>
      
      <guid>http://deliberate-software.com/refactoring-not-free/</guid>
      <description>&lt;p dir=&#34;ltr&#34;&gt;Sometimes, it’s far more efficient to leave certain &lt;a href=&#34;http://en.wikipedia.org/wiki/Technical_debt&#34;&gt;technical debts&lt;/a&gt; unpaid.&lt;/p&gt;
&lt;p dir=&#34;ltr&#34;&gt;I’m not saying we should leave messes, instead I am saying that cleaning and fixing technical debt is so important we must prioritize the most important changes first, by highest value to the team. You don&#39;t just do whatever feature is next alphabetically do you? Nope, so neither should you do that with refactorings.&lt;/p&gt;
&lt;p dir=&#34;ltr&#34;&gt;Not all technical debts are created equal: they consist of varying amounts of interest as well as principal. We still don’t have a way to accurately count the cost of technical debt. Fortunately, a little effort goes a long way toward estimating the its “payoff price”. Much like paying off a real debt, paying the highest-interest debts first makes the most sense.&lt;/p&gt;
&lt;p dir=&#34;ltr&#34;&gt;I’ll give you a real life example of some technical debt repayments. Last month at my work, we all agreed that all our namespaces, project names, and assembly names were woefully out of date. The naming confusion hadn&#39;t cost us a lot of time, but, like an annoying paper cut, we felt the pain whenever we looked at it. The system had outgrown the single small product it once was, and the names had not grown with it. A few project names did not even match up with their folders, causing extra disorientation every time anyone read them. We all voted to make updating all that cruft our “dev chore” of the week. Unfortunately, we did not weigh the relative cost versus the value of that cleanup to the team.&lt;/p&gt;
&lt;p dir=&#34;ltr&#34;&gt;Three weeks later, we were still neck-deep in cleanup. The renaming process caused many subtle bugs because of a variety of unconsidered issues. Our work ground to a halt as we put all hands on deck to finish the task and fix all the bugs.&lt;/p&gt;
&lt;p dir=&#34;ltr&#34;&gt;We hadn’t considered the terms on that technical debt. The principal was high: paying it cost weeks of nonstop effort. What about the interest? At best, it was tiny, fractions of a percent of the time it took to pay it off. How long will it take us to make that time back? Five years? Ten?&lt;/p&gt;
&lt;p dir=&#34;ltr&#34;&gt;Now consider another common refactoring: renaming a private function. What does it cost to fix a badly named local function? Practically nothing, just a few keystrokes. What does it cost to leave it undone? You have to look at that bad function definition each time you work in that file. Leaving the technical debt would cost more than paying it down. Why wouldn’t you immediately pay down such a debt?&lt;/p&gt;
&lt;p dir=&#34;ltr&#34;&gt;Clearly, this is not an exact science, but our refactorings will take on a very critical dimension when we add interest to the technical debt metaphor. I now evaluate any refactoring effort that would take longer than a few minutes in this mindset, thinking critically about what I do and why. I keep my big technical debt chores in a list prioritized by interest (regardless of the principal), so there is never any doubt what my next task should be.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>