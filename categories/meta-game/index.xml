<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Meta Game on deliberate software</title>
    <link>http://deliberate-software.com/categories/meta-game/</link>
    <description>Recent content in Meta Game on deliberate software</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 11 Apr 2017 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="http://deliberate-software.com/categories/meta-game/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>What Keeps a Self-Organizing Team From Falling Apart</title>
      <link>http://deliberate-software.com/self-organizing-balance/</link>
      <pubDate>Tue, 11 Apr 2017 00:00:00 +0000</pubDate>
      
      <guid>http://deliberate-software.com/self-organizing-balance/</guid>
      <description>My team has a decade of experience applying self-organizing teams and pair-programming to reduce wasted productivity in an enterprise banking application.
The Benefits No Technical Lead Our self-organizing practices eliminate the need for a technical lead who assigns and follows up on work. No work is assigned to any individual.
Individual Empowerment Developers are free to remove pain points as needed, so most have a strong sense of ownership. Team members feel empowered to champion for broad changes to the codebase.</description>
    </item>
    
    <item>
      <title>When Self-Organizing Teams Are Effective</title>
      <link>http://deliberate-software.com/self-organizing-teams/</link>
      <pubDate>Wed, 16 Mar 2016 00:00:00 +0000</pubDate>
      
      <guid>http://deliberate-software.com/self-organizing-teams/</guid>
      <description>A self-organizing team can be one of the most effective ways to build a team of high-quality professionals.
What Is A Self-Organizing Team? I have managed several self-organizing teams over the last few years. They are expected to follow these tenets:
 The whole team organizes themselves to best meet the business needs Each team chooses their practices and working agreements All technical and organizational decisions are driven through consensus Product owners determine &amp;ldquo;what&amp;rdquo; happens, the team determines &amp;ldquo;how&amp;rdquo; All staff participates in a culture of high-quality development Systems and practices are designed to maintain the greatest productivity across the next decade  When It Works Well  Small teams Highly skilled workers Need for high-quality software Business need for continuous and stable productivity for 5+ years Buy-in from management that &amp;ldquo;productivity is worth feeling out of control&amp;rdquo;  Self-organizing teams work best when most people on your team are eager to do more, be more, and learn more.</description>
    </item>
    
    <item>
      <title>Avoid Pop Culture Architecture</title>
      <link>http://deliberate-software.com/pop-culture-architecture/</link>
      <pubDate>Fri, 19 Feb 2016 00:00:00 +0000</pubDate>
      
      <guid>http://deliberate-software.com/pop-culture-architecture/</guid>
      <description>&amp;ldquo;ActiveRecord is so hot right now!&amp;rdquo; - comment in 2006
 Pop Culture Architecture is the current &amp;ldquo;fad&amp;rdquo; of the day. I have seen it be microservices, business capabilities, CQRS, service-oriented architecture, Domain-Driven Design, test driven development, ORMs, ActiveRecord, and MVC. Each of these have been fashionable at some point.
Fashion is ultimately a signaling mechanism for status. We are attracted to fashionable architectures because they signal we have worked on elite teams.</description>
    </item>
    
    <item>
      <title>Development Disappointment Disorder</title>
      <link>http://deliberate-software.com/development-disappointment-disorder/</link>
      <pubDate>Thu, 04 Feb 2016 00:00:00 +0000</pubDate>
      
      <guid>http://deliberate-software.com/development-disappointment-disorder/</guid>
      <description>&amp;ldquo;We&amp;rsquo;ve never had a successful release&amp;rdquo;
 You just finished this really hard feature. The whole thing was worse than anyone realized. Not only that, but the feature wasn&amp;rsquo;t clearly explained, so you lost time churning on the actual requirements. Despite all the confusion, iteration, and technical challenges, you managed to get it working! You look back, savoring how much you have learned and grown.
You show it off to the product owner.</description>
    </item>
    
    <item>
      <title>Designing A Compassionate Interview For A High Performing Individual</title>
      <link>http://deliberate-software.com/compassionate-interviewing/</link>
      <pubDate>Mon, 11 Jan 2016 00:00:00 +0000</pubDate>
      
      <guid>http://deliberate-software.com/compassionate-interviewing/</guid>
      <description>After my post Interview Humiliation, a number of people have asked me how I interview compassionately. I strive to make my interviews as stress-free and respectful as possible while still rendering a yes/no at the end.
Any good interview process needs to start with goals:
 Respect the candidate&amp;rsquo;s time Make the candidate comfortable Under-skilled candidates should feel no shame Both passing and failing candidates should want to tell their friends to apply We should render the same decision if the interview is repeated multiple times (with different exercises each time) The candidate should know the process in advance and not be able to earn a pass through short term &amp;ldquo;cramming&amp;rdquo; The candidate should feel we are all working collaboratively, instead of us against them  The Ideal Candidate</description>
    </item>
    
    <item>
      <title>Daily Meditation Improves Technical Leadership</title>
      <link>http://deliberate-software.com/daily-meditation-greatly-improved-my-technical-leadership/</link>
      <pubDate>Mon, 14 Dec 2015 00:00:00 +0000</pubDate>
      
      <guid>http://deliberate-software.com/daily-meditation-greatly-improved-my-technical-leadership/</guid>
      <description>A couple years ago, a coworker told me a success story about mindful meditation. He explained how his wife took a class that required an hour of daily meditation for a whole month. He reported that she found it uncomfortable, but the effects were astounding. She claimed to feel more relaxed, more focused, and more &amp;ldquo;herself&amp;rdquo;. She found new reserves of motivation. She dropped the book she&amp;rsquo;d been trying to write for years, and started a business.</description>
    </item>
    
    <item>
      <title>Conj Talk: Teaching Clojure at IBM</title>
      <link>http://deliberate-software.com/teaching-clojure/</link>
      <pubDate>Wed, 18 Nov 2015 00:00:00 +0000</pubDate>
      
      <guid>http://deliberate-software.com/teaching-clojure/</guid>
      <description>My talk at Conj 2015, enjoy! Teaching Clojure</description>
    </item>
    
    <item>
      <title>Better Interviews</title>
      <link>http://deliberate-software.com/on-defeat/</link>
      <pubDate>Thu, 29 Oct 2015 00:00:00 +0000</pubDate>
      
      <guid>http://deliberate-software.com/on-defeat/</guid>
      <description>(All these great ideas, but no one is listening? Check out my book: Convincing Coworkers)
One day, I went into an interview, and I was humiliated.
The Setup I used to think very highly of myself. This was early on in the Test Driven Development (TDD) craze, and I was one of the best I knew at it. I knew interfaces, classes, mocking frameworks, and best practices. I&amp;rsquo;d been taught all the tricks from some very smart people, and my confidence was high.</description>
    </item>
    
    <item>
      <title>Learning Lisp Was Hard</title>
      <link>http://deliberate-software.com/learning-lisp-was-hard/</link>
      <pubDate>Wed, 17 Jun 2015 00:00:00 +0000</pubDate>
      
      <guid>http://deliberate-software.com/learning-lisp-was-hard/</guid>
      <description>Several times in the last week people have lamented to me that they &amp;ldquo;just don&amp;rsquo;t get Lisp&amp;rdquo;. After hearing it for the third time, I thought back to my experience learning a Lisp.
When I set out to learn a Lisp, I expected it would be easy.
I figured, &amp;ldquo;I am pretty awesome at PHP, and have worked professionally in Perl, Python, and Java, this should be a cakewalk!&amp;rdquo; I&amp;rsquo;d read Paul Graham&amp;rsquo;s essays on how Lisp is his secret weapon, and figured I needed to get into this secret weapon stuff.</description>
    </item>
    
    <item>
      <title>Superiority Fatigue</title>
      <link>http://deliberate-software.com/superiority-fatigue/</link>
      <pubDate>Thu, 14 May 2015 00:00:00 +0000</pubDate>
      
      <guid>http://deliberate-software.com/superiority-fatigue/</guid>
      <description>Learning new tools, technologies, and methodologies is hard. Counter-intuitively, the most exhausting part is after you&amp;rsquo;ve gained a good comprehension of the tool, and now, filled with excitement, you try to explain it to someone else.
They almost always react with hostility.
What is going on? You just took time to learn this exciting tool that could save everyone a lot of time, and not only do they not care, but they resent you for it!</description>
    </item>
    
    <item>
      <title>Suggested Skill Progression</title>
      <link>http://deliberate-software.com/skill-continuum/</link>
      <pubDate>Tue, 02 Dec 2014 00:00:00 +0000</pubDate>
      
      <guid>http://deliberate-software.com/skill-continuum/</guid>
      <description>(Want to become a Vim expert? Check out my new book: 10 Minute Vim)
&amp;gt; Learning Vim is a waste of time; I can prove it! - Anonymous  I recently had a gentle discussion with a new teammate about whether or not they should learn to use Vim. My team uses a Vim emulator inside Visual Studio and Emacs, and so we recommended he learn at least the basics so to reduce friction when pair-programming (which we do almost all the time).</description>
    </item>
    
    <item>
      <title>What Book Should I Read Next?</title>
      <link>http://deliberate-software.com/next-book/</link>
      <pubDate>Sat, 26 Jul 2014 00:00:00 +0000</pubDate>
      
      <guid>http://deliberate-software.com/next-book/</guid>
      <description>Edit: As a supplement to this: check out my favorite books.
&amp;ldquo;It&amp;rsquo;s my first job, what book should I read first?&amp;rdquo;
I&amp;rsquo;ve been asked this question many times. Even mid and senior level developers I&amp;rsquo;ve known sometimes struggle with this question.
If you want to be truly great, you have to read technical books and white papers, and you have to learn new programming languages. You could figure the content out yourself from first principles, but you will be about 50 years behind those who just read the books.</description>
    </item>
    
    <item>
      <title>Learn To Database</title>
      <link>http://deliberate-software.com/learn-to-database/</link>
      <pubDate>Wed, 16 Apr 2014 00:00:00 +0000</pubDate>
      
      <guid>http://deliberate-software.com/learn-to-database/</guid>
      <description>&#34;... and it has to return 45,000 records a minute, or we are all screwed.&#34;  Monday morning, we inherited a legacy codebase. Tuesday, the word came down on stone tablets. Forty-five thousand records a minute, and no amount of political maneuvering or incremental gains were going to do. Too many broken promises. The last team mass quit over three months, leaving us the two most junior developers. Someone high up promised big, and the buck stopped with us.</description>
    </item>
    
    <item>
      <title>You Should Go Home at 5:01</title>
      <link>http://deliberate-software.com/501-developer/</link>
      <pubDate>Sat, 14 Dec 2013 00:00:00 +0000</pubDate>
      
      <guid>http://deliberate-software.com/501-developer/</guid>
      <description>Can we agree for this post that money, energy, time, and effort are all forms of power? Like literally, if I wanted to build a building, I am going to need tools, skills, materials, labor. I can use the most liquid form of power I have (cash) to acquire all these things, or I can use a much less liquid form of power (my time) to harvest, extract, refine, learn, and build my building myself.</description>
    </item>
    
    <item>
      <title>Sorry, but Refactorings Are Not Free (Technical Debt Interest)</title>
      <link>http://deliberate-software.com/refactoring-not-free/</link>
      <pubDate>Mon, 27 May 2013 00:00:00 +0000</pubDate>
      
      <guid>http://deliberate-software.com/refactoring-not-free/</guid>
      <description>Sometimes, it’s far more efficient to leave certain technical debts unpaid.
I’m not saying we should leave messes, instead I am saying that cleaning and fixing technical debt is so important we must prioritize the most important changes first, by highest value to the team. You don&#39;t just do whatever feature is next alphabetically do you? Nope, so neither should you do that with refactorings.
Not all technical debts are created equal: they consist of varying amounts of interest as well as principal.</description>
    </item>
    
    <item>
      <title>How To Escape From {programming_language}</title>
      <link>http://deliberate-software.com/how-to-escape-from-programming_language/</link>
      <pubDate>Wed, 13 Mar 2013 00:00:00 +0000</pubDate>
      
      <guid>http://deliberate-software.com/how-to-escape-from-programming_language/</guid>
      <description>As time goes on, developers will be all the harder pressed to keep up with the skyrocketing number of languages and frameworks. The number of javascript libraries alone is increasing at a furious pace: Angular, Backbone, Node, Ember, Knockout, Knockback, Meteor, etc, etc, etc. Who has a chance at keeping up? While having so many options is also beneficial, it makes it more and more challenging for a single developer to stay relevant.</description>
    </item>
    
    <item>
      <title>How to Suck Less at Your New Job</title>
      <link>http://deliberate-software.com/new-job-todo-list/</link>
      <pubDate>Sat, 19 Jan 2013 00:00:00 +0000</pubDate>
      
      <guid>http://deliberate-software.com/new-job-todo-list/</guid>
      <description>One thing I strongly recommend to developers when starting at a new job is to keep a list of everything that bothers you.
For every new company you work at, there will always be a set of things that you see as pain points, because you came from a place that did those things differently.
Notice I said differently, not better.
All of us have certain irrational attachments to the various things we are used to doing: things we do not because it’s the best way to do them, but because it’s become comfortable to do them that way.</description>
    </item>
    
    <item>
      <title>Ego Driven Development</title>
      <link>http://deliberate-software.com/ego-driven-development/</link>
      <pubDate>Fri, 12 Oct 2012 00:00:00 +0000</pubDate>
      
      <guid>http://deliberate-software.com/ego-driven-development/</guid>
      <description>Ego Driven Development, (EDD), is a software development anti-pattern where developers and managers repeatedly act as if established best practices do not apply to them, to the detriment of their organization. Institutional ego is most often to blame.
EDD plagues many organizations; here just some of the symptoms you might encounter:
  &amp;ldquo;Not Invented Here&amp;rdquo; syndrome. Expressed most commonly in a desire for everything needed to be developed in house.</description>
    </item>
    
    <item>
      <title>End To End Web Service Testing</title>
      <link>http://deliberate-software.com/end-to-end-web-service-testing/</link>
      <pubDate>Fri, 12 Oct 2012 00:00:00 +0000</pubDate>
      
      <guid>http://deliberate-software.com/end-to-end-web-service-testing/</guid>
      <description>At work last month, I was assigned to fix some bugs in an asynchronous legacy code base. My supervisor gave me a month to see what I could do, and to see if I could fix a few tricky bugs. The code is divided into two sections, a client application and a web server. Both the client application and the server have their own persistence, and they communicate through a soap web service.</description>
    </item>
    
    <item>
      <title>Learn That New Programming Language The Start-Up Way</title>
      <link>http://deliberate-software.com/learn-that-new-programming-language-the-start/</link>
      <pubDate>Tue, 07 Aug 2012 00:00:00 +0000</pubDate>
      
      <guid>http://deliberate-software.com/learn-that-new-programming-language-the-start/</guid>
      <description>I have a method I use for rapidly learning new programming languages that I wanted to share because I have not really seen it documented anywhere else. This technique is not for the faint of heart, but it is a lot of fun. Many of you old hands and graybeards probably already do this, but for those that don&#39;t, you have got to give it a shot at least once. You&#39;ll never be the same.</description>
    </item>
    
    <item>
      <title>On Developer Certifications</title>
      <link>http://deliberate-software.com/on-developer-certifications/</link>
      <pubDate>Tue, 28 Feb 2012 00:00:00 +0000</pubDate>
      
      <guid>http://deliberate-software.com/on-developer-certifications/</guid>
      <description>I have often thought whenever I meet a programmer who is obviously grossly incompetent that there needs to be some sort of certification board for software engineering that can help enforce some minimal skills to help weed out the riff-raff.Obviously, this is completely impossible. The tools and community change so fast that individuals are barely able to stay on top; good luck getting a standards committee to completely revise every few months.</description>
    </item>
    
    <item>
      <title>Quality Is Future Speed</title>
      <link>http://deliberate-software.com/quality-is-future-speed/</link>
      <pubDate>Thu, 23 Feb 2012 00:00:00 +0000</pubDate>
      
      <guid>http://deliberate-software.com/quality-is-future-speed/</guid>
      <description>Lately, I have been deliberating on quality vs. speed. Throughout my career, I have worked with developers who basically consider quality to be a programmer&#39;s vice, an extravagance only for the navel-gazing idealists. I have also worked with developers who consider all time spent on quality to be of the utmost importance, and that programming for speed is for those lazy and slapdash realists. I recently read Yegge&#39;s post Done, and Get&#39;s Things Smart, and I think I agree with Yegge on this point, that it is possible to perform fast and with high quality, and like a wandering samurai, that is the path I seek.</description>
    </item>
    
    <item>
      <title>New Years Android Triumph</title>
      <link>http://deliberate-software.com/new-years-triumph/</link>
      <pubDate>Sun, 01 Jan 2012 00:00:00 +0000</pubDate>
      
      <guid>http://deliberate-software.com/new-years-triumph/</guid>
      <description>December 1st, I made myself a New Year&#39;s resolution to completely create an Android game that I would not be ashamed to show people from (mostly) scratch before the end of December. What made it the most fun was that I started with practically no experience with the Android platform at all, and so I got to pick it up by the seat of my pants.The biggest challenge was probably the last three days, where I was faced with some hard calls, when the deadline loomed, and my still mile-long list of wants had to be pruned down just about every few hours.</description>
    </item>
    
    <item>
      <title>Why I Can&#39;t Pick A Language</title>
      <link>http://deliberate-software.com/why-i-cant-get-focused-its-a-double-entendre/</link>
      <pubDate>Wed, 14 Dec 2011 00:00:00 +0000</pubDate>
      
      <guid>http://deliberate-software.com/why-i-cant-get-focused-its-a-double-entendre/</guid>
      <description>I can&#39;t get focused today. My mind is a torrent of activity completely unrelated to my task at hand, so I am writing this to get these thoughts out so I can get back to work.I got a call from a recruiter the other day trying to get me to come interview at this job. Right now I am working in VB.NET and Actionscript. Until this job, I was always working in open-source languages: Perl, PHP, and some Java.</description>
    </item>
    
    <item>
      <title>Testing Is To Programming What Math Is To Engineering</title>
      <link>http://deliberate-software.com/testing-is-to-programming-what-math-is-to-eng/</link>
      <pubDate>Mon, 26 Sep 2011 00:00:00 +0000</pubDate>
      
      <guid>http://deliberate-software.com/testing-is-to-programming-what-math-is-to-eng/</guid>
      <description>In ancient times, plenty of builders did their work without math, and I would guess that a good portion of them likely did it faster then their math-doing counterparts. I am certain that when builders first started using math to prove that buildings would stand up safely, they were mocked by their math-less counterparts. I can hear them now, &#34;Oh, Stephos, it takes you 5 times longer to prove your building will stand up, real men can just see that it will work&#34;</description>
    </item>
    
    <item>
      <title>Emacs/VIm The Endless Debate</title>
      <link>http://deliberate-software.com/the-endless-debate/</link>
      <pubDate>Fri, 22 Jul 2011 00:00:00 +0000</pubDate>
      
      <guid>http://deliberate-software.com/the-endless-debate/</guid>
      <description>The last three and a half years for me have been terrible. Why? Well, three and half years ago, I discovered the endless debate, Emacs vs. Vim. Being an efficiency nut, I could not fathom the horror of learning one, and by that action, not learning the other. What if the one I learned was not the &#34;best&#34; one? I could see that both were excellent and worth learning, but I wanted to learn both concurrently.</description>
    </item>
    
  </channel>
</rss>