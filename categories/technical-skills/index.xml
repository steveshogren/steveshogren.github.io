<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Technical Skills on Deliberate Software</title>
    <link>http://deliberate-software.com/categories/technical-skills/</link>
    <description>Recent content in Technical Skills on Deliberate Software</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 22 Jul 2016 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://deliberate-software.com/categories/technical-skills/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>When Pair-Programming Works</title>
      <link>http://deliberate-software.com/pairprogramming/</link>
      <pubDate>Fri, 22 Jul 2016 00:00:00 +0000</pubDate>
      
      <guid>http://deliberate-software.com/pairprogramming/</guid>
      <description>

&lt;p&gt;My current team has pair-programmed and followed strict TDD on a single codebase
for over ten years. The practices started from reading the literature on Extreme
Programming, which resonated with both the developers and leadership. As the
team changed, we continued to follow the practices.&lt;/p&gt;

&lt;p&gt;In the last five years, the developers choose to implement Arlo Belshee&amp;rsquo;s &lt;a href=&#34;http://csis.pace.edu/~grossman/dcs/XR4-PromiscuousPairing.pdf&#34;&gt;&amp;ldquo;Promiscuous Pairing&amp;rdquo;&lt;/a&gt;. We
switch pairs in short intervals: 180 minutes is our current preference.&lt;/p&gt;

&lt;p&gt;The pairing sessions start at 8:45AM and 1:00PM with the typical five-minute
stand-up. People report on any data that the rest of the team needs to hear,
including noteworthy technical details. Afterwards, the developers crowd around
a board with the current tasks in progress. We randomize the pairs, then each
pair decides what to work on from the current tasks.&lt;/p&gt;

&lt;p&gt;If a developer wants to not pair for a session, they go &amp;ldquo;odd&amp;rdquo;. We have a working
agreement that no production code can be written while odd. The odd person works
on automated testing, answering questions, researching technical debt,
investigating root causes of bugs, and authoring throwaway &amp;ldquo;spikes&amp;rdquo; for major
refactorings.&lt;/p&gt;

&lt;h2 id=&#34;pros:bd97cfb3b628f77ac97d1d5cdf96fc97&#34;&gt;Pros&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;No siloed information or &amp;ldquo;I don&amp;rsquo;t touch that section&amp;rdquo; areas&lt;/li&gt;
&lt;li&gt;The team must adopt a consistent set of styles, tools, shortcuts, workflow&lt;/li&gt;
&lt;li&gt;Developers can take vacation whenever they please&lt;/li&gt;
&lt;li&gt;Training is built in to the process from day one&lt;/li&gt;
&lt;li&gt;Developers quitting doesn&amp;rsquo;t throw the team into disarray&lt;/li&gt;
&lt;li&gt;Productivity is fairly stable across decades&lt;/li&gt;
&lt;li&gt;Protected time every day for research, refactoring, and technical debt&lt;/li&gt;
&lt;li&gt;Frequent rotation gives a natural cadence for fixing broken CI builds&lt;/li&gt;
&lt;li&gt;I personally spend a lot less time puttering around on Reddit, HN, etc (I&amp;rsquo;m
sure that is true for others)&lt;/li&gt;
&lt;li&gt;Pairs have much more courage and stamina to aggressively pay down technical
debt. Even the most mind-numbing technical debt isn&amp;rsquo;t so bad if you know you
are rotating off in two hours.&lt;/li&gt;
&lt;li&gt;Interruptions are much less disruptive, typically only one or two minutes to
get back into &amp;ldquo;flow&amp;rdquo;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;cons:bd97cfb3b628f77ac97d1d5cdf96fc97&#34;&gt;Cons&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Huge system &amp;ldquo;owned by everyone&amp;rdquo; is a lot for new developers to handle - training takes a long time&lt;/li&gt;
&lt;li&gt;Juggling tasks can be complex (e.g. what gets put on hold when not at full capacity)&lt;/li&gt;
&lt;li&gt;Support issues get passed around from pair to pair&lt;/li&gt;
&lt;li&gt;General feeling you are &amp;ldquo;not important&amp;rdquo; to the team&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;partly-good-partly-bad:bd97cfb3b628f77ac97d1d5cdf96fc97&#34;&gt;Partly Good, Partly Bad&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Pairing is polarizing

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;-&lt;/strong&gt; Hiring is slow: many developers hate pairing

&lt;ul&gt;
&lt;li&gt;Some developers we&amp;rsquo;ve interviewed unfortunately feel pairing is demeaning, disrespectful, or beneath them&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;-&lt;/strong&gt; Poor new hire retention

&lt;ul&gt;
&lt;li&gt;Some developers love the &lt;em&gt;idea&lt;/em&gt; of pairing, not the &lt;em&gt;practice&lt;/em&gt; of pairing; they often leave when they discover that distinction&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;+&lt;/strong&gt; Low employee churn: those that love pairing stick around far longer than industry average&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;No task ownership

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;-&lt;/strong&gt; Less emotional reward when completing a task&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;+&lt;/strong&gt; Less in-fighting about typical &amp;lsquo;code-ownership&amp;rsquo; bike-shed issues&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;+&lt;/strong&gt; No one cares if a task is rejected by QA&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Rapid pair-switching can cause design churn on a task

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;-&lt;/strong&gt; Tasks can take longer to complete&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;+&lt;/strong&gt; Tough tasks get prototyped several times and seen by whole team&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We&amp;rsquo;ve found this set of trade-offs works very well with our team. The ten of us
are all doing active development on a 3.4 million-line enterprise banking
application. Quality and the ability to quickly conform to new regulations are
of paramount importance. The team regularly has a discussion as to whether we
should keep or abandon the policy of enforced pairing, and the consensus thus
far remains to keep it.&lt;/p&gt;

&lt;p&gt;We plan to be around for at least the next decade. Our team requires a workflow
that allows for the rapid development of high-quality features while keeping the
team stress-free and happy with their work. Since we plan on a decade scale, our
development process must take into account the importance of long-term
happiness, training, and the courage to aggressively pay down technical debt.&lt;/p&gt;

&lt;h2 id=&#34;how-to-get-started:bd97cfb3b628f77ac97d1d5cdf96fc97&#34;&gt;How To Get Started&lt;/h2&gt;

&lt;p&gt;This system works best with a given a set of preconditions.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;The whole team has to love pairing and want to adopt it&lt;/p&gt;

&lt;p&gt;If even a minority of developers hates pairing, it will be tortuous to force
them to do it. In our experience, &amp;gt;80% of developers hate pairing. If some
members are not interested, it would be better to split the team and
codebase. Forcing even a single developer to pair can be disastrous for
morale and productivity. No one wants to pair with someone who is sullen and
bitter. When pairing, misery cannot be hidden.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Management has to accept not having assigned tasks&lt;/p&gt;

&lt;p&gt;Assigning tasks reduces the beneficial effects of pair switching. The
assigned developer ends up &amp;ldquo;doing all the work with an observer&amp;rdquo;. This is
much less effective. The &amp;ldquo;observer&amp;rdquo; ends up tuning out, since the assignee
&amp;ldquo;probably already has it figured out&amp;rdquo;.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Proficiency at pairing is a discrete skill&lt;/p&gt;

&lt;p&gt;Many seasoned developers find themselves awkward and uncomfortable when
pairing for the first few months. Pairing cannot be assessed in any
meaningful way by just &amp;ldquo;trying it for a week&amp;rdquo; anymore than typing can be
assessed over hand-writing in just a week. Feelings of discomfort and
awkwardness in the first few months are completely normal and should not be
the criteria used to decide to continue the practice.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Let any pair make any decision&lt;/p&gt;

&lt;p&gt;Any pair should be authorized to make any decision to implement their
current task. They must however be ready to have that decision undone or
changed if the next pair finds it was too large, a poor design, out of
scope, etc.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Accept that others are better than you&lt;/p&gt;

&lt;p&gt;When trying out pairing, productivity doesn&amp;rsquo;t have to drop! Many developers
at first are uncomfortable by the rapid speed. The law of averages says half
the developers on the team will find their pair going much faster than they
are used to! These feelings of inadequacy often lead to developers wanting
to discontinue the practice. Over time, everyone realizes that it is okay to
not be the fastest, and instead take self-worth in what skills they do
bring. Maybe they are not the fastest, but they are good at catching little
details, etc.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;As a development system, this absolutely cannot be handed down from management.
It has to be implemented &amp;ldquo;by the people and for the people&amp;rdquo;.&lt;/p&gt;

&lt;h2 id=&#34;conclusion:bd97cfb3b628f77ac97d1d5cdf96fc97&#34;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;We have seen promiscuous pairing completely change our organization. As a team,
we accomplish far more than we would otherwise. We are able to tackle new
systems, languages, and tools with ease. When someone learns a new valuable
technique, it spreads organically through the team.&lt;/p&gt;

&lt;p&gt;Feel free to tweet at me if you have any questions or clarifications!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Vim Refactoring Patterns</title>
      <link>http://deliberate-software.com/vim-refactoring-patterns/</link>
      <pubDate>Wed, 22 Jun 2016 00:00:00 +0000</pubDate>
      
      <guid>http://deliberate-software.com/vim-refactoring-patterns/</guid>
      <description>

&lt;p&gt;Editor macros are a secret weapon for editing text. While they are hard to
learn, no other tool offers such broad speed and power for automating changes. A
skilled macro wielder can make huge changes to a codebase with ease.&lt;/p&gt;

&lt;p&gt;Here are some inspirational patterns to demonstrate major structural
refactorings using Vim macros and search/replace commands.&lt;/p&gt;

&lt;!-- # Macro Saving --&gt;

&lt;!-- When you build a complex macro and want to save it for later, just save it off --&gt;

&lt;!-- to a file. Since a macro is just a list of commands to execute, you can copy and --&gt;

&lt;!-- paste macros into registers just like text: --&gt;

&lt;!-- * ```&#34;qp``` - Paste the &#39;q&#39; register contents --&gt;

&lt;!-- * ```&#34;qy``` - Insert selected text into the &#39;q&#39; register --&gt;

&lt;h1 id=&#34;reorder-a-list-of-numbers:1368fb58571a0f824354ae8f514a14fb&#34;&gt;Reorder A List Of Numbers&lt;/h1&gt;

&lt;p&gt;A change left me with a file with unordered numbers. The numbers needed to be
increasing, without changing the actual order of the lines. Macros are my first
choice to accomplish a repeated action.&lt;/p&gt;

&lt;p&gt;&lt;img class=&#34;pull-left&#34; src=&#34;http://deliberate-software.com/images/proto-macro-small.gif&#34;&gt;&lt;/img&gt;
&lt;div class=&#34;container-fluid&#34;&gt;
&lt;/div&gt;&lt;/p&gt;

&lt;p&gt;The commands:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;/;&lt;/code&gt; - Search for &amp;lsquo;;&amp;rsquo;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;n&lt;/code&gt;  - Go to next &amp;lsquo;;&amp;rsquo;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;qq&lt;/code&gt; - Start macro in &amp;lsquo;q&amp;rsquo; register&lt;/li&gt;
&lt;li&gt;&lt;code&gt;db&lt;/code&gt; - Delete backwards&lt;/li&gt;
&lt;li&gt;&lt;code&gt;N&lt;/code&gt;  - Search for previous &amp;lsquo;;&amp;rsquo;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;yb&lt;/code&gt; - Yank backwards&lt;/li&gt;
&lt;li&gt;&lt;code&gt;n&lt;/code&gt;  - Search for next &amp;lsquo;;&amp;rsquo;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;P&lt;/code&gt;  - Paste backwards&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Ctrl+a&lt;/code&gt; - Increment number&lt;/li&gt;
&lt;li&gt;&lt;code&gt;n&lt;/code&gt;  - Go to next &amp;lsquo;;&amp;rsquo;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;n&lt;/code&gt;  - Go to next &amp;lsquo;;&amp;rsquo;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;q&lt;/code&gt;  - Stop Recording macro&lt;/li&gt;
&lt;li&gt;&lt;code&gt;33@q&lt;/code&gt; - Replay 33 times the &amp;lsquo;q&amp;rsquo; macro&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This only took me a few seconds to type! I was able to run this across the whole
file by replaying it the number of lines minus one. Because I saved it in the
&amp;lsquo;q&amp;rsquo; register, I was able to keep it saved for the whole session, which involved
refactoring several dozen similar files. I got to re-use the saved macro at
least 20 more times in that three hour session!&lt;/p&gt;

&lt;p&gt;I don&amp;rsquo;t think this macro is very complex. I would only leave it in the register
for a single session, and remake it in the future if needed. But if I wanted to
save it, running &lt;code&gt;&amp;quot;qp&lt;/code&gt; spits out: &lt;code&gt;dbNybnP^ann&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&#34;container-fluid&#34;&gt;
&lt;/div&gt;

&lt;h1 id=&#34;extract-interface-from-class:1368fb58571a0f824354ae8f514a14fb&#34;&gt;Extract Interface From Class&lt;/h1&gt;

&lt;p&gt;Let&amp;rsquo;s extract an interface from a class. A region-based search and replace is a
great fit for this task. Since we are not matching or reordering several blocks
of text, several search/replace steps work well. First, duplicate the whole
class body to the top of the file. Delete all lines that are not the function
signature lines. Remove all public keywords and add in semicolons on each line
ending. Finish up with adding the interface name and adding it to the class.&lt;/p&gt;

&lt;p&gt;&lt;img class=&#34;pull-left&#34; src=&#34;http://deliberate-software.com/images/interface-small.gif&#34;&gt;&lt;/img&gt;
&lt;div class=&#34;container-fluid&#34;&gt;
&lt;/div&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;11,37t8&lt;/code&gt; - Copy the class body to line 8&lt;/li&gt;
&lt;li&gt;&lt;code&gt;10,35g!/public/d&lt;/code&gt; - Delete every line not containing the word public from
line 10 to 35&lt;/li&gt;
&lt;li&gt;&lt;code&gt;10,12s/public//g&lt;/code&gt; - Delete all the public keywords in lines 10-12&lt;/li&gt;
&lt;li&gt;&lt;code&gt;10,12s/$/;/g&lt;/code&gt; - End each line with a semi-colon&lt;/li&gt;
&lt;li&gt;&lt;code&gt;:8&lt;/code&gt; - Jump to line 8 (and add interface and name)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;:14&lt;/code&gt; - Jump to line 14 (and add interface name)&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&#34;container-fluid&#34;&gt;
&lt;/div&gt;

&lt;h1 id=&#34;change-a-function-signature:1368fb58571a0f824354ae8f514a14fb&#34;&gt;Change a Function Signature&lt;/h1&gt;

&lt;p&gt;Let&amp;rsquo;s change a function signature to move a parameter into a generic and not
have to cast. I want to change a line like this&lt;/p&gt;

&lt;p&gt;&lt;code&gt;m.Name = (NameType)getEnum(typeof(NameType), req.Name);&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;into this:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;m.Name = getEnum&amp;lt;NameType&amp;gt;(req.Name);&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Normally, this is a very manual task, requiring many edits.&lt;/p&gt;

&lt;p&gt;In this case, a search/replace is possible, but probably a lot more complex.
We&amp;rsquo;d have to identify and remove the &lt;code&gt;(NameType)&lt;/code&gt;, locate the opening
&lt;code&gt;(&lt;/code&gt; of the parameter list, put in the &lt;code&gt;NameType&lt;/code&gt; inside a pair of
&lt;code&gt;&amp;lt;&amp;gt;&lt;/code&gt;, then remove the first parameter and comma. A macro record/playback
fits this task easily.&lt;/p&gt;

&lt;p&gt;We perform those steps above, but use the f/F commands to find markers in the
line. This allows the playback to work on any line with the same markers.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://deliberate-software.com/images/generic2.gif&#34;&gt;&lt;/img&gt;
&lt;div class=&#34;container-fluid&#34;&gt;
&lt;/div&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;/getEnum&lt;/code&gt; - Search for &lt;code&gt;getEnum&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;qq&lt;/code&gt; - Start macro in &lt;code&gt;q&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;F(&lt;/code&gt;&lt;code&gt;- Backwards find&lt;/code&gt;&lt;code&gt;(&lt;/code&gt;``&lt;/li&gt;
&lt;li&gt;&lt;code&gt;da(&lt;/code&gt;&lt;code&gt;- Delete whole block in&lt;/code&gt;&lt;code&gt;()&lt;/code&gt;``&lt;/li&gt;
&lt;li&gt;&lt;code&gt;f(&lt;/code&gt; - Find next &lt;code&gt;(&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;P&lt;/code&gt; - Paste backwards one character&lt;/li&gt;
&lt;li&gt;&lt;code&gt;r&amp;gt;&lt;/code&gt; - Replace character with &lt;code&gt;&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;F(&lt;/code&gt; - Backwards find &lt;code&gt;(&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;r&amp;lt;&lt;/code&gt; - Replace character with &lt;code&gt;&amp;lt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;f(&lt;/code&gt; - Find next &lt;code&gt;(&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;l&lt;/code&gt; - Left one character&lt;/li&gt;
&lt;li&gt;&lt;code&gt;df&lt;/code&gt; - Delete up to and including next space&lt;/li&gt;
&lt;li&gt;&lt;code&gt;n&lt;/code&gt; - Search next &lt;code&gt;getEnum&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;q&lt;/code&gt; - Stop macro recording&lt;/li&gt;
&lt;li&gt;&lt;code&gt;5@q&lt;/code&gt; - Replay macro 5 times&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&#34;container-fluid&#34;&gt;
&lt;/div&gt;

&lt;h1 id=&#34;update-sql-query-fields:1368fb58571a0f824354ae8f514a14fb&#34;&gt;Update SQL Query Fields&lt;/h1&gt;

&lt;p&gt;I needed to replace the names in a set of sql queries to sanitize some data to
hand off to a customer. I grabbed a set of
&lt;a href=&#34;http://www.dimfuture.net/starwars/random/generate.php&#34;&gt;Star Wars names&lt;/a&gt; and
copied it to my sql file. They were tab AND newline separated.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://deliberate-software.com/images/rename.gif&#34;&gt;&lt;/img&gt;
&lt;div class=&#34;container-fluid&#34;&gt;
&lt;/div&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;:1,26s/\t//g&lt;/code&gt; - Replace tabs with newlines&lt;/li&gt;
&lt;li&gt;&lt;code&gt;:1,100s/^\W*//g&lt;/code&gt; - Delete leading whitespace&lt;/li&gt;
&lt;li&gt;&lt;code&gt;:1,100s/\W*$//g&lt;/code&gt; - Delete trailing whitespace&lt;/li&gt;
&lt;li&gt;&lt;code&gt;:101&lt;/code&gt; - Jump to line 101&lt;/li&gt;
&lt;li&gt;&lt;code&gt;qq&lt;/code&gt; - Start macro in &lt;code&gt;q&lt;/code&gt; register&lt;/li&gt;
&lt;li&gt;&lt;code&gt;:-100&lt;/code&gt; - Jump 100 lines up&lt;/li&gt;
&lt;li&gt;&lt;code&gt;2yw&lt;/code&gt; - Yank (copy) two words&lt;/li&gt;
&lt;li&gt;&lt;code&gt;:+100&lt;/code&gt; - Jump down 100 lines&lt;/li&gt;
&lt;li&gt;&lt;code&gt;f)&lt;/code&gt; - Jump to next &lt;code&gt;)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;f&#39;&lt;/code&gt; - Jump to next &lt;code&gt;&#39;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;l&lt;/code&gt; - Move right&lt;/li&gt;
&lt;li&gt;&lt;code&gt;vi&#39;&lt;/code&gt; - Select text in quotes&lt;/li&gt;
&lt;li&gt;&lt;code&gt;p&lt;/code&gt; - Paste clipboard&lt;/li&gt;
&lt;li&gt;&lt;code&gt;:+1&lt;/code&gt; - Jump down one line&lt;/li&gt;
&lt;li&gt;&lt;code&gt;q&lt;/code&gt; - End macro&lt;/li&gt;
&lt;li&gt;&lt;code&gt;99@q&lt;/code&gt; - Replay macro 99 times&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;conclusion:1368fb58571a0f824354ae8f514a14fb&#34;&gt;Conclusion&lt;/h1&gt;

&lt;p&gt;I typically use a macro when a search/replace would require using several
groups. I use relative line jumps (&lt;code&gt;:+1&lt;/code&gt;) and liberal uses of the search
(&lt;code&gt;/?&lt;/code&gt; and &lt;code&gt;nN&lt;/code&gt;) and find (&lt;code&gt;fF&lt;/code&gt;) commands for navigating. The search
and find commands let my macro work the same on many different shapes of lines.
I also end each macro with a step for finding the &amp;ldquo;next&amp;rdquo; line to operate on. By
ensuring each iteration finishes by going to the &amp;ldquo;next&amp;rdquo; line, I can repeat the
command with the built-in command repeat without manually executing each one.&lt;/p&gt;

&lt;p&gt;Learning how to record and playback macros is a complex skill. With practice, it
becomes second-nature. My muscle memory grows stronger with each new macro.
Several of these I wrote without a mistake, almost as fast as I can type.&lt;/p&gt;

&lt;p&gt;Like any other skill, the first few dozen times you write a macro it won&amp;rsquo;t work
right, or will mangle the text. That is okay! If you are setting out to learn
macros, allow yourself to be slow while you master the skill. Touch-typing can
be many times faster than hand-writing or hunt-and-peck, but learning takes a
long time. Macros can save you huge amounts of time, but you have to allow
yourself to be slow while you master the skill.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Modern Dependency Injection</title>
      <link>http://deliberate-software.com/modern-di/</link>
      <pubDate>Sat, 11 Jun 2016 00:00:00 +0000</pubDate>
      
      <guid>http://deliberate-software.com/modern-di/</guid>
      <description>

&lt;p&gt;Dependency Injection can be greatly simplified while retaining all of its power.&lt;/p&gt;

&lt;h3 id=&#34;the-unnecessary-boilerplate:c289f8e530077f15501b76fa92fff59a&#34;&gt;The Unnecessary Boilerplate&lt;/h3&gt;

&lt;p&gt;Injection of an interface through the constructor is a common way to replace a
dependency for unit-test mocking. Unfortunately, it is an extremely verbose
pattern.&lt;/p&gt;

&lt;p&gt;Look how much boilerplate is needed just to mock out a call to
&lt;code&gt;DateTime.Now&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;lineno&#34;&gt; 1 &lt;/span&gt;&lt;span class=&#34;hll&#34;&gt;&lt;span class=&#34;k&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;interface&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ICurrentTime&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#34;lineno&#34;&gt; 2 &lt;/span&gt;&lt;span class=&#34;hll&#34;&gt;    &lt;span class=&#34;n&#34;&gt;DateTime&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;GetCurrentTime&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#34;lineno&#34;&gt; 3 &lt;/span&gt;&lt;span class=&#34;hll&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#34;lineno&#34;&gt; 4 &lt;/span&gt;&lt;span class=&#34;hll&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;lineno&#34;&gt; 5 &lt;/span&gt;&lt;span class=&#34;hll&#34;&gt;&lt;span class=&#34;k&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;CurrentTime&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ICurrentTime&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#34;lineno&#34;&gt; 6 &lt;/span&gt;&lt;span class=&#34;hll&#34;&gt;    &lt;span class=&#34;k&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;DateTime&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;GetCurrentTime&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#34;lineno&#34;&gt; 7 &lt;/span&gt;        &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;DateTime&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Now&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;lineno&#34;&gt; 8 &lt;/span&gt;&lt;span class=&#34;hll&#34;&gt;    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#34;lineno&#34;&gt; 9 &lt;/span&gt;&lt;span class=&#34;hll&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#34;lineno&#34;&gt;10 &lt;/span&gt;&lt;span class=&#34;hll&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;lineno&#34;&gt;11 &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;Formatter&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;lineno&#34;&gt;12 &lt;/span&gt;&lt;span class=&#34;hll&#34;&gt;    &lt;span class=&#34;k&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;readonly&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ICurrentTime&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;currentTime&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#34;lineno&#34;&gt;13 &lt;/span&gt;&lt;span class=&#34;hll&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;lineno&#34;&gt;14 &lt;/span&gt;&lt;span class=&#34;hll&#34;&gt;    &lt;span class=&#34;k&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;Formatter&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;CurrentTime&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;())&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{}&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#34;lineno&#34;&gt;15 &lt;/span&gt;&lt;span class=&#34;hll&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;lineno&#34;&gt;16 &lt;/span&gt;&lt;span class=&#34;hll&#34;&gt;    &lt;span class=&#34;k&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;Formatter&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ICurrentTime&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;currentTime&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#34;lineno&#34;&gt;17 &lt;/span&gt;&lt;span class=&#34;hll&#34;&gt;        &lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;currentTime&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;currentTime&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#34;lineno&#34;&gt;18 &lt;/span&gt;&lt;span class=&#34;hll&#34;&gt;    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#34;lineno&#34;&gt;19 &lt;/span&gt;&lt;span class=&#34;hll&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;lineno&#34;&gt;20 &lt;/span&gt;    &lt;span class=&#34;k&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;Format&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;input&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;lineno&#34;&gt;21 &lt;/span&gt;        &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Format&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;{0}: {1}&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;currentTime&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;GetCurrentTime&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;().&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ToString&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(),&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;input&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;lineno&#34;&gt;22 &lt;/span&gt;    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;lineno&#34;&gt;23 &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;We learned to mock this way because Java did not have lambdas at the time the
pattern was invented! Now that both Java and C# have lambdas, the existing DI
pattern can be improved.&lt;/p&gt;

&lt;h3 id=&#34;for-unit-test-mocking:c289f8e530077f15501b76fa92fff59a&#34;&gt;For Unit Test Mocking&lt;/h3&gt;

&lt;p&gt;Thanks to the power of lambdas, the previously highlighted lines (1-19) can be
removed!&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;lineno&#34;&gt;1 &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;Formatter&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;lineno&#34;&gt;2 &lt;/span&gt;    &lt;span class=&#34;k&#34;&gt;internal&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Func&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;DateTime&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;currentTime&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;DateTime&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Now&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;lineno&#34;&gt;3 &lt;/span&gt;
&lt;span class=&#34;lineno&#34;&gt;4 &lt;/span&gt;    &lt;span class=&#34;k&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;Format&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;input&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;lineno&#34;&gt;5 &lt;/span&gt;        &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Format&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;{0}: {1}&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;currentTime&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;().&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ToString&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(),&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;input&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;lineno&#34;&gt;6 &lt;/span&gt;    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;lineno&#34;&gt;7 &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;Much better! The code is easier to read, understand, and &lt;a href=&#34;http://deliberate-software.com/simplemock-unit-test-mocking/&#34;&gt;mock in a unit test&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;for-polymorphism:c289f8e530077f15501b76fa92fff59a&#34;&gt;For Polymorphism&lt;/h3&gt;

&lt;p&gt;If you still need to replace the function with another for polymorphic dispatch,
use constructor injection of just the lambda. Be forewarned, you probably need
this much less than you think!&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;lineno&#34;&gt; 1 &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;Formatter&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;lineno&#34;&gt; 2 &lt;/span&gt;    &lt;span class=&#34;k&#34;&gt;internal&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Func&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;DateTime&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;currentTime&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;lineno&#34;&gt; 3 &lt;/span&gt;
&lt;span class=&#34;lineno&#34;&gt; 4 &lt;/span&gt;    &lt;span class=&#34;k&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;Formatter&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;DateTime&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Now&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{}&lt;/span&gt;
&lt;span class=&#34;lineno&#34;&gt; 5 &lt;/span&gt;
&lt;span class=&#34;lineno&#34;&gt; 6 &lt;/span&gt;    &lt;span class=&#34;k&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;Formatter&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Func&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;DateTime&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;currentTime&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;lineno&#34;&gt; 7 &lt;/span&gt;        &lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;currentTime&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;currentTime&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;lineno&#34;&gt; 8 &lt;/span&gt;    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;lineno&#34;&gt; 9 &lt;/span&gt;
&lt;span class=&#34;lineno&#34;&gt;10 &lt;/span&gt;    &lt;span class=&#34;k&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;Format&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;input&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;lineno&#34;&gt;11 &lt;/span&gt;        &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Format&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;{0}: {1}&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;currentTime&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;().&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ToString&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(),&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;input&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;lineno&#34;&gt;12 &lt;/span&gt;    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;lineno&#34;&gt;13 &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;If you are heavily invested in unit-testing, you might find you need very little
actual interface polymorphism. To see where you really use interface
polymorphism, find the interfaces in your codebase only have a single concrete
class in production. Each interface with a single concrete class is test-only
boilerplate that can safely replaced with a lambda!&lt;/p&gt;

&lt;p&gt;For more examples, &lt;a href=&#34;http://deliberate-software.com/simplemock-unit-test-mocking/&#34;&gt;check out SimpleMock!&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Editor Abstractions</title>
      <link>http://deliberate-software.com/editor-abstractions/</link>
      <pubDate>Mon, 23 May 2016 00:00:00 +0000</pubDate>
      
      <guid>http://deliberate-software.com/editor-abstractions/</guid>
      <description>&lt;p&gt;I was recently inspired by a comment from a respected coworker:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&amp;ldquo;I am just as productive with basic Vim commands as I am with a refactoring
suite like ReSharper.&amp;rdquo;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I have pair-programmed with him for hundreds of hours of C# development. He is
equally productive with both, that much I know. On some tasks he is less
efficient than with ReSharper, on others he is more. To clarify, we use the
superb VsVim inside Visual Studio, so he still relies on the built-in tools for
&amp;ldquo;Auto-complete&amp;rdquo; and &amp;ldquo;Go to Definition&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;The greatest benefit comes when we work in JavaScript, Haskell, or Clojure. His
productivity doesn&amp;rsquo;t drop! &lt;strong&gt;His Vim and grep skills work just as effectively on
any text.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The tools in our editors and IDE&amp;rsquo;s are concrete abstractions. If you have a good
set of abstractions, you can use them to solve any problem. A well-designed
abstraction composes well, and can be combined with others for new utility.&lt;/p&gt;

&lt;p&gt;Consider the sequence abstractions. With only: &lt;code&gt;map&lt;/code&gt;, &lt;code&gt;filter&lt;/code&gt;, and
&lt;code&gt;fold&lt;/code&gt;, you can transform any sequence of data into another shape. Mastering
the three sequence abstractions empowers you to transform any data. The power comes
from how easily they can be combined.&lt;/p&gt;

&lt;p&gt;Editor abstractions are most powerful when they can be composed. You can
replicate most of the functionality of a refactoring suite using basic,
composable text-editing commands. Well-designed editor abstractions can be
recorded, edited, and replayed to transform text in any way you need. While no
replacement for semantic tools like &amp;ldquo;Language Errors&amp;rdquo;, &amp;ldquo;Go to Definition&amp;rdquo;, and
&amp;ldquo;Auto-complete&amp;rdquo;, they are an easy replacement for most other refactorings.&lt;/p&gt;

&lt;p&gt;If you work in multiple languages, composable text-editing commands are a much
better abstraction than those provided by a refactoring suite. Refactoring
suites often have dozens of bespoke commands that only work in certain contexts.
Even the best of these suites are often constrained to a single language. &lt;strong&gt;If
you ever work in more than one language, you will get the most value learning to
rely on abstractions that are constant across all environments.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I find I get the most value with a Vim plugin inside whatever environment
provides the best semantic tools for the language. When building an Android app,
I use IDEAVim inside Android Studio. For C#: VsVim inside Visual Studio. For all
other languages: Evil mode inside Emacs. Instead of hundreds of specialized
commands and contexts, I rely on a few basic abstractions to achieve any text
transformation I can imagine.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Wrangling State In Haskell</title>
      <link>http://deliberate-software.com/haskell-state/</link>
      <pubDate>Wed, 27 Apr 2016 00:00:00 +0000</pubDate>
      
      <guid>http://deliberate-software.com/haskell-state/</guid>
      <description>&lt;p&gt;Part 2 of my series &amp;ldquo;Wrangling State&amp;rdquo;. Part 1
&lt;a href=&#34;http://deliberate-software.com/clojure-state/&#34;&gt;Wrangling State In Clojure&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Haskell is a pure language, so you can only deal with application state by
passing parameters to functions. It is possible to pass parameters more
conveniently, but ultimately, every parameter needs to be passed.&lt;/p&gt;

&lt;p&gt;Here is a simple application for logging a timestamp to a file.&lt;/p&gt;

&lt;p&gt;First, &lt;strong&gt;Pass As Parameter&lt;/strong&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-haskell&#34;&gt;loadFile :: Filename -&amp;gt; IO String
loadFile fileName =
  BS.unpack &amp;lt;$&amp;gt; Str.readFile fileName

saveFile :: Filename -&amp;gt; String -&amp;gt; IO ()
saveFile fileName contents = 
  Str.writeFile fileName (BS.pack contents)

clearFile :: Filename -&amp;gt; IO ()
clearFile fileName = saveFile fileName &amp;quot;&amp;quot;

appendToFile :: Filename -&amp;gt; String -&amp;gt; IO ()
appendToFile fileName stuff = do
    contents &amp;lt;- loadFile fileName
    saveFile fileName (contents++stuff)

main fileName &amp;quot;-c&amp;quot; = clearFile fileName
main fileName &amp;quot;-log&amp;quot; = do
  now &amp;lt;- getCurrentTime
  appendToFile fileName ((show now)++ &amp;quot;\n&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We take in the file name and the command to perform, either to clear the file or
to append a new timestamp. While simple, this gets cumbersome in a large
application. Imagine passing a database connection through every single function
that eventually calls the database.&lt;/p&gt;

&lt;p&gt;Haskell can have unnamed parameters that are not defined in the argument list.
Sometimes this can improve legibility, other times it can worsen it. To use this
feature, the function signature must contain the value missing. The parameter(s)
must be the &amp;ldquo;last&amp;rdquo; parameter(s) to the function for this to work.&lt;/p&gt;

&lt;p&gt;Here is the same code with &lt;strong&gt;Unnamed Parameters&lt;/strong&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-haskell&#34;&gt;loadFile :: Filename -&amp;gt; IO String
loadFile = (liftM BS.unpack) . Str.readFile

saveFile :: String -&amp;gt; Filename -&amp;gt; IO ()
saveFile contents fileName =
  Str.writeFile fileName (BS.pack contents)

clearFile :: Filename -&amp;gt; IO ()
clearFile = saveFile &amp;quot;&amp;quot;

appendToFile :: String -&amp;gt; Filename -&amp;gt; IO ()
appendToFile stuff = (&amp;gt;&amp;gt;=) &amp;lt;$&amp;gt; loadFile &amp;lt;*&amp;gt; ((. (++stuff)) . (flip saveFile))

main fileName &amp;quot;-c&amp;quot; = clearFile fileName
main fileName &amp;quot;-log&amp;quot; = do
  now &amp;lt;- getCurrentTime
  appendToFile ((show now)++ &amp;quot;\n&amp;quot;) fileName
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Not all usages of &lt;code&gt;Filename&lt;/code&gt; can be easily unnamed. We did use it in
&lt;code&gt;loadFile&lt;/code&gt; and &lt;code&gt;clearFile&lt;/code&gt;. It does allow the &amp;ldquo;differences&amp;rdquo; to stand out
more. For example, &lt;code&gt;clearFile&lt;/code&gt; is just a &lt;code&gt;saveFile&lt;/code&gt; with an empty string
for the first parameter. We can see the differences clearly without the extra
parameter adding noise.&lt;/p&gt;

&lt;p&gt;We added it to &lt;code&gt;appendToFile&lt;/code&gt;, using point-free style. I find that it makes
it much harder to scan and read.&lt;/p&gt;

&lt;p&gt;Lastly, it is possible to encode such values into the type. The type of the
function itself can imply a value that can be retrieved. For example, the Reader
type can be combined with the IO type using ReaderT.&lt;/p&gt;

&lt;p&gt;Here is the code using the &lt;strong&gt;Reader Type&lt;/strong&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-haskell&#34;&gt;loadFile :: ReaderT Filename IO String
loadFile = do
  fileName &amp;lt;- ask
  liftIO $ BS.unpack &amp;lt;$&amp;gt; Str.readFile fileName

saveFile :: String -&amp;gt; ReaderT Filename IO ()
saveFile contents = do
  fileName &amp;lt;- ask
  liftIO $ Str.writeFile fileName (BS.pack contents)

clearFile :: ReaderT Filename IO ()
clearFile = saveFile &amp;quot;&amp;quot;

appendToFile :: String -&amp;gt; ReaderT Filename IO ()
appendToFile stuff = do
    contents &amp;lt;- loadFile
    saveFile (contents++stuff)

main fileName &amp;quot;-c&amp;quot; = runReaderT clearFile fileName
main fileName &amp;quot;-log&amp;quot; = do
  now &amp;lt;- getCurrentTime
  runReaderT (appendToFile ((show now)++ &amp;quot;\n&amp;quot;)) fileName
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Notice now how &lt;code&gt;appendToFile&lt;/code&gt; and &lt;code&gt;clearFile&lt;/code&gt; have the signature:
&lt;code&gt;ReaderT Filename IO ()&lt;/code&gt;, indicating that anything below them can &lt;code&gt;ask&lt;/code&gt;
for the Filename, while still performing an &lt;code&gt;IO&lt;/code&gt; action. The &amp;ldquo;entry-point&amp;rdquo;
calls in &lt;code&gt;main&lt;/code&gt; need to be initialized with the &lt;code&gt;runReaderT&lt;/code&gt; and the
&lt;code&gt;Filename&lt;/code&gt; we want to pass.&lt;/p&gt;

&lt;p&gt;For this case, the &lt;code&gt;ReaderT&lt;/code&gt; is substantially more readable. The &amp;ldquo;business
value&amp;rdquo; functions &lt;code&gt;appendToFile&lt;/code&gt; and &lt;code&gt;clearFile&lt;/code&gt; do not have to define
and pass the parameters needed for the lower level functions &lt;code&gt;saveFile&lt;/code&gt; and
&lt;code&gt;loadFile&lt;/code&gt;. &lt;strong&gt;Reader Type&lt;/strong&gt; gives us the value of the &lt;strong&gt;Unnamed
Parameters&lt;/strong&gt; for legibility!&lt;/p&gt;

&lt;p&gt;For something like a database connection that might be used pervasively, the
&lt;strong&gt;Reader Type&lt;/strong&gt; is essential for legible code. The low level functions that need
the &lt;code&gt;Filename&lt;/code&gt; are able to call &lt;code&gt;ask&lt;/code&gt; to retrieve it.&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;Dependencies&lt;/th&gt;
&lt;th&gt;Complexity&lt;/th&gt;
&lt;th&gt;Adding New State&lt;/th&gt;
&lt;th&gt;Best When&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Pass As Parameter&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Explicit&lt;/td&gt;
&lt;td&gt;Less Complex&lt;/td&gt;
&lt;td&gt;Harder&lt;/td&gt;
&lt;td&gt;State only needed in a few functions&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Unnamed Parameter&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Explicit&lt;/td&gt;
&lt;td&gt;Less Complex&lt;/td&gt;
&lt;td&gt;Harder&lt;/td&gt;
&lt;td&gt;Functions can be made more readable&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Reader Type&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Explicit&lt;/td&gt;
&lt;td&gt;More Complex&lt;/td&gt;
&lt;td&gt;Easier&lt;/td&gt;
&lt;td&gt;State needed throughout the application&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Compared to &lt;a href=&#34;http://deliberate-software.com/clojure-state/&#34;&gt;Clojure&lt;/a&gt;, Haskell has no way to
call a function &amp;ldquo;incorrectly&amp;rdquo;. All in-memory state is passed explicitly.&lt;/p&gt;

&lt;p&gt;Haskell&amp;rsquo;s type system prevents the programmer from forgetting state.
Unfortunately, it is still possible to pass as any parameter a value that is
invalid. The explicit nature of Haskell parameters does not prevent passing a
database connection string that does not exist, or a pointer to an incorrectly
setup data structure.&lt;/p&gt;

&lt;p&gt;Haskell is opinionated, and forces you to consider all the state up front before
calling a function. While this makes it harder to forget about state, it also
makes abstractions more leaky. Instead of relying on a function which may or may
not use a database, you must know and pass the database connection.&lt;/p&gt;

&lt;p&gt;Even though I believe the Haskell type system makes abstractions more leaky, I
prefer having to think up front about all my state. I find it makes the code
more clear, and helps me control what functions have access to state.&lt;/p&gt;

&lt;p&gt;Edit: Thanks to &lt;a href=&#34;https://www.reddit.com/r/haskell/comments/4go5dr/wrangling_state_in_haskell/d2j9aqz&#34;&gt;/u/kccqzy&lt;/a&gt; on reddit for offering a way to make
&lt;code&gt;appendToFile&lt;/code&gt; use point-free style.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Hot Loading Angular2 With State</title>
      <link>http://deliberate-software.com/figwheel-angular2/</link>
      <pubDate>Wed, 13 Apr 2016 00:00:00 +0000</pubDate>
      
      <guid>http://deliberate-software.com/figwheel-angular2/</guid>
      <description>&lt;p&gt;In &lt;a href=&#34;http://deliberate-software.com/cljs-angular2/&#34;&gt;&amp;ldquo;Using Angular2 in Clojurescript&amp;rdquo;&lt;/a&gt;
I showed how to get ClojureScript to run an Angular2 template. Basic hotswapping
worked, but state was lost on each load. Tweaking the original demo allows for
figwheel to swap in the template without losing client state.&lt;/p&gt;

&lt;p&gt;Here is a demo of hotswapping with state preservation:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://deliberate-software.com/images/hotswap.gif&#34;&gt;&lt;/img&gt;&lt;/p&gt;

&lt;p&gt;In this demo, we add three things to a list, then change the template that draws
the list. The client state stays in the browser, while the template changes
around it! Amazing!&lt;/p&gt;

&lt;p&gt;To get this working, follow the steps in the
&lt;a href=&#34;http://deliberate-software.com/cljs-angular2/&#34;&gt;&amp;ldquo;Using Angular2 in Clojurescript&amp;rdquo;&lt;/a&gt; first post.&lt;/p&gt;

&lt;p&gt;Replace the env/dev/cljs/dev.cljs contents with this simpler reloader:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-clojure&#34;&gt;(defn mount-component []
  ((.. js/ng -platform -browser -bootstrap)
   (.-AppComponent (.-app js/window))))

(figwheel/watch-and-reload :websocket-url &amp;quot;ws://localhost:3449/figwheel-ws&amp;quot;
                           :on-jsload mount-component)

(defonce only-attach-listener-once
  (.addEventListener js/document &amp;quot;DOMContentLoaded&amp;quot; mount-component))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We now only re-mount the component on figwheel notification. The state is moved
to an atom in the core namespace like so:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-clojure&#34;&gt;(defn get-app []
   (or (.-app js/window)
       (set! (.-app js/window) #js {})))

;; keep state of the component in a defonce atom
(defonce heroes (atom []))

(let [app (get-app)
      c (.Component (.-core js/ng)
                    #js {:selector &amp;quot;my-app&amp;quot;
                         :template (html [:div
                                          [:h1 &amp;quot; Demo&amp;quot;]
                                          [:div [:h2 &amp;quot;Hero List:&amp;quot;]]
                                          &amp;quot;
&amp;lt;input #newHero (keyup.enter)=\&amp;quot;addHero(newHero.value); newHero.value=&#39;&#39; \&amp;quot; &amp;gt;
&amp;lt;button (click)=\&amp;quot;addHero(newHero.value); newHero.value=&#39;&#39; \&amp;quot;&amp;gt;Add&amp;lt;/button&amp;gt;
&amp;lt;ul&amp;gt;&amp;lt;li *ngFor=\&amp;quot;#hero of heroes()\&amp;quot;&amp;gt;{{hero}}&amp;lt;/li&amp;gt;&amp;lt;/ul&amp;gt;
&amp;quot;
                                          ])})
      c (.Class c #js {:constructor (fn [])
                       :addHero (fn [hero]
                                  (swap! heroes #(conj % hero)))
                       :heroes (fn [] @heroes)
                       })]
  (set! (.-AppComponent app) c))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The site now will recompile and reload while preserving the state of the
component. This pattern can be extended to allow certain state to be preserved
while other state is reloaded. In this demo, the state in the &lt;code&gt;#newHero&lt;/code&gt;
field is not preserved, while the &lt;code&gt;heroes&lt;/code&gt; list is.&lt;/p&gt;

&lt;p&gt;I don&amp;rsquo;t have a great story for using hiccups to generate the special angular
tags like &lt;code&gt;*ngFor&lt;/code&gt;, &lt;code&gt;(click)&lt;/code&gt;, or &lt;code&gt;(keyup.enter)&lt;/code&gt;. For this demo, I
left that html as just a raw string.&lt;/p&gt;

&lt;p&gt;Check out the full working example on GitHub &lt;a href=&#34;https://github.com/steveshogren/angular2-cljs/tree/5025e2983ab054c88717c89528b85c7f9aaea851&#34;&gt;here&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Using Angular2 in ClojureScript</title>
      <link>http://deliberate-software.com/cljs-angular2/</link>
      <pubDate>Mon, 11 Apr 2016 00:00:00 +0000</pubDate>
      
      <guid>http://deliberate-software.com/cljs-angular2/</guid>
      <description>

&lt;p&gt;Getting ClojureScript to run Angular2 is not very difficult. Here is a sample
project demonstrating a working Angular2 site using Figwheel for hot-reloading
&lt;a href=&#34;https://github.com/steveshogren/angular2-cljs/tree/ae1a1abfe91a84cb5146931ff731885a2b1d5486&#34;&gt;on GitHub&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;1-install-luminus-cljs:468cef4ba8bc346f91f6a6d4062843b7&#34;&gt;1. Install Luminus +cljs&lt;/h3&gt;

&lt;p&gt;First, setup a basic ClojureScript site using Luminus starter template from
&lt;a href=&#34;http://www.luminusweb.net/docs&#34;&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;lein new luminus cljs-angular2 +cljs
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This builds a great basic starter project with ClojureScript and figwheel
already running. The template uses Reagent and React, which are excellent, but
we want Angular2!&lt;/p&gt;

&lt;h3 id=&#34;2-replace-figwheel-site-loader:468cef4ba8bc346f91f6a6d4062843b7&#34;&gt;2. Replace Figwheel Site Loader&lt;/h3&gt;

&lt;p&gt;Open the env/dev/cljs/dev.cljs file, which starts the site when running from
development.&lt;/p&gt;

&lt;p&gt;Replace the call to start a figwheel watcher with this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-clojurescript&#34;&gt;(defn reload []
  (core/init!)
  ((.. js/ng -platform -browser -bootstrap)
   (.-AppComponent (.-app js/window))))

(figwheel/watch-and-reload :websocket-url &amp;quot;ws://localhost:3449/figwheel-ws&amp;quot;
                           :on-jsload reload)

(core/init!)
(defonce only-attach-listener-once
  (.addEventListener js/document &amp;quot;DOMContentLoaded&amp;quot;
                     (fn []
                       ((.. js/ng -platform -browser -bootstrap)
                        (.-AppComponent (core/get-app))))))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The defonce will make sure I accidentally don&amp;rsquo;t attach the same event listener
twice when re-evaluating files at the repl.&lt;/p&gt;

&lt;h3 id=&#34;3-make-angular2-component:468cef4ba8bc346f91f6a6d4062843b7&#34;&gt;3. Make Angular2 Component&lt;/h3&gt;

&lt;p&gt;Replace the src-cljs/cljs-angular2/core.cljs file with this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-clojurescript&#34;&gt;(ns cljs-angular2.core
  (:require-macros [hiccups.core :as hiccups :refer [html]]))

(defn get-app []
   (or (.-app js/window)
       (set! (.-app js/window) #js {})))

(defn init! []
  (let [app (get-app)
        c (.Component (.-core js/ng)
                      #js {:selector &amp;quot;my-app&amp;quot;
                           :template (html [:div
                                            [:h1 &amp;quot;My first Angular 2 app&amp;quot;]
                                            [:div [:h2 &amp;quot;test&amp;quot;]]
                                            [:div [:h3 &amp;quot;test2&amp;quot;]]])})
        c (.Class c #js {:constructor (fn [])})]
    (set! (.-AppComponent app) c)))

&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;4-add-angular2-dependencies:468cef4ba8bc346f91f6a6d4062843b7&#34;&gt;4. Add Angular2 Dependencies&lt;/h3&gt;

&lt;p&gt;Add a package.json file into resources/public/ and fill it with this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{
  &amp;quot;name&amp;quot;: &amp;quot;angular2-quickstart&amp;quot;,
  &amp;quot;version&amp;quot;: &amp;quot;1.0.0&amp;quot;,
  &amp;quot;scripts&amp;quot;: {
    &amp;quot;start&amp;quot;: &amp;quot;npm run lite&amp;quot;,
    &amp;quot;lite&amp;quot;: &amp;quot;lite-server&amp;quot;
  },
  &amp;quot;license&amp;quot;: &amp;quot;ISC&amp;quot;,
  &amp;quot;dependencies&amp;quot;: {
    &amp;quot;angular2&amp;quot;: &amp;quot;2.0.0-beta.14&amp;quot;,
    &amp;quot;es6-shim&amp;quot;: &amp;quot;^0.35.0&amp;quot;,
    &amp;quot;reflect-metadata&amp;quot;: &amp;quot;0.1.2&amp;quot;,
    &amp;quot;rxjs&amp;quot;: &amp;quot;5.0.0-beta.2&amp;quot;,
    &amp;quot;zone.js&amp;quot;: &amp;quot;0.6.6&amp;quot;
  },
  &amp;quot;devDependencies&amp;quot;: {
    &amp;quot;concurrently&amp;quot;: &amp;quot;^2.0.0&amp;quot;,
    &amp;quot;lite-server&amp;quot;: &amp;quot;^2.2.0&amp;quot;
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now run &lt;code&gt;npm install&lt;/code&gt; from inside the resources/public directory.&lt;/p&gt;

&lt;h3 id=&#34;5-add-hiccups:468cef4ba8bc346f91f6a6d4062843b7&#34;&gt;5. Add Hiccups&lt;/h3&gt;

&lt;p&gt;Modify the project.clj in the root directory to include the &lt;code&gt;hiccups&lt;/code&gt;
dependency so we don&amp;rsquo;t have to write nasty html strings:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-clojure&#34;&gt;:dependencies [[hiccups &amp;quot;0.3.0&amp;quot;]
               ...
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;6-add-dependencies-to-home-html:468cef4ba8bc346f91f6a6d4062843b7&#34;&gt;6. Add Dependencies To Home HTML&lt;/h3&gt;

&lt;p&gt;Add the following to resources/templates/home.html before the line including
&lt;code&gt;{% script &amp;quot;/js/app.js&amp;quot; %}&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;my-app&amp;gt;Loading...&amp;lt;/my-app&amp;gt;
&amp;lt;script src=&amp;quot;node_modules/es6-shim/es6-shim.min.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;script src=&amp;quot;node_modules/angular2/es6/dev/src/testing/shims_for_IE.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;

&amp;lt;script src=&amp;quot;node_modules/angular2/bundles/angular2-polyfills.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;script src=&amp;quot;node_modules/rxjs/bundles/Rx.umd.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;script src=&amp;quot;node_modules/angular2/bundles/angular2-all.umd.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;7-start-site:468cef4ba8bc346f91f6a6d4062843b7&#34;&gt;7. Start Site!&lt;/h3&gt;

&lt;p&gt;Start the site with three tabs open running:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;lein run
lein cljsbuild auto
lein figwheel
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;lein run&lt;/code&gt; command should emit a line showing the port number like:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[2016-04-10 16:16:51,326][INFO][cljs-angular2.core] server started on port: 3000
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Just open your browser to &lt;code&gt;localhost:3000&lt;/code&gt; where 3000 is the port number
from the &lt;code&gt;lein run&lt;/code&gt; command. Try to modify the core.cljs file to have a new
template, and the site should automatically refresh with the new changes! If
that doesn&amp;rsquo;t work, make sure you are running both the cljsbuild on auto and
figwheel processes.&lt;/p&gt;

&lt;p&gt;Easy as that!&lt;/p&gt;

&lt;p&gt;If you get stuck, I checked in a working version &lt;a href=&#34;https://github.com/steveshogren/angular2-cljs/tree/ae1a1abfe91a84cb5146931ff731885a2b1d5486&#34;&gt;on GitHub&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Wrangling State In Clojure</title>
      <link>http://deliberate-software.com/clojure-state/</link>
      <pubDate>Tue, 29 Mar 2016 00:00:00 +0000</pubDate>
      
      <guid>http://deliberate-software.com/clojure-state/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;&amp;ldquo;Clojure is immutable, so you can&amp;rsquo;t change anything, how useless!&amp;rdquo;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Immutable languages make application state an interesting concept.&lt;/p&gt;

&lt;p&gt;In Clojure, you can deal with application state in two main ways. The first way
is to pass the state around as parameters to your functions. An example of
&lt;strong&gt;Pass As Parameter&lt;/strong&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-clojure&#34;&gt;(defn delete! [db-con table id]
  (jdbc/delete! db-con table [&amp;quot;id=?&amp;quot; id]))

;; valid-for-delete omitted

(defn delete-user [db-con user-id]
  (if (valid-for-delete db-con &amp;quot;user&amp;quot; user-id)
    (delete! db-con &amp;quot;user&amp;quot; user-id)))

(defn -main [&amp;amp; [connection-string user-id]]
  (let [db-con (make-connection connection-string)]
    (delete-user db-con user-id)))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This requires every function that eventually accesses a database to also have
the database connection. The trade-off is one of simplicity: it is easier to
test and interact with code that takes all of its dependencies as parameters.&lt;/p&gt;

&lt;p&gt;The alternative is to set a thread-safe value somewhere and give the underlying
code access to it. In Clojure, the &lt;code&gt;atom&lt;/code&gt; primitive is the first choice for
this. A common misconception is that Clojure prevents all mutation. The
&lt;code&gt;atom&lt;/code&gt; primitive can be mutated, it just has to be done with a special
&lt;code&gt;swap!&lt;/code&gt; function. Let&amp;rsquo;s call this: &lt;strong&gt;Mutate Shared Location&lt;/strong&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-clojure&#34;&gt;(def db-con (atom nil))

(defn delete! [table id]
  (jdbc/delete! @db-con table [&amp;quot;id=?&amp;quot; id]))

;; valid-for-delete omitted

(defn delete-user [user-id]
  (if (valid-for-delete &amp;quot;user&amp;quot; user-id)
    (delete! &amp;quot;user&amp;quot; user-id)))

(defn -main [&amp;amp; [connection-string user-id]]
  (swap! db-con (fn [old] (make-connection connection-string)))
  (delete-user user-id))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;atom&lt;/code&gt; allows us to not have to pass around the state. We mutate
&lt;code&gt;db-con&lt;/code&gt; with the connection parameters before calling any database accessing
functions. Unfortunately, this sets up an implicit dependency: &lt;code&gt;delete!&lt;/code&gt;
will only work if the &lt;code&gt;db-con&lt;/code&gt; atom was setup beforehand.&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;Dependencies&lt;/th&gt;
&lt;th&gt;Correctly Call Function&lt;/th&gt;
&lt;th&gt;Adding New State&lt;/th&gt;
&lt;th&gt;Best When&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Pass As Parameter&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Explicit&lt;/td&gt;
&lt;td&gt;Easier&lt;/td&gt;
&lt;td&gt;Harder&lt;/td&gt;
&lt;td&gt;State Values Change Frequently&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Mutate Shared Location&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Implicit&lt;/td&gt;
&lt;td&gt;Harder&lt;/td&gt;
&lt;td&gt;Easier&lt;/td&gt;
&lt;td&gt;State Values Change Rarely&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;strong&gt;Mutate Shared Location&lt;/strong&gt; might look familiar, in a lot of other languages it
is implemented with the Singleton Design Pattern. Often a Singleton class will
act as the mutable shared location for storing state.&lt;/p&gt;

&lt;p&gt;When adding new application state, I typically default to &lt;strong&gt;Pass As Parameter&lt;/strong&gt;
as my first choice. When &lt;strong&gt;Pass As Parameter&lt;/strong&gt; grows costly, I fall back to
&lt;strong&gt;Mutate Shared Location&lt;/strong&gt;. &lt;strong&gt;Pass As Parameter&lt;/strong&gt; works best when the value
changes regularly.&lt;/p&gt;

&lt;p&gt;An exception would be something as ubiquitous as a database connection in a CRUD
application. A CRUD application will typically need a database connection at
every leaf node, and it rarely changes, so I will use &lt;strong&gt;Mutate Shared Location&lt;/strong&gt;
from the start.&lt;/p&gt;

&lt;p&gt;With these two ways of passing application state, we are offered the flexibility
to choose the best tool for the job.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Avoid Pop Culture Architecture</title>
      <link>http://deliberate-software.com/pop-culture-architecture/</link>
      <pubDate>Fri, 19 Feb 2016 00:00:00 +0000</pubDate>
      
      <guid>http://deliberate-software.com/pop-culture-architecture/</guid>
      <description>

&lt;blockquote&gt;
&lt;p&gt;&amp;ldquo;ActiveRecord is so hot right now!&amp;rdquo; - comment in 2006&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Pop Culture Architecture is the current &amp;ldquo;fad&amp;rdquo; of the day. I have seen it be
microservices, business capabilities, CQRS, service-oriented architecture,
Domain-Driven Design, test driven development, ORMs, ActiveRecord, and MVC. Each
of these have been fashionable at some point.&lt;/p&gt;

&lt;p&gt;Fashion is ultimately a signaling mechanism for status. We are attracted to
fashionable architectures because they signal we have worked on elite teams. The
more difficult or costly the trade-offs of the architecture, the more elite and
special our team must have been to implement it successfully.&lt;/p&gt;

&lt;h2 id=&#34;example-microservices:5f95d372c851097c31e5c149858c384a&#34;&gt;Example: Microservices&lt;/h2&gt;

&lt;p&gt;Microservices is a current fashionable design. Microservices have very clear
pros and cons. They come with the ability to have a huge team or a fragmented
deployment that potentially allows for horizontal scaling. For that ability, you
will pay the immense costs: loss of strong consistency and transactions, a
labyrinthine operational footprint and deployment, increased communication
effort, expensive integration testing, and a code base that takes longer to
program. &lt;a href=&#34;http://martinfowler.com/articles/microservice-trade-offs.html&#34;&gt;(1)&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;If you have a small team or system that does not need horizontal scaling on
every single component, a microservice architecture is unlikely to solve your
communication or trust issues. You will spend dollars on deployment, consistency
issues, distributed debugging, and basic programming just to save a penny on
communication and teamwork.
&lt;a href=&#34;http://www.stackbuilders.com/news/the-hidden-costs-of-microservices&#34;&gt;(2)&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;For most teams, the logical conclusion probably will be: a microservice
architecture solves problems we don&amp;rsquo;t have.&lt;/p&gt;

&lt;p&gt;Microservices remain fashionable because they indicate work at the size and
scale of a handful of elite companies. You would only likely encounter a couple
hundred companies in the world that have a development staff so large or loads
so high as to truly require such a system. Because of the rarity of actual need,
it is a perfect signaling mechanism for status.&lt;/p&gt;

&lt;p&gt;Saying that you implemented a microservice architecture implies &amp;ldquo;my team was so
large or my product so popular, my team could afford to pay almost any cost to
meet the demand.&amp;rdquo;&lt;/p&gt;

&lt;p&gt;Carefully consider your architecture decisions. Do not allow fashion to dictate
your choices. Take pride in selecting the appropriate architecture for the
project, no matter how unpopular.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Haskell is the Dark Souls of Programming</title>
      <link>http://deliberate-software.com/haskell-is-the-dark-souls-of-programming/</link>
      <pubDate>Sat, 06 Feb 2016 00:00:00 +0000</pubDate>
      
      <guid>http://deliberate-software.com/haskell-is-the-dark-souls-of-programming/</guid>
      <description>

&lt;p&gt;Please don&amp;rsquo;t hit me, Haskell does a great job of that already.&lt;/p&gt;

&lt;p&gt;I love Haskell for the same reasons I love Dark Souls. Fantastic and inscrutable
lore, a great &lt;del&gt;combat&lt;/del&gt; type system, a cliff-wall difficulty curve, and
unending punishment.&lt;/p&gt;

&lt;p&gt;I want to collect some statistics from the GitHub API.&lt;/p&gt;

&lt;h3 id=&#34;step-one-stack:6807ae504e3906e54fafcf1fb117cd62&#34;&gt;Step One - Stack&lt;/h3&gt;

&lt;p&gt;I download stack and start a project:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;&amp;gt; cd /home/jack/programming &amp;amp;&amp;amp; stack new github-stats &amp;amp;&amp;amp; cd github-stats
Downloading template &amp;quot;new-template&amp;quot; to create project &amp;quot;github-stats&amp;quot; in github-stats/ ... 
 ......
All done.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So far so good. Does it work?&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;  &amp;gt; stack build &amp;amp;&amp;amp; stack exec -- github-stats-exe 
   github-stats-0.1.0.0: configure
   ..... 
   Registering github-stats-0.1.0.0...
   someFunc
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Awww yisss. This is going to be so easy!&lt;/p&gt;

&lt;h3 id=&#34;step-two-https-get-request:6807ae504e3906e54fafcf1fb117cd62&#34;&gt;Step Two - HTTPS GET Request&lt;/h3&gt;

&lt;p&gt;&lt;img src=&#34;http://deliberate-software.com/images/tomb_of_the_giants.gif&#34;&gt;&lt;/img&gt;&lt;/p&gt;

&lt;p&gt;Now I need to query the GitHub API. Not my first time to the rodeo, I generate a
personal access token from GitHub and copy it to a local file. What query should
I run first? How about the count for all ASM tetris repositories? Poking around
the &lt;a href=&#34;https://developer.github.com/v3/search/#search-repositories&#34;&gt;docs&lt;/a&gt; comes up
with:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;GET https://api.github.com/search/repositories?q=tetris+language:assembly&amp;amp;sort=stars&amp;amp;order=desc
User-Agent: steveshogren
Authorization: token PUT_TOKEN_HERE
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;{.. &amp;ldquo;total_count&amp;rdquo;: 354}&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Easy life. Now how do you GET a resource in Haskell? Ah,
&lt;a href=&#34;https://hackage.haskell.org/package/HTTP-4000.3.2/docs/Network-HTTP.html&#34;&gt;Network.HTTP&lt;/a&gt;!
I copy the front page sample into &lt;code&gt;src/Lib.hs&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-haskell&#34;&gt;module Lib
    ( someFunc
    ) where

x = simpleHTTP (getRequest &amp;quot;https://www.github.com/&amp;quot;) &amp;gt;&amp;gt;= fmap (take 100) . getResponseBody

someFunc :: IO ()
someFunc = 
   print x
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So simple! This is why laugh at my NodeJS loving friends!&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;&amp;gt; stack build
src/Lib.hs:5:5: Not in scope: ‘simpleHTTP’
src/Lib.hs:5:17: Not in scope: ‘getRequest’
src/Lib.hs:5:77: Not in scope: ‘getResponseBody’
Compilation failed.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Doesn&amp;rsquo;t compile. Durp, hackage is a package library, I need to add this to my
cabal. What is the name of the package? HTTP-4000? HTTP-4000.3.2? Nothing in
hackage seems to indicate what goes into the cabal file. I discover it is just
HTTP through trial and error. I update my cabal file&amp;hellip; in all three
build-depends&amp;hellip;?&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-haskell&#34;&gt;  build-depends:       base &amp;gt;= 4.7 &amp;amp;&amp;amp; &amp;lt; 5
                       , HTTP
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Hrm, same error.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;&amp;gt; stack build
src/Lib.hs:5:5: Not in scope: ‘simpleHTTP’
src/Lib.hs:5:17: Not in scope: ‘getRequest’
src/Lib.hs:5:77: Not in scope: ‘getResponseBody’
Compilation failed.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Oh, durp, I&amp;rsquo;d need an import. (WHY ISN&amp;rsquo;T THIS IN THE CODE SAMPLE?!) Also, print
doesn&amp;rsquo;t work, I need &lt;code&gt;putStrLn&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-haskell&#34;&gt;import Network.HTTP

x = simpleHTTP (getRequest &amp;quot;https://www.github.com/&amp;quot;) &amp;gt;&amp;gt;= fmap (take 100) . getResponseBody

someFunc :: IO ()
someFunc = x &amp;gt;&amp;gt;= putStrLn
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here goes!!!&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt; &amp;gt; stack build &amp;amp;&amp;amp; stack exec -- github-stats-exe
github-stats-exe: user error (https not supported)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Wat. Further inspection of the docs shows a line WAAY DOWN in paragraph 5.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;NOTE: This package only supports HTTP;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&#34;http://deliberate-software.com/images/nope_better.gif&#34;&gt;&lt;/img&gt;&lt;/p&gt;

&lt;p&gt;When &lt;del&gt;playing Dark Souls&lt;/del&gt;programming Haskell, sometimes the best move
is to run away. I search again. &lt;code&gt;haskell https request&lt;/code&gt; returns
&amp;ldquo;http-conduit&amp;rdquo; as the best choice. After adding http-conduit to my cabal, I come
up with this beast without any surprises:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-haskell&#34;&gt;query :: IO String
query = do
    initReq &amp;lt;- parseUrl &amp;quot;https://api.github.com/search/repositories&amp;quot;
    let r = initReq
                   { method = &amp;quot;GET&amp;quot;
                    , requestHeaders = [(hUserAgent, &amp;quot;steveshogren&amp;quot;)
                                      , (hAuthorization, &amp;quot;token PUT_TOKEN_HERE&amp;quot;)]}
    let request = setQueryString [(&amp;quot;q&amp;quot;, Just &amp;quot;tetris+language:assembly&amp;quot;)
                                 ,(&amp;quot;order&amp;quot;, Just &amp;quot;desc&amp;quot;)
                                 ,(&amp;quot;sort&amp;quot;, Just &amp;quot;stars&amp;quot;)] r
    manager &amp;lt;- newManager tlsManagerSettings
    res &amp;lt;- httpLbs request manager
    return . show . responseBody $ res

someFunc :: IO ()
someFunc = do
   query &amp;gt;&amp;gt;= putStrLn
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Huzzah! Results! I&amp;rsquo;m getting back a monster string of json data.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&amp;ldquo;\&amp;ldquo;{\\&amp;ldquo;total_count\\&amp;rdquo;:66, &amp;hellip;.}\&amp;rdquo;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&#34;http://deliberate-software.com/images/praisethesun.gif&#34;&gt;&lt;/img&gt;&lt;/p&gt;

&lt;h3 id=&#34;step-three-parsing-json:6807ae504e3906e54fafcf1fb117cd62&#34;&gt;Step Three - Parsing JSON&lt;/h3&gt;

&lt;p&gt;Time to parse this mega JSON string. Aeson seems to be the biggest contender. To
use Aeson and get the total_count value from the return, I needed the following
additions:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-haskell&#34;&gt;{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE DeriveGeneric #-}

import GHC.Generics
import Data.Aeson

data ResultCount = ResultCount {
  total_count :: Int }
  deriving (Generic, Show)

instance ToJSON ResultCount
instance FromJSON ResultCount
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ResultCount allows me to use &lt;code&gt;decode&lt;/code&gt; from aeson instead of &lt;code&gt;show&lt;/code&gt; to
parse the &amp;ldquo;total_count&amp;rdquo; from the JSON response into an Int. Sure enough, it
does!&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-haskell&#34;&gt;{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE DeriveGeneric #-}
module Lib
    ( someFunc
    ) where

import Control.Monad
import Network
import Network.HTTP.Conduit
import Network.HTTP.Types.Header
import GHC.Generics
import Data.Aeson

data ResultCount = ResultCount {
  total_count :: Int }
  deriving (Generic, Show)

instance ToJSON ResultCount
instance FromJSON ResultCount

query :: IO (Maybe Int)
query = do
    initReq &amp;lt;- parseUrl &amp;quot;https://api.github.com/search/repositories&amp;quot;
    let r = initReq
                   { method = &amp;quot;GET&amp;quot;
                    , requestHeaders = [(hUserAgent, &amp;quot;steveshogren&amp;quot;)
                                      , (hAuthorization, &amp;quot;token PUT_TOKEN_HERE&amp;quot;)]}
    let request = setQueryString [(&amp;quot;q&amp;quot;, Just &amp;quot;tetris+language:assembly&amp;quot;)
                                 ,(&amp;quot;order&amp;quot;, Just &amp;quot;desc&amp;quot;)
                                 ,(&amp;quot;sort&amp;quot;, Just &amp;quot;stars&amp;quot;)] r
    manager &amp;lt;- newManager tlsManagerSettings
    res &amp;lt;- httpLbs request manager
    return . liftM total_count . decode . responseBody $ res

someFunc :: IO ()
someFunc = query &amp;gt;&amp;gt;= print
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Puts out: &lt;code&gt;Just 66&lt;/code&gt;. Success! Wait. 66 isn&amp;rsquo;t the same count I got when
running from the browser. Check again. Sure enough, browser comes up with a
totally different count.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://deliberate-software.com/images/come_at_me_bro.gif&#34;&gt;&lt;/img&gt;&lt;/p&gt;

&lt;p&gt;Maybe the query request isn&amp;rsquo;t correct? Adding a &lt;code&gt;print request&lt;/code&gt; on line 31
after building the request shows:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-haskell&#34;&gt;Request {
  host                 = &amp;quot;api.github.com&amp;quot;
  port                 = 443
  secure               = True
  requestHeaders       = [(&amp;quot;User-Agent&amp;quot;,&amp;quot;steveshogren&amp;quot;),(&amp;quot;Authorization&amp;quot;,&amp;quot;token PUT_TOKEN_HERE&amp;quot;)]
  path                 = &amp;quot;/search/repositories&amp;quot;
  queryString          = &amp;quot;?q=tetris%2Blanguage%3Aassembly&amp;amp;order=desc&amp;amp;sort=stars&amp;quot;
  method               = &amp;quot;GET&amp;quot;
  proxy                = Nothing
  rawBody              = False
  redirectCount        = 10
  responseTimeout      = Just (-3425)
  requestVersion       = HTTP/1.1
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The queryString isn&amp;rsquo;t right! It encoded my &lt;code&gt;+&lt;/code&gt; and &lt;code&gt;:&lt;/code&gt;! After an hour of
reading through docs and researching URL encoding specs, it dawns on me. &lt;code&gt;+&lt;/code&gt;
is an encoded whitespace.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;No face-palm gif could ever represent the shear magnitude of my current
emotions&amp;hellip; You&amp;rsquo;ll have to use your imagination&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I change my query to &lt;code&gt;&amp;quot;tetris language:assembly&amp;quot;&lt;/code&gt; and the right
count comes back! &lt;code&gt;Just 354&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;I finally have something that correctly fetches a count of repositories from
GitHub and parses it into an Int. After over four hours of &lt;del&gt;Dark
Souls&lt;/del&gt;Haskell punishment, we deserve to enjoy a bonfire!&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://deliberate-software.com/images/solaire_sitting.gif&#34;&gt;&lt;/img&gt;&lt;/p&gt;

&lt;h2 id=&#34;edit-bonus-round:6807ae504e3906e54fafcf1fb117cd62&#34;&gt;Edit: Bonus Round!&lt;/h2&gt;

&lt;p&gt;Thanks to
&lt;a href=&#34;http://bitemyapp.com/posts/2016-02-06-haskell-is-not-trivial-not-unfair.html&#34;&gt;Chris Allen&lt;/a&gt;
and
&lt;a href=&#34;https://www.reddit.com/r/programming/comments/44hdl6/haskell_is_the_dark_souls_of_programming/czqaxfu&#34;&gt;/u/JeanParker&lt;/a&gt;
for pointing me towards &lt;a href=&#34;http://www.serpentine.com/wreq/&#34;&gt;wreq&lt;/a&gt;, which weirdly
didn&amp;rsquo;t come up when I looked around for libs yesterday. Yep, it was 6th on the
Google when searching for &lt;code&gt;haskell https get&lt;/code&gt;. &lt;code&gt;Network.HTTP&lt;/code&gt; is the
top three results, and that doesn&amp;rsquo;t even &lt;em&gt;do&lt;/em&gt; https.&lt;/p&gt;

&lt;p&gt;¯\&lt;em&gt;(ツ)&lt;/em&gt;/¯&lt;/p&gt;

&lt;p&gt;Armed with their helpful suggestions, I knocked this out this morning.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-haskell&#34;&gt;import Network.Wreq
import Control.Lens
import Data.Aeson
import Data.Aeson.Lens
import qualified Data.Text as T
import qualified Data.ByteString.Char8 as BS

opts :: String -&amp;gt; String -&amp;gt; Options
opts lang token = defaults &amp;amp; param &amp;quot;q&amp;quot; .~ [T.pack $ &amp;quot;tetris language:&amp;quot; ++ lang]
                        &amp;amp; param &amp;quot;order&amp;quot; .~ [&amp;quot;desc&amp;quot;]
                        &amp;amp; param &amp;quot;sort&amp;quot; .~ [&amp;quot;stars&amp;quot;]
                        &amp;amp; header &amp;quot;Authorization&amp;quot; .~ [BS.pack $ &amp;quot;token &amp;quot; ++ token]

query lang = do
    token &amp;lt;- readFile &amp;quot;token&amp;quot;
    r &amp;lt;- getWith (opts lang token) &amp;quot;https://api.github.com/search/repositories&amp;quot;
    return $ r ^? responseBody . key &amp;quot;total_count&amp;quot; . _Number
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;MUCH better. This includes reading my token from file called &amp;ldquo;token&amp;rdquo; so I don&amp;rsquo;t
accidentally commit it. Also includes building up the different query options
based on inputs, which was the next step. Thanks y&amp;rsquo;all.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://deliberate-software.com/images/solaire_idle.gif&#34;&gt;&lt;/img&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Pixel gifs sourced from
&lt;a href=&#34;http://zedotagger.deviantart.com/gallery/54317550/Dark-Souls&#34;&gt;zedotagger&lt;/a&gt; on
deviantart, thanks zedotagger!&lt;/p&gt;
&lt;/blockquote&gt;
</description>
    </item>
    
    <item>
      <title>F# Unit Testing With SimpleMock</title>
      <link>http://deliberate-software.com/f-number-unit-testing/</link>
      <pubDate>Wed, 21 Oct 2015 00:00:00 +0000</pubDate>
      
      <guid>http://deliberate-software.com/f-number-unit-testing/</guid>
      <description>

&lt;p&gt;If you are considering using F#, you might be curious how to handle unit test
mocking, especially if you want to use both modules and classes. In a language
like C# or Java, the common method is to a DI container or handmade constructor
injection on a class. These &amp;ldquo;entry points&amp;rdquo; allow for a unit test to replace a
real dependency with a test-only replacement.&lt;/p&gt;

&lt;p&gt;I previously posted an example that shows a much simpler way to inject
dependencies called the &lt;a href=&#34;http://deliberate-software.com/simplemock-unit-test-mocking/&#34;&gt;SimpleMock pattern&lt;/a&gt;. The SimpleMock pattern can also be
used in F#, even if you are only using modules.&lt;/p&gt;

&lt;h2 id=&#34;simplemock-in-f-modules:43b10499a7e4c1aeb47d57d551a820fe&#34;&gt;SimpleMock in F# Modules&lt;/h2&gt;

&lt;p&gt;We will assume you are mocking inside a module and not a class. Mocking inside
an F# class would look much the same as it does in C#, which we showed in the
SimpleMock post. Here is a sample program that does some work and persists the
results.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-fsharp&#34;&gt;let addAndSave x y =
  let sum = x + y
  DBModule.saveSum sum
  sum
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To apply the SimpleMock pattern, we can use argument currying by adding a simple
function wrapper.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-fsharp&#34;&gt;let addAndSave&#39; saveSum x y = 
  let sum = x + y
  saveSum sum
  sum
let addAndSave = addAndSave&#39; DBModule.saveSum

// Test code
let addAndSave_Test =
  let calledVar = ref 0
  let result = addAndSave&#39; (fun sum -&amp;gt; calledVar := sum) 1 2
  Assert.AreEqual(3, result)
  Assert.AreEqual(3, !calledVar)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We started by renaming the &lt;code&gt;addAndSave&lt;/code&gt; function with a trailing &lt;code&gt;&#39;&lt;/code&gt;. We
created a new &lt;code&gt;addAndSave&lt;/code&gt; that calls &lt;code&gt;addAndSave&#39;&lt;/code&gt; with the correct
dependency for the first argument, leaving the rest of the arguments to be
called later. Currying is what allows this ability. The new &lt;code&gt;addAndSave&lt;/code&gt;
function only needs the &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt; parameters. At test time, we called &lt;code&gt;addAndSave&#39;&lt;/code&gt;, passing in the needed dependency, but using a lambda as the
&amp;ldquo;fake&amp;rdquo;. The injection is as close to the dependency use as possible!&lt;/p&gt;

&lt;h2 id=&#34;bonus-simplemock-fake-helper:43b10499a7e4c1aeb47d57d551a820fe&#34;&gt;Bonus: SimpleMock Fake Helper&lt;/h2&gt;

&lt;p&gt;The earlier replacement for DBModule.saveSum is a bit complex, and it does not
show us how many times the fake was called. We can easily make a helper that
takes parameters and returns them when called, along withe count of times it was
called.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-fsharp&#34;&gt;type TestFakeResults() =
  member val timesCalled = 0 with get,set
  member val args: obj list = [] with get,set

let makeFake_OneArg () =
  let results = new TestFakeResults()
  let fake = (fun p1 -&amp;gt;
                  results.args &amp;lt;- p1 :: results.args
                  results.timesCalled &amp;lt;- results.timesCalled + 1
                  ())
  (fake, results)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The above code might be hard to comprehend at first! We have made a generic
helper that can create any single argument fake we need. We return a tuple,
containing the fake lambda and an instance of &lt;code&gt;TestFakeResults&lt;/code&gt;. The fake
lambda will populate the &lt;code&gt;TestFakeResults&lt;/code&gt;, which we can access in the test
via the second arg of the tuple.&lt;/p&gt;

&lt;p&gt;We can now re-write the previous test using &lt;code&gt;makeFake_OneArg&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-fsharp&#34;&gt;// Test code
let addAndSave_Test =
  let (fakeSave, fakeSaveCalling) = makeFake_OneArg()
  let result = addAndSave&#39; fakeSave 1 2
  Assert.AreEqual(3, result)
  Assert.AreEqual(3, fakeSaveCalling.args.[0])
  Assert.AreEqual(1, fakeSaveCalling.timesCalled)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The TestFakeResults can return information about the way it was called,
including the list of all arguments. If we felt we needed the extra
expressiveness, we could also use a mocking library like RhinoMocks or Moq. The
TestFakeResults and its constructor are not essential to the pattern. The most
important part is learning to unit test in F# with confidence.&lt;/p&gt;

&lt;h1 id=&#34;double-bonus-when-to-use-a-class-instead-of-a-record:43b10499a7e4c1aeb47d57d551a820fe&#34;&gt;Double Bonus: When to Use a Class Instead of a Record&lt;/h1&gt;

&lt;p&gt;When I first wrote this post, I used a record instead of a class for the &lt;code&gt;TestFakeResults&lt;/code&gt; type. If you have been bitten by the functional programming bug,
you might have wondered at my usage of a mutable class. Here are two alternates
of &lt;code&gt;makeFake_OneArg&lt;/code&gt; which use records. You can probably see why I switched to a class:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-fsharp&#34;&gt;type TestFakeResults = {timesCalled:int, args obj list}

// Using Record Alternate 1
let makeFake_OneArg_RecordAlternate1 () = 
  let t = ref 0
  let a : obj list ref = ref []
  let fake = (fun p1 -&amp;gt;
                  a := p1 :: !a
                  t := !t + 1
                  ())
  (fake, (fun () -&amp;gt;
                {TestFakeRecord.timesCalled = !t;
                 args = !a}))

// Using Record Alternate 2
let makeFake_OneArg_RecordAlternate2 () = 
  let result = ref {TestFakeRecord.timesCalled = 0; args = []}
  let fake = (fun p1 -&amp;gt;
              result := {timesCalled = (!result).timesCalled + 1;
                         args = p1 :: (!result).args}
              ())
  (fake, (fun () -&amp;gt; !result))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The only way to use a record is to delay its construction via a lambda which
must be executed by the test code. Both are complex: what we need is a mutable
data structure which we can access via a reference. A record is not that. We can
approximate it using tricks, but ultimately I find both alternatives to be too
complex to justify their use. Sometimes a mutable data structure is the best
choice to solve your problem efficiently. The power of F# is that it gives us
the ability to choose the best tool for the job: records for immutability,
classes for mutability.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>SimpleMock: Language Agnostic Unit Test Mocking</title>
      <link>http://deliberate-software.com/simplemock-unit-test-mocking/</link>
      <pubDate>Thu, 13 Aug 2015 00:00:00 +0000</pubDate>
      
      <guid>http://deliberate-software.com/simplemock-unit-test-mocking/</guid>
      <description>

&lt;p&gt;SimpleMock is a pattern for reducing TDD damage. You can use the pattern to
organize your testing code without mocking or complicated dependency injection.&lt;/p&gt;

&lt;p&gt;SimpleMock works in any language with closures that can be passed around by
reference, so off the top of my head: C#, Java, F#, Scala, PHP, C++, Ruby, and
Python. I&amp;rsquo;m sure you can think of others.&lt;/p&gt;

&lt;h2 id=&#34;example:442bb35a3947650665613cec7b90f820&#34;&gt;Example:&lt;/h2&gt;

&lt;p&gt;Here is a brief (if a bit silly) example of the final pattern:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;public class LineCounter {
    internal Func&amp;lt;string, IEnumerable&amp;lt;string&amp;gt;&amp;gt; _readLines = File.ReadLines;

    public string CountLines(string filename) {
        return _readLines(filename).Count();
    }
}

/// Test Code
[TestCase]
public void TestLineCounter () {
    var sut = new LineCounter();
    // &amp;quot;SimpleMock&amp;quot; of File.ReadLines
    sut._readLines = (string x) =&amp;gt; new List&amp;lt;string&amp;gt;{&amp;quot;test&amp;quot;, &amp;quot;that&amp;quot;};

    var result = sut.CountLines(&amp;quot;test&amp;quot;);

    Assert.AreEqual(2, result);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;benefits:442bb35a3947650665613cec7b90f820&#34;&gt;Benefits&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Reduced boilerplate&lt;/li&gt;
&lt;li&gt;Saves interfaces for real polymorphism&lt;/li&gt;
&lt;li&gt;Simplifies test code&lt;/li&gt;
&lt;li&gt;Reduces testing concerns in production code&lt;/li&gt;
&lt;li&gt;Removes need for fragile IoC containers&lt;/li&gt;
&lt;li&gt;Encourages better abstraction design&lt;/li&gt;
&lt;li&gt;Can convert one class at a time!&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The SimpleMock pattern promotes a better design of your abstractions and simpler
tests. The pattern also reduces boilerplate and the pollution of your production
code with testing concerns.&lt;/p&gt;

&lt;p&gt;If you aren&amp;rsquo;t familiar with the normal pattern of unit test mocking using
interfaces, dependency injection, and mock libraries, scroll down to &amp;ldquo;The
Non-SimpleMock Way&amp;rdquo; at the end of the post.&lt;/p&gt;

&lt;h2 id=&#34;simplemock-pattern:442bb35a3947650665613cec7b90f820&#34;&gt;SimpleMock Pattern&lt;/h2&gt;

&lt;p&gt;The SimpleMock pattern is aptly named.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Replace Test-Only Interfaces With Functions&lt;/li&gt;
&lt;li&gt;Define Dependencies Inline&lt;/li&gt;
&lt;li&gt;Write Better Abstractions&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;step-one-replace-test-only-interfaces-with-functions:442bb35a3947650665613cec7b90f820&#34;&gt;Step One: Replace Test-Only Interfaces With Functions&lt;/h2&gt;

&lt;p&gt;My examples are in C# because that is what I got paid to write today - it is
freshest in memory. C# has an incredible ability to create and pass around
lambdas and function references. Here is an example of using functions instead
of interfaces.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;public class CurrentTime : ICurrentTime {
    public DateTime GetCurrentTime() {
        return DateTime.Now();
    }
}
public class Translator {
    private Func&amp;lt;DateTime&amp;gt; _getCurrentTime;

    public Translator() : this(new CurrentTime().GetCurrentTime) {}

    public Translator(Func&amp;lt;DateTime&amp;gt; getCurrentTime) {
        this._getCurrentTime = getCurrentTime;
    }

    public string Translate(string input) {
        return string.Format(&amp;quot;{0}: {1}&amp;quot;, _getCurrentTime().ToString(), input);
    }
}

/// Test Code
[TestCase]
public void TestCurrentTimeTranslator () {
    var now = DateTime.Now;

    var sut = new Translator(() =&amp;gt; now);

    var result = sut.Translate(&amp;quot;test&amp;quot;);

    Assert.AreEqual(now.ToString() + &amp;quot;: test&amp;quot;, result);
}

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The test code is quite simple! No longer do we need the dependency on third
party mocking libraries, or the relatively complicated setup logic. Instead we
can simply inject the lambda at runtime, replacing that pointer. We didn&amp;rsquo;t need
the whole interface, really we just needed the simple signature of the function.&lt;/p&gt;

&lt;h2 id=&#34;step-2-define-dependencies-inline:442bb35a3947650665613cec7b90f820&#34;&gt;Step 2: Define Dependencies Inline&lt;/h2&gt;

&lt;p&gt;We can take it even a step further. Why use constructor injection at all? Since
all we really want is a single mutable dispatch table row, why not just make it
that way?&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;public class Translator {
    internal Func&amp;lt;DateTime&amp;gt; _getCurrentTime = new CurrentTime().GetCurrentTime;

    public string Translate(string input) {
        return string.Format(&amp;quot;{0}: {1}&amp;quot;, _getCurrentTime().ToString(), input);
    }
}

/// Test Code
[TestCase]
public void TestCurrentTimeTranslator () {
    var now = DateTime.Now;
    var sut = new Translator();
    sut._getCurrentTime = () =&amp;gt; now;

    var result = sut.Translate(&amp;quot;test&amp;quot;);

    Assert.AreEqual(now.ToString() + &amp;quot;: test&amp;quot;, result);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We&amp;rsquo;ve cleaned up our nasty multi-line indirection into a single dispatch line.
&amp;ldquo;Go to definition&amp;rdquo; now takes me to the actual line with the actual called
function. We&amp;rsquo;ve replaced a dependency on a class based interface with a function
signature. The function signature &lt;em&gt;is&lt;/em&gt; the interface!&lt;/p&gt;

&lt;p&gt;You probably noticed we have lost something with this final version. We have
lost the ability to inject polymorphic behavior through the constructor. If you
need it, simply go back to injecting the interface in the constructor or by
passing it into the function itself. In practice, I have found this is needed
very rarely, making the SimpleMock pattern a better tool to reach for first.&lt;/p&gt;

&lt;h2 id=&#34;step-3-write-better-abstractions:442bb35a3947650665613cec7b90f820&#34;&gt;Step 3: Write Better Abstractions&lt;/h2&gt;

&lt;p&gt;Lastly, SimpleMock actually promotes better designs. For example, a coworker was
writing some tests today and ran into a complicated situation. Take the
following sanitized code:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;public class WorkDoer {
    internal Action&amp;lt;Thing&amp;gt; ignoreElements = new ThingIgnorer().IgnoreElements;
    internal Action&amp;lt;Thing&amp;gt; removeIgnoredElements = new ThingRemover().RemoveElements;

    public void IgnoreAndRemoveThings(Thing t1, Thing t2) {
        ignoreElements(t1);
        ignoreElements(t2);
        removeIgnoredElements(t1);
        removeIgnoredElements(t2);
    }
}

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;How would you check that each section was called? Our naive solution was a
complicated lambda with a &amp;ldquo;timesCalled&amp;rdquo; counter and an if statement to assert
against each argument, but it turns nasty quickly:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;/// Nasty test code
[TestCase]
public void TestWorkDoer () {
    var sut = new WorkDoer();

    var ignoredCalledTimes = 0;
    sut.ignoreElements = (t) =&amp;gt; {
        ignoredCalledTimes++;
        if (ignoredCalledTimes == 1) {
            Assert.AreEqual(t1, t);
        } else {
            Assert.AreEqual(t2, t);
        }
    };
    var removedCalledTimes = 0;
    sut.removeIgnoredElements = (t) =&amp;gt; {
        removedCalledTimes++;
        if (removedCalledTimes == 1) {
            Assert.AreEqual(t1, t);
        } else {
            Assert.AreEqual(t2, t);
        }
    };

    var t1 = new Thing();
    var t2 = new Thing();

    var result = sut.IgnoreAndRemoveThings(t1, t2);
    Assert.AreEqual(2, removedCalledTimes);
    Assert.AreEqual(2, ignoredCalledTimes);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Yuck! The test is an absolute catastrophe. I see a mess of mixed concerns.
Conditionals?! In a test?! Unconscionable.&lt;/p&gt;

&lt;p&gt;In situations like this, we have two easy options. Option one is to just use
a third party mocking library, replacing the functions from inside the test
code. This gives us access to all the sophisticated mocking tools available.&lt;/p&gt;

&lt;p&gt;My preferred option is seeking to decomplect the production code by using better
abstractions.&lt;/p&gt;

&lt;p&gt;I have found that strong reliance of mocking libraries enables worse designs.
Consider the code, what makes it so hard to test? Not knowing which element is
called when, doing the same work on two parameters, and reference mutation all
make this a poor abstraction. Why not simplify?&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;public class WorkDoer {
    internal Func&amp;lt;Thing, Thing&amp;gt; ignoreElements = new ThingIgnorer().IgnoreElements;
    internal Func&amp;lt;Thing, Thing&amp;gt; removeIgnoredElements = new ThingRemover().RemoveElements;

    public List&amp;lt;Thing&amp;gt; IgnoreAndRemoveThings(List&amp;lt;Thing&amp;gt; ts) {
        return ts.Select(t =&amp;gt; removeIgnoredElements(ignoreElements(t)));
    }
}

/// Simpler test
[TestCase]
public void TestWorkDoer () {
    var sut = new WorkDoer();
    var expected = new Thing();
    var ts = new List&amp;lt;Thing&amp;gt;{new Thing()};

    sut.ignoreElements = (t) =&amp;gt; new Thing();

    sut.removeIgnoredElements = (t) =&amp;gt; {
        Assert.AreEqual(t, sut.ignoreElements(t));
        return expected;
    };

    var result = sut.IgnoreAndRemoveThings(ts);

    Assert.AreEqual(expected, result.First())
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Much better! Yes, we had to change a few signatures. We get the same work done,
but now the code is actually a lot more useful. Our test code is comparable with
anything you&amp;rsquo;d find using a mocking library. I am absolutely okay with using a
mocking library when needed, but I always carefully consider my abstractions and
design first.&lt;/p&gt;

&lt;p&gt;If mocking libraries and IoC containers are the chainsaws of the testing world,
then SimpleMock is the garden shears. Sometimes the chainsaw is the only tool
for the job, and that is fine. But for most work around the yard, you can leave
the chainsaw in the shed.&lt;/p&gt;

&lt;h2 id=&#34;conclusion:442bb35a3947650665613cec7b90f820&#34;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;I’ve shown how you can really simplify your code with SimpleMock. The dispatch
row is clear and easy to read. We have removed some third party mocking
dependencies. You can remove a lot of the boilerplate &amp;ldquo;for making it more
testable&amp;rdquo; from your code. The test code is greatly simplified, and injection a
breeze. The result: much simpler code, just as easy to test.&lt;/p&gt;

&lt;p&gt;Thanks to Shuwei Chen for helping me put this together!&lt;/p&gt;

&lt;h2 id=&#34;the-non-simplemock-way:442bb35a3947650665613cec7b90f820&#34;&gt;The Non-SimpleMock Way&lt;/h2&gt;

&lt;p&gt;If you are familiar with unit test mocking with interfaces, this part is
probably boring. Feel free to skip.&lt;/p&gt;

&lt;p&gt;The traditional way of performing C# unit test mocking involves dependency
injection and interface mocking using a mocking library. For dependency
injection, it is common to use a tool like Ninject or hand-rolled constructor
injection. For mocking, a library like Moq or Rhino Mocks is standard. Here is
an example of a class and its testing code without any business logic.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;public interface ICurrentTime {
    DateTime GetCurrentTime();
}

public class CurrentTime : ICurrentTime {
    public DateTime GetCurrentTime() {
        return DateTime.Now();
    }
}

public class Translator {
    private readonly ICurrentTime ct;

    public Translator() : this(new CurrentTime()) {}

    public Translator(ICurrentTime currentTime) {
        this.ct = currentTime;
    }

    public string Translate(string input) {
        return string.Format(&amp;quot;{0}: {1}&amp;quot;, ct.GetCurrentTime().ToString(), input);
    }
}

/// Test Code with Moq
[TestCase]
public void TestCurrentTimeTranslator () {
    var rightNow = DateTime.Now;
    var mock = new Mock&amp;lt;ICurrentTime&amp;gt;();

    mock.Setup(a=&amp;gt;a.GetCurrentTime()).Returns(rightNow);

    var sut = new Translator(mock.Object);

    var result = sut.Translate(&amp;quot;test&amp;quot;);

    Assert.AreEqual(rightNow.ToString() + &amp;quot;: test&amp;quot;, result);
}

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you&amp;rsquo;ve done much C# unit testing, this should look familiar. We want to
inject some code that is potentially long-running or dynamic. We put that code
into a class, add an interface, then inject that interface into the class we
want to test. To test it, we mock the interface, creating a different concrete
class at test runtime which implements that interface. We can setup that mock to
respond with anything, which we use for assertions.&lt;/p&gt;

&lt;h2 id=&#34;what-s-wrong-with-the-non-simplemock-way:442bb35a3947650665613cec7b90f820&#34;&gt;What&amp;rsquo;s Wrong with the Non-SimpleMock Way?&lt;/h2&gt;

&lt;p&gt;The first problem is we have created a whole interface just for testing.
Interfaces are for polymorphism, but we don&amp;rsquo;t really need polymorphism for this
class. We simply want to mock it. The constructor injection is also test code
polluting our business logic.&lt;/p&gt;

&lt;p&gt;What we have done is create a very small and primitive dispatch table. The
table has one row: something that has a function with the signature of &lt;code&gt;() -&amp;gt; DateTime&lt;/code&gt; or, as it is known in C#: &lt;code&gt;Func&amp;lt;DateTime&amp;gt;&lt;/code&gt;.  We will need to make
this primitive dispatch table for every single mock in every single class we
wish to test. That&amp;rsquo;s a lot of boilerplate!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Programming Language Safety Score Mark 2</title>
      <link>http://deliberate-software.com/safety-rank-part-2/</link>
      <pubDate>Fri, 24 Jul 2015 00:00:00 +0000</pubDate>
      
      <guid>http://deliberate-software.com/safety-rank-part-2/</guid>
      <description>

&lt;script src=&#34;https://ajax.googleapis.com/ajax/libs/angularjs/1.3.14/angular.min.js&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;http://deliberate-software.com/javascripts/sliders2.js&#34;&gt;&lt;/script&gt;

&lt;p&gt;I want to make a model that predicts bugs.&lt;/p&gt;

&lt;p&gt;I previously wrote a table for scoring language safety:
&lt;a href=&#34;http://deliberate-software.com/programming-language-safety-algorithm&#34;&gt;Programming Language Safety Score&lt;/a&gt;,
but it was extremely time consuming to score new languages or make modifications.&lt;/p&gt;

&lt;h2 id=&#34;simplify-simplify:97a282fd1f3c6848927d72787ebd3b6e&#34;&gt;Simplify, Simplify&lt;/h2&gt;

&lt;p&gt;After being told I was &lt;a href=&#34;https://en.wikipedia.org/wiki/Overfitting&#34;&gt;overfitting&lt;/a&gt;
the data, I&amp;rsquo;ve attempted to clean up by simply checking if each category is
enforced, possible, or impossible. I score each as either 1 (language enforced),
0 (possible, but you have to remember to do it), or -1 (impossible). When the
magnitudes of the new model are compared with the previous model, they come out
very similar. The shape of the curve pretty much stays the same, which I was
told indicates that the character count weighting was a variable that didn&amp;rsquo;t
matter.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://deliberate-software.com/images/rplot.jpg&#34;&gt;&lt;/img&gt;&lt;/p&gt;

&lt;p&gt;The code I used to generate the plot and normalize the scores can be found here:
&lt;a href=&#34;https://github.com/steveshogren/datasciencecoursera/blob/817dec79e36b6e9a6c5a8fd5700aff7cc394b9d4/scoreplot.R&#34;&gt;scorePlot.R&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;safety-definitions:97a282fd1f3c6848927d72787ebd3b6e&#34;&gt;Safety Definitions&lt;/h2&gt;

&lt;p&gt;A definition of the safety checks is as follows:&lt;/p&gt;

&lt;div ng-app=&#34;TableApp2&#34;&gt;
&lt;div ng-controller=&#34;TableCtrl&#34;&gt;
&lt;table class=&#34;langtable&#34;&gt;
&lt;tr&gt;&lt;th&gt;Check&lt;/th&gt; &lt;th&gt;Description&lt;/th&gt;&lt;/tr&gt;
&lt;tr ng-repeat=&#34;check in langChecks&#34;&gt;
&lt;td&gt;{{ check.name }} &lt;/td&gt;
&lt;td&gt; {{ check.desc }}  &lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;

The new scores are shown here, with a lot more languages added in:

&lt;p class=&#34;lead&#34;&gt;
&lt;div style=&#34;overflow-x:scroll&#34;&gt;
&lt;table class=&#34;langtable&#34;&gt;
&lt;tr&gt;
&lt;th&gt;Safety Check&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;
&lt;select ng-options=&#34;getName(lang) for lang in allLanguages&#34; ng-model=&#34;languages[0]&#34;&gt;&lt;/select&gt;
&lt;/th&gt;
&lt;th&gt;
&lt;select ng-options=&#34;getName(lang) for lang in allLanguages&#34; ng-model=&#34;languages[1]&#34;&gt;&lt;/select&gt;
&lt;/th&gt;
&lt;th&gt;
&lt;select ng-options=&#34;getName(lang) for lang in allLanguages&#34; ng-model=&#34;languages[2]&#34;&gt;&lt;/select&gt;
&lt;/th&gt;
&lt;th&gt;
&lt;select ng-options=&#34;getName(lang) for lang in allLanguages&#34; ng-model=&#34;languages[3]&#34;&gt;&lt;/select&gt;
&lt;/th&gt;
&lt;/tr&gt;
&lt;tr ng-repeat=&#34;check in langChecks&#34; score-row name=&#34;check.name&#34; row-key=&#34;check.key&#34;&gt;&lt;/tr&gt;
&lt;tr class=&#34;totals&#34;&gt;&lt;td&gt;Totals&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td ng-repeat=&#34;lang in langTotals track by $index&#34;&gt;
{{ lang }}
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;totals&#34;&gt;&lt;td&gt;Magnitude&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td ng-repeat=&#34;lang in langTotals track by $index&#34;&gt;
{{ percentageTotals(lang) }}%
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;Current Languages:
&lt;span ng-repeat=&#34;lang in allLanguages&#34;&gt;
{{ getName(lang) }}: {{ allLangTotals[$index] }},
&lt;/select&gt;&lt;/p&gt;

&lt;h2 id=&#34;so-what-s-the-point:97a282fd1f3c6848927d72787ebd3b6e&#34;&gt;So, What&amp;rsquo;s the Point?&lt;/h2&gt;

&lt;p&gt;To see how this model corresponds with data in the real world, I used the GitHub
API to query for the number of bugs created in repositories with more than 15
forks created in a span from 2011 to 2015. Commits were counted by summing the
commit counts of all contributors.&lt;/p&gt;

&lt;p&gt;I decided to rely on the count of commits as a standard for a unit of work. My
assumption was that across fifty different projects, the commit sizes would
average out. Once the unit of work was decided on, I wanted to find the ratio of
bugs per commit for each language.&lt;/p&gt;

&lt;p&gt;I collected the ratio of bugs logged per commit for each repository, and after
grouping by primary language, removed the top and bottom 25% using the
bug/commit ratio, which is a common practice in statistics to help find a more
accurate average. I summed the bugs and commits of those remaining repositories
grouped by language, finding a total average bug/commit ratio for each language
grouping. Here is that data, sorted by safety score.&lt;/p&gt;

&lt;table class=&#34;langtable&#34;&gt;
&lt;tr&gt;&lt;th&gt;Language&lt;/th&gt;
&lt;th&gt;Bugs&lt;/th&gt;
&lt;th&gt;Commits&lt;/th&gt;
&lt;th&gt;Repositories&lt;/th&gt;
&lt;th&gt;Bug/Commits&lt;/th&gt;
&lt;tr ng-repeat=&#34;lang in languageRatios&#34;&gt;
&lt;td&gt;{{ lang.name }} &lt;/td&gt;
&lt;td&gt;{{ lang.bugs }} &lt;/td&gt;
&lt;td&gt;{{ lang.commits }} &lt;/td&gt;
&lt;td&gt;{{ lang.repos }} &lt;/td&gt;
&lt;td&gt;{{ getBugsRatio(lang) }} &lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;

&lt;p&gt;Here are the languages sorted by safety score with bug/commit ratios:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://deliberate-software.com/images/errorChart.jpg&#34;&gt;&lt;/img&gt;
&lt;img src=&#34;http://deliberate-software.com/images/bugsAverage.jpg&#34;&gt;&lt;/img&gt;&lt;/p&gt;

&lt;p&gt;I took the magnitude of the safety scores and the bug/commit ratios. After
inverting the safety scores, I overlaid them both onto a single graph.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://deliberate-software.com/images/bothMags.jpg&#34;&gt;&lt;/img&gt;&lt;/p&gt;

&lt;p&gt;Immediately it is obvious that Ruby, Python, PHP, and Clojure all seem to strongly
buck the trend, but otherwise the languages follow a pretty consistent slope
down in bugs. Taking the correlation gives a
&lt;a href=&#34;https://en.wikipedia.org/wiki/Pearson_product-moment_correlation_coefficient&#34;&gt;correlation coefficient&lt;/a&gt;
of .55&lt;/p&gt;

&lt;h2 id=&#34;what-about-unit-tests:97a282fd1f3c6848927d72787ebd3b6e&#34;&gt;What About Unit Tests?&lt;/h2&gt;

&lt;p&gt;Thinking that Ruby, Clojure, PHP, and Python might not correlate well due to some
other factor, I collected data on how many tests each repository had. I counted
the number of files containing &amp;ldquo;test&amp;rdquo; or &amp;ldquo;spec&amp;rdquo;, which gave the following,
sorted by tests per commit:&lt;/p&gt;

&lt;table class=&#34;langtable&#34;&gt;
&lt;tr&gt;&lt;th&gt;Language&lt;/th&gt;
&lt;th&gt;Tests&lt;/th&gt;
&lt;th&gt;Commits&lt;/th&gt;
&lt;th&gt;Repositories&lt;/th&gt;
&lt;th&gt;Tests/Commits&lt;/th&gt;&lt;/tr&gt;
&lt;tr ng-repeat=&#34;lang in sorter(languageRatios)&#34;&gt;
&lt;td&gt;{{ lang.name }} &lt;/td&gt;
&lt;td&gt;{{ lang.test }} &lt;/td&gt;
&lt;td&gt;{{ lang.commits }} &lt;/td&gt;
&lt;td&gt;{{ lang.repos }} &lt;/td&gt;
&lt;td&gt;{{ getTestsRatio(lang) }} &lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;

&lt;p&gt;PHP, Python, and Ruby all have a higher then average number of tests, but
Clojure does not. Additionally, Go, Scala, and Java all also have a higher than
average number of tests, yet they score relatively average in bugs/commit.&lt;/p&gt;

&lt;h2 id=&#34;conclusion:97a282fd1f3c6848927d72787ebd3b6e&#34;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;In conclusion, the current safety model I have proposed seems to account for a
moderate reduction in bugs per commit across the sampled languages, but is not
the only factor. It currently is unable to account for a significantly lower
than expected bug count in Ruby and Clojure.&lt;/p&gt;

&lt;h2 id=&#34;special-thanks:97a282fd1f3c6848927d72787ebd3b6e&#34;&gt;Special Thanks&lt;/h2&gt;

&lt;p&gt;Special thanks to (in alphabetical order):
&lt;a href=&#34;https://twitter.com/traffichazard/&#34;&gt;Patrick Boe&lt;/a&gt; (Haskell, Sniff Test),
&lt;a href=&#34;http://asymmetrical-view.com/&#34;&gt;Kyle Burton&lt;/a&gt; (General Advice),
Nils Creque (Listening Board),
Max Haley (Python, Ruby, Teaching me how to math),
&lt;a href=&#34;https://github.com/danielmiladinov&#34;&gt;Daniel Miladinov&lt;/a&gt; (Java, Scala, Morale Support),
Keith O&amp;rsquo;Brien (Ruby and JS),
&lt;a href=&#34;https://github.com/arlaneenalra&#34;&gt;Chris Salch&lt;/a&gt; (CoffeeScript and JS),
and &lt;a href=&#34;https://github.com/timvisher&#34;&gt;Tim Visher&lt;/a&gt; (Clojure).&lt;/p&gt;

&lt;p&gt;Additional thanks to the posters on
&lt;a href=&#34;https://www.reddit.com/r/rust/comments/3egx49/language_safety_score_mark_2/&#34;&gt;/r/rust&lt;/a&gt;,
including &lt;a href=&#34;https://www.reddit.com/user/notriddle&#34;&gt;/u/notriddle&lt;/a&gt;,
&lt;a href=&#34;https://www.reddit.com/user/killercup&#34;&gt;/u/killercup&lt;/a&gt;, and
&lt;a href=&#34;https://www.reddit.com/user/diegobernardes&#34;&gt;/u/diegobernardes&lt;/a&gt; who put together the Rust score.&lt;/p&gt;

&lt;h2 id=&#34;complaints-department:97a282fd1f3c6848927d72787ebd3b6e&#34;&gt;Complaints Department&lt;/h2&gt;

&lt;p&gt;Did I mess up something about a language here, or am I missing a safety check? I&amp;rsquo;ll happily take pull
requests for new languages:
&lt;a href=&#34;https://github.com/steveshogren/blog-source/blob/master/source/javascripts/sliders2.js&#34;&gt;blog source&lt;/a&gt;. Just
pick an existing language, edit the name and values, and &amp;ldquo;copy to clipboard&amp;rdquo; to
build your own language data structure. Send it to me in a PR and I&amp;rsquo;ll include
it along with a thanks on the page.&lt;/p&gt;

&lt;div ng-show=&#34;showRealName&#34;&gt;
&lt;span&gt;Select Language:
&lt;select ng-options=&#34;lang.name for lang in allLanguages&#34; ng-model=&#34;selectedLang&#34;&gt;&lt;/select&gt;
&lt;button ng-click=&#34;copyToClipboard(selectedLang)&#34;&gt;Copy Changes to Clipboard&lt;/button&gt;
&lt;/span&gt;
&lt;span&gt;&lt;input ng-model=&#34;selectedLang.name&#34;&gt;&lt;/input&gt;&lt;/span&gt;
&lt;table class=&#34;langtable&#34;&gt;
&lt;tr&gt;&lt;th&gt;Check&lt;/th&gt;&lt;th&gt;Option&lt;/th&gt;&lt;/tr&gt;
&lt;tr ng-repeat=&#34;check in langChecks&#34;&gt;
&lt;td style=&#34;background-color:{{scoreClass(score(selectedLang[check.key]))}} &#34;&gt;
{{ check.name }}: {{score(selectedLang[check.key]) }}
&lt;/td&gt;
&lt;td&gt;
&lt;select ng-options=&#34;enforcedNice(e) for e in enforcedTypes&#34; ng-model=&#34;selectedLang[check.key].enforced&#34;&gt;&lt;/select&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Case Study: Superior Domain Modeling in F#</title>
      <link>http://deliberate-software.com/pattern-matching-case-study/</link>
      <pubDate>Sat, 14 Mar 2015 00:00:00 +0000</pubDate>
      
      <guid>http://deliberate-software.com/pattern-matching-case-study/</guid>
      <description>&lt;p&gt;Domain modeling in F# is significantly easier and safer than with the
traditional .NET languages. This is because of the increased safety of
pattern matching and the expressiveness of discriminated unions. These
concepts are not in C# or VB.NET, and therefore bring a new tool to
the table.&lt;/p&gt;

&lt;p&gt;To illustrate this, I found some old code I&amp;rsquo;d written to interact with
a legacy system. The system uses many single enums on a record to keep
track of statuses. When one changes, it can cause others to change as
well.&lt;/p&gt;

&lt;p&gt;Here is a typical function that combines two enums to recalculate a
third.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;public static PositionType GetPositionType (MovementType movementType, ApplyToParty applyToParty)
{
    if ((movementType == MovementType.Deliver &amp;amp;&amp;amp; applyToParty == ApplyToParty.Principal)
        || (movementType == MovementType.Return &amp;amp;&amp;amp; applyToParty == ApplyToParty.Counterparty))
        return PositionType.Held;
    if ((movementType == MovementType.Return &amp;amp;&amp;amp; applyToParty == ApplyToParty.Principal)
        || (movementType == MovementType.Deliver &amp;amp;&amp;amp; applyToParty == ApplyToParty.Counterparty))
        return PositionType.Posted;

    return PositionType.Undefined;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;With some regularity, new records are added to these types of enums,
causing a dangerous search and update across the system fixing all the
if/else or switch/case statements.&lt;/p&gt;

&lt;p&gt;Right off the bat, pattern matching is a huge win here, taking a hard
to comprehend function and making the domain concepts clear.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-fsharp&#34;&gt;let GetPositionType = function
    | Deliver, Principal | Return, Counterparty -&amp;gt; Held
    | Return, Principal | Deliver, Counterparty -&amp;gt; Posted
    | MovementType.Undefined, _ | _, ApplyToParty.Undefined -&amp;gt; PositionType.Undefined
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If we add a new status to any of these, we will get a compiler warning
in every place letting us know. If that alone was the win, we&amp;rsquo;d be
still be ahead by a lot. The domain is so clear here, I can print this
code out and hand it to my BA to ensure the logic is correct.&lt;/p&gt;

&lt;p&gt;Next though, this got me thinking. Why does this set of three enums
have to be calculated? Why are they even separate? Ah, of course,
right now they are stored in the database and ORM objects, each with a
separate field and set of enum ids. Changing that would be costly.&lt;/p&gt;

&lt;p&gt;What I want is a domain layer a level higher than the typical database
ORM classes, something to convert my ORM classes into that will be
able to do work in a safer way.&lt;/p&gt;

&lt;p&gt;Rather than three enums that are supposed to change in lock step (but
might get out of date), I really want a concept of the three combined
and &amp;ldquo;frozen&amp;rdquo; together.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-fsharp&#34;&gt;type Direction = 
    | Held_Deliver_Principal
    | Held_Return_Counterparty
    | Posted_Return_Principal
    | Posted_Deliver_Counterparty
    
let GetDirection = function
   | Deliver, Principal  -&amp;gt; Held_Deliver_Principal
   | Return, Counterparty -&amp;gt; Held_Return_Counterparty
   | Return, Principal -&amp;gt; Posted_Return_Principal
   | Deliver, Counterparty -&amp;gt; Posted_Deliver_Counterparty
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now I have a combined Direction that merges the three concepts into
one. It is impossible with this new merged type to have an invalid
state across the three. Getting any of the types back out to convert
into the ORM classes or do some work is as simple as another match:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-fsharp&#34;&gt;let GetMovementTypeToSaveInORM = function
   | Held_Deliver_Principal | Posted_Deliver_Counterparty -&amp;gt; Deliver
   | Posted_Return_Principal | Held_Return_Counterparty -&amp;gt; Return

let GetSendFn = function
   | Held_Deliver_Principal | Posted_Return_Principal -&amp;gt; SendMessageToPrincipal
   | Held_Return_Counterparty | Posted_Deliver_Counterparty -&amp;gt; SendMessageToCounterparty
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;While it is possible to make an equivalent C# enum and combine these
in a similar way, it is inherently unsafe (nothing to guarantee you
covered every case) and therefore appropriately uncommon. The typical
answer for safe polymorphic dispatch in C# is to use an interface and
classes. Unfortunately, something still has to dispatch on that enum
id, either inside a class or at the time of class instantiation. That
is a vector for errors.&lt;/p&gt;

&lt;p&gt;Because F# interops so well with C#, it is possible to build in a
domain layer in F# immediately that calls down to your C# ORM
classes. Converting from a set of dangerous C# enums into a
constrained and safe F# discriminated union is easy and will simplify
your domain to its essence.&lt;/p&gt;

&lt;p&gt;For reasons like this, when I have to build something with a rich
domain, I reach for F#.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Programming Language Safety Ranking</title>
      <link>http://deliberate-software.com/programming-language-safety-algorithm/</link>
      <pubDate>Tue, 17 Feb 2015 00:00:00 +0000</pubDate>
      
      <guid>http://deliberate-software.com/programming-language-safety-algorithm/</guid>
      <description>&lt;script src=&#34;https://ajax.googleapis.com/ajax/libs/angularjs/1.3.14/angular.min.js&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;http://deliberate-software.com/javascripts/sliders.js&#34;&gt;&lt;/script&gt;

&lt;p&gt;I think the time has come for a standard programming language safety
score. I want to use this model to help show that the concept of
safety is much more nuanced than a binary bit of &amp;ldquo;has strong-static
types&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;When someone says &amp;ldquo;programming language safety&amp;rdquo;, it typically invokes
thoughts of unit tests, long build times, and red squiggles in an
IDE. But, in day-to-day development, there are so many times when we
are bitten by things that somehow just slip through the cracks.&lt;/p&gt;

&lt;p&gt;I put together this scoring model to get a sense of how safe a
language is at the primitive level, and if it isn&amp;rsquo;t safe by default,
how much it costs to manually make it safe. Since all abstractions
eventually result in a series of primitive operations, I decided that
focusing only on primitives would still be a valuable (if incomplete)
data point. While any good library will handle all primitive checks
and present the consumer with a well-designed abstraction, in the end,
the consumer is still left wiring libraries together, building their
own primitive abstractions for integration. Due to the impossibility of
measuring the quality of abstractions in all libraries for a language,
I left that entirely out of scope of this model, unless it is designed
as a primitive check.&lt;/p&gt;

&lt;p&gt;By focusing on only primitive operations: making and calling
functions, naming data, working with sequences, and dealing with
language primitive data types, I slimmed down the large range of
possible error vectors to a small handful. While in some languages it
is common to use user-defined classes to wrap around a set of
primitives, those classes are still doing the same primitive work,
just hidden behind a user-created abstraction. The more ways it is
possible to make a &amp;ldquo;mistake&amp;rdquo; with a primitive, the more difficult it
is to build such good abstractions.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;This model is not about language &amp;quot;power&amp;quot;.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This model is not about ranking the &amp;ldquo;power&amp;rdquo;, &amp;ldquo;expressiveness&amp;rdquo;, or
&amp;ldquo;abstract-ability&amp;rdquo; of a language. In any language that supports
abstractions (functions, classes, modules, naming data), I am
convinced, given enough code, all Turing complete langauges can do the
same work. This model is only about the costs to prevent unexpected
&amp;ldquo;confusion&amp;rdquo; between the programmer and the machine at the primitive
level.&lt;/p&gt;

&lt;p&gt;Rather than focus on what is &lt;em&gt;possible&lt;/em&gt; with a language, I will
instead focus on what is typically idiomatic to that community. For
example, if it is possible to achieve a level of safety in a language
but by doing something uncommon, that should not be counted.&lt;/p&gt;

&lt;p&gt;To score a language, simply figure out how many characters it costs to
&amp;ldquo;prevent&amp;rdquo; a certain type of error, and add that to the
total. Newlines, spaces, and tabs do not count, but all other
punctuation does. If a specific check is language enforced, like F#&amp;rsquo;s
Option or C#&amp;rsquo;s parameter type enforcement, that is given a -30 (by
default) to make up for the lack of unit tests and code exercising
needed to run that &amp;ldquo;path&amp;rdquo;. Do not count import lines for libraries, as
importing the module will have a negligible effect on the code size
and complexity.&lt;/p&gt;

&lt;p&gt;If there is a safety feature that is not possible to achieve
programmatically, we will add +30 (by default) for a &amp;ldquo;every change run
and debug to fix&amp;rdquo; cost, such as Java not having a way to prevent stack
overflow exceptions caused by recursion.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;A lower score is &amp;quot;safer&amp;quot;, needing less (or no) code to achieve the same level of safety.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Rather than tell you my thoughts (or survey for) hard-coded
weightings, all checks are weighted the same by default. Feel free to
apply your own weightings, to better match to your or your team&amp;rsquo;s
specific needs and preferences. The languages are masked by default to
protect the innocent. You can unmask the names and see the code used
below the table.&lt;/p&gt;

&lt;div ng-app=&#34;TableApp&#34;&gt;
&lt;div ng-controller=&#34;TableCtrl&#34;&gt;

Language Enforced Bonus:
{{ enforcedScore }} 
&lt;input ng-model=&#34;enforcedScore&#34; type=&#34;range&#34; min=&#34;0&#34; max=&#34;50&#34; /&gt;

Language Inability Penalty:
{{ inabilityPenalty }} 
&lt;input ng-model=&#34;inabilityPenalty&#34; type=&#34;range&#34; min=&#34;0&#34; max=&#34;50&#34; /&gt;

Show Weights &lt;input type=&#34;checkbox&#34; ng-model=&#34;showWeights&#34; /&gt;
&lt;p class=&#34;lead&#34;&gt;
&lt;div style=&#34;overflow-x:scroll&#34;&gt;
&lt;table class=&#34;langtable&#34;&gt;
&lt;tr&gt;
&lt;th&gt;Safety Check&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;
&lt;select ng-options=&#34;getName(lang) for lang in allLanguages&#34; ng-model=&#34;languages[0]&#34;&gt;&lt;/select&gt;
&lt;/th&gt;
&lt;th&gt;
&lt;select ng-options=&#34;getName(lang) for lang in allLanguages&#34; ng-model=&#34;languages[1]&#34;&gt;&lt;/select&gt;
&lt;/th&gt;
&lt;th&gt;
&lt;select ng-options=&#34;getName(lang) for lang in allLanguages&#34; ng-model=&#34;languages[2]&#34;&gt;&lt;/select&gt;
&lt;/th&gt;
&lt;th&gt;
&lt;select ng-options=&#34;getName(lang) for lang in allLanguages&#34; ng-model=&#34;languages[3]&#34;&gt;&lt;/select&gt;
&lt;/th&gt;
&lt;/tr&gt;
&lt;tr ng-repeat=&#34;check in langChecks&#34; score-row name=&#34;check.name&#34; row-key=&#34;check.key&#34;&gt;&lt;/tr&gt;
&lt;tr class=&#34;totals&#34;&gt;&lt;td&gt;Totals&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td ng-repeat=&#34;lang in langTotals track by $index&#34;&gt;
{{ lang }} 
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;totals&#34;&gt;&lt;td&gt;Magnitude&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td ng-repeat=&#34;lang in langTotals track by $index&#34;&gt;
{{ percentageTotals(lang) }}% 
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;

&lt;h3&gt;&lt;input ng-model=&#34;showRealName&#34; type=&#34;checkbox&#34; /&gt;&lt;span
ng-click=&#34;showRealName = !!!showRealName&#34;&gt;Click to see backing code and unmask names&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;Current Languages:
&lt;span ng-repeat=&#34;lang in allLanguages&#34;&gt;
{{ getName(lang) }}: {{ allLangTotals[$index] }},
&lt;/select&gt;&lt;/p&gt;

&lt;p&gt;I want to see your language represented here! I&amp;rsquo;ll happily take pull
requests for new languages: &lt;a href=&#34;https://github.com/steveshogren/blog-source/blob/master/source/javascripts/sliders.js&#34;&gt;blog source&lt;/a&gt;. Just
use the &amp;ldquo;edit language&amp;rdquo; and &amp;ldquo;copy to clipboard&amp;rdquo; to build your own
language data structure.&lt;/p&gt;

&lt;p&gt;I would love to see every major language represented, including major
language &amp;ldquo;idiom communities&amp;rdquo;. For example, Clojure and Typed Clojure
are vastly different in abilities. Similarly &amp;ldquo;Scala - The Better Java&amp;rdquo;
and &amp;ldquo;Scala - The JVM Haskell&amp;rdquo; have vastly different idioms with
apparently very separate communities.&lt;/p&gt;

&lt;p&gt;Hope this is a helpful way to think about language safety!&lt;/p&gt;

&lt;p&gt;Special thanks to (in alphabetical order):
Patrick Boe &lt;a href=&#34;https://twitter.com/traffichazard/&#34;&gt;(twitter)&lt;/a&gt;,
Kyle Burton &lt;a href=&#34;http://asymmetrical-view.com/&#34;&gt;(blog)&lt;/a&gt;,
Daniel Miladinov &lt;a href=&#34;https://github.com/danielmiladinov&#34;&gt;(github)&lt;/a&gt;,
Chris Salch &lt;a href=&#34;https://github.com/arlaneenalra&#34;&gt;(github)&lt;/a&gt;, and
Tim Visher &lt;a href=&#34;https://github.com/timvisher&#34;&gt;(github)&lt;/a&gt;&lt;/p&gt;

&lt;div ng-show=&#34;showRealName&#34;&gt; Feel free to put in your own examples by playing
with the samples below. Code surrounded with &lt;! !&gt; is ignored from the tally,
since it would vary heavily based on the language and desired result. Variable
and type names are kept at single characters, which are counted. Feel free to
add in your own language below, and use the copy feature to extract the data
structure to use in a pull request.

&lt;div&gt;Select Language:
&lt;select ng-options=&#34;lang.name for lang in allLanguages&#34; ng-model=&#34;selectedLang&#34;&gt;&lt;/select&gt;
&lt;/div&gt;
&lt;button ng-click=&#34;showEdit = !showEdit&#34;&gt;Edit Language&lt;/button&gt;
&lt;button ng-click=&#34;copyToClipboard(selectedLang)&#34;&gt;Copy Changes to Clipboard&lt;/button&gt;
&lt;div ng-show=&#34;showEdit&#34;&gt;
&lt;span&gt;&lt;input ng-model=&#34;selectedLang.name&#34;&gt;&lt;/input&gt;&lt;/span&gt;
&lt;div ng-repeat=&#34;check in langChecks&#34;&gt;
&lt;h3&gt;{{ check.name }} : {{ score(selectedLang[check.key]) }}  &lt;/h3&gt;
&lt;p&gt;
&lt;textarea class=&#34;widetextarea&#34; rows=&#34;5&#34; ng-model=&#34;selectedLang[check.key].desc&#34;&gt;&lt;/textarea&gt; 
&lt;div&gt;
Code: &lt;select ng-options=&#34;enforcedNice(e) for e in enforcedTypes&#34; ng-model=&#34;selectedLang[check.key].enforced&#34;&gt;&lt;/select&gt;
&lt;div class=&#34;tablecode&#34;&gt;1234567890123456789012345678901234567890&lt;/div&gt;
&lt;div class=&#34;tablecode&#34; &gt; {{ cleanCode(selectedLang[check.key].rawCode) }}  &lt;/div&gt;
&lt;input type=&#34;text&#34; style=&#34;width:90%;&#34; ng-model=&#34;selectedLang[check.key].rawCode&#34; /&gt;
&lt;/div&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div ng-show=&#34;!showEdit&#34;&gt;
&lt;span&gt;{{ selectedLang.name }} &lt;/span&gt;
&lt;div ng-repeat=&#34;check in langChecks&#34;&gt;
&lt;h3&gt;{{ check.name }} : {{ score(selectedLang[check.key]) }}  &lt;/h3&gt;
&lt;p&gt;
{{ selectedLang[check.key].desc }} 
&lt;div&gt;
Code: {{ enforcedNice(selectedLang[check.key].enforced)  }} 
&lt;div class=&#34;tablecode&#34; ng-if=&#34;selectedLang[check.key].rawCode&#34;&gt;1234567890123456789012345678901234567890&lt;/div&gt;
&lt;div class=&#34;tablecode&#34; &gt; {{ cleanCode(selectedLang[check.key].rawCode) }}  &lt;/div&gt;
&lt;input type=&#34;text&#34; style=&#34;width:90%;&#34; ng-model=&#34;selectedLang[check.key].rawCode&#34; /&gt;
&lt;/div&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>