<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Programming | Deliberate Software]]></title>
  <link href="http://steveshogren.github.io/blog/categories/programming/atom.xml" rel="self"/>
  <link href="http://steveshogren.github.io/"/>
  <updated>2013-12-14T20:51:12-05:00</updated>
  <id>http://steveshogren.github.io/</id>
  <author>
    <name><![CDATA[Steve Shogren]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[The 5:01 Developer]]></title>
    <link href="http://steveshogren.github.io/501-developer/"/>
    <updated>2013-12-14T00:00:00-05:00</updated>
    <id>http://steveshogren.github.io/501-developer</id>
    <content type="html"><![CDATA[<p>
  Can we agree for this post that money, energy, time, and effort are
  all forms of power? Like literally, if I wanted to build a building,
  I am going to need tools, skills, materials, labor. I can use the
  most liquid form of power I have (cash) to acquire all these things,
  or I can use a much less liquid form of power (my time) to harvest,
  extract, refine, learn, and build my building myself. Usually,
  economies of scale mean it is dramatically more efficient for me to
  specialize in one way of converting time into liquid power. Then,
  when I need something, I simply pass that power on to someone else
  who has also specialized.
</p>


<p>
  Now you know why I don't quarry my own stone to build an
  amphitheater in my back yard.
</p>


<p>
  When you work a job, you are converting one form of power you have:
  time (and usually skills), into another much more liquid form of
  power: money. One can extend the model to include calories and
  shelter (the power to sleep safely) along with time and skills.
  Great, this is just basic economics, right? You need power (money)
  to buy power (food and shelter) to buy power (time) to convert back
  into more power (money). Since you are "harvesting" something finite
  and therefore scarce (time out of your short life), if you are
  disciplined and lucky, you can consistently end up with a net
  positive.
</p>


<p>
  On to the point! I read a post today mentioning
  the <a href="http://www.hanselman.com/blog/DarkMatterDevelopersTheUnseen99.aspx">"5:01 developer"</a>. It made me mad.
</p>


<p>
  Ideas like this are so subtle they just seep into your psyche. I
  don't think anyone would say under normal conditions, "I should
  really work for free today". But, effectively, that is what this
  whole phrase is about. The phrase lets people who cram eight hours
  of work into ten hours "get back" at those that get the same work
  done in six to eight. To clarify, this title is not about "saving
  the company" or "giving back to society"; those are unusual
  conditions. No, it is a chastisement of developers who do not "give
  back to the company". Sort of a tax, for the privilege of getting
  paid to work there, you should, according to this ideal, just give
  back some of that power they gave you. Thinking about this with the
  power model, you should accept money to work there in exchange for
  your time, but, when the time comes, you should deliberately
  short-change yourself by giving them extra time. Like some sort of
  weird tip.
</p>


<p>
  Hopefully this sounds as ridiculous as it really is.
</p>


<p>
  Now, in that post, the author sort of backpedals a little bit,
  saying that <i>what he really meant</i> was a developer who stops
  thinking about development as soon as work is over, someone not
  passionate. The issue I have is the whole wording of that phrase
  assumes a passion for their <i>job</i>, not a passion for
  their <i>craft</i>.
</p>


<p>
  I do not think it makes sense to demand every person
  be <i>passionate</i> about the job they are doing. There have been
  many times I have (even at a job I normally loved) done long,
  boring, and fruitless work. I did not do that work out of my passion
  for the "Mission: Save the World of Enterprise Banking", but because
  I am a professional: I do what needs to be done to the best of my
  abilities.
</p>


<p>
  I think professionalism is very important. In others I work with, I
  want to see the attitude that causes someone to stay abreast in
  their field. I want to be around those who keep their own saws
  sharp, who come in and work hard, and who push themselves and those
  around them to be best they can.
</p>


<p>
  Back to overtime: in my experience, very few offices care enough
  about their developers to let them sharpen their saws at work, so
  why would you waste your precious free time there? Will they pay you
  more for it? Doubtful. Will they be less likely to fire you when
  times get tough? <i>Maybe</i>. Sounds to me like a lot of
  speculation. A lot of investment for a marginal or non-existent
  return. If you want more money: either ask for a raise, go take a
  raise at a new job, or work a second job on the side. Those have a
  direct impact on your income. Putting in extra hours hoping someone
  will notice and reward you for it makes about as much sense as
  assuming you will get a raise for wearing the boss's favorite color
  every day.
</p>


<p>
  Consider the person who stays one extra hour a day as an
  "investment". The typical end of the year raise scale I have seen in
  the US in companies larger than 30 people is a 0-5% increase a
  year. Uncommonly does someone get more than that, and should not be
  considered a usual practice. The typical best you can expect is
  5%, maybe a bonus (in four diverse jobs, none gave bonuses, so I
  haven't considered them personally). Back to the extra hour a day. Not
  completely out there, not putting in a vast amount extra, right?
  Well, one extra hour is 12.5% percent more hours a day. But the most
  you can expect, on average, is 5%, if you are lucky! To put it in
  perspective, I have seen guys put in 12 hour days and get fired
  because the boss didn't get along with them.
</p>


<p>
  At a <i>few</i> points in my career, I worked longer hours. Once it
  was because I truly enjoyed the work and it was fun. Another time it
  was because I felt like the extra time was going to directly pay off
  as an investment (it didn't). A few times I have stuck around to
  "wrap this off" or "help out with something deeply unusual that has
  to be done outside normal work hours". I recently recommended to my
  little brother he work longer hours, as he was hired without many
  needed skills and on shaky footing with the boss. He worked out a
  deal where he spent two extra hours a day for a couple months
  reading and practicing to get "caught up". His boss got to see his
  hustle when he was the first one in and last one out every day; he
  got to study away from the distractions of everyday life. <b>In all
  circumstances, make overtime the exception, never the rule.</b>
</p>


<p>
  One last point. Before you think me a selfish jerk about my free
  time, know that I make it a daily habit to spend 30-60 minutes
  outside work advancing my development skills. I practice interactive
  rebases, work through awesome books, do online courses, advance side
  projects, contribute to open source, give local meetup talks, and
  learn new languages. These are the basics of what I feel is
  necessary to sustain and advance myself as a professional. If I
  simply worked a 45-50 hour work week instead, I personally would not
  have the motivation to <i>afterwards</i> stay so abreast of
  important changes in the development world. I would become much less
  effective time, never getting any better. When the need for new
  paradigms or technologies arose, I would be so stuck in a rut that
  fear and ignorance would drive all my decisions.
</p>


<p>
  Treat overtime like an investment, and make it wisely. You are
  literally mining your life for time, so make sure you are
  comfortable with your investment strategies.
</p>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Intro To Macros]]></title>
    <link href="http://steveshogren.github.io/intro-to-macros/"/>
    <updated>2013-08-19T00:00:00-04:00</updated>
    <id>http://steveshogren.github.io/intro-to-macros</id>
    <content type="html"><![CDATA[<p>
Macros are the most powerful way to manipulate the syntax of your language. Macros make it possible to completely modify your language to match your domain. To explain them, think for a minute about functions using the simple “substitution model” used to teach functions to beginner programmers. The substitution model has the reader replace a function call with the body of the called function.
</p>


<p>``` ruby
def doCalc ()
   return 1 + 2
end
def doAwesome (x)
   return doCalc() + x
end</p>

<h1>before substitution&hellip;</h1>

<p>def test ()
   return doAwesome(3)
end</p>

<h1>when substituted&hellip;</h1>

<p>def test ()
   return (1 + 2) + 3
end
```</p>

<p>
Ignoring scoping, the function/call system allows for immense power in programing languages. The function lets you "expand" a simple call into a much larger block of code. The expanded code can be vastly large. In our example above, the (doCalc) function is small, but it reality it could be doing hundreds of lines of code, which also would have to be substituted in place. The difference is real functions do not work this way. Real functions have their values evaluated before getting passed in as parameters.
</p>


<p dir="ltr">Macros are similar to the substitution model, with one expressed difference: by default, macros operate on the text of the code itself, not the values. Think of how expansion works in the simple if statement.</p>


<p><code>ruby
if workday(today()) do
  x = 1 + 1
else
  x = doOtherHugeCalc()
end
</code></p>

<p dir="ltr">Does the huge calc function execute each time? Not at all, you are guaranteed that only one will happen at any given run through that block of code.</p>


<p dir="ltr">Let’s say you wanted to make a generic function that would abstract away that call, and let you return the values, maybe something like this:</p>


<p>``` ruby
def ifworkday(first, second)
  if workday(today()) do</p>

<pre><code>return first
</code></pre>

<p>  else</p>

<pre><code>return second
</code></pre>

<p>  end
end
x = ifworkday(1 + 1, doOtherHugeCalc())</p>

<h1>when the values are “shown”</h1>

<p>def ifworkday(2, 3)
  if workday(today()) do</p>

<pre><code>return 2
</code></pre>

<p>  else</p>

<pre><code>return 3
</code></pre>

<p>  end
end
x = ifworkday(2, 3) # CALLED BOTH FUNCTIONS
```</p>

<p>
But wait, now BOTH functions get called, you are doing exactly twice as many huge calcs as needed. Now, those familiar with javascript probably are already itching with the solution, "JUST WRAP THEM IN ANONYMOUS FUNCTIONS!!!". I hear you, sure that works in this super simple example, but macros let you do this without that extra wordiness.  Macros defer evaluating parameters. Think of a macro as a function, but the biggest difference is parameters DON'T get called till you choose to call them.
</p>


<p>```</p>

<h1>if it is a macro&hellip;</h1>

<p>defmacro ifworkday(first, second)
  if workday(today()) do</p>

<pre><code>return first
</code></pre>

<p>  else</p>

<pre><code>return second
</code></pre>

<p>  end
end
ifworkday(1+1, doOtherHugeCalc())</p>

<h1>when the values are “shown”</h1>

<p>defmacro ifworkday(&ldquo;1+1&rdquo;, &ldquo;doOtherHugeCalc()&rdquo;)
  if workday(today()) do</p>

<pre><code>return eval("1+1")
</code></pre>

<p>  else</p>

<pre><code>return eval("doOtherHugeCalc()")
</code></pre>

<p>  end
end
```</p>

<p dir="ltr">Now, in this simple ruby example, I had to use strings and eval to approximate what happens with macros in other languages. Since this is unwieldy, let’s switch to clojure, where it is more natural.</p>


<p>I said that macros defer evaluation, they do that, but they also do much more. Lets look at a clojure list.</p>

<p><code>clojure
‘(a b c d)
;;=&gt; (a b c d)
</code></p>

<p dir="ltr">This is a list of four symbols. Symbols are basically like an enum or a keyword that only equals itself. So it is possible to say:</p>


<p><code>clojure
(= ‘a ‘a)
;;=&gt; true
</code></p>

<p dir="ltr">but that’s pretty much it. If I tried to evaluate a symbol, it would complain that the symbol has no definition, since it is trying to treat it like a variable lookup.</p>


<p><code>clojure
;; nothing gets evaluated inside the list at all..
‘(a b c)
</code></p>

<p dir="ltr">Now you are left with a list of symbols, unevaluated. The defmacro form, for each parameter, gives you such a list of unevaluated symbols.</p>


<p><code>`` clojure
;;before compilation
(defmacro ifWorkday [bigCalc1, bigCalc2]
 </code>(if (workday (today))</p>

<pre><code>~bigCalc1
~bigCalc2))
</code></pre>

<p>;; the call
(ifWorkday (+ 1 1) (otherBigCalc))</p>

<p>;;&hellip; after compilation&hellip;
(defmacro ifWorkday [(+ 1 1), (otherBigCalc)]
  `(if (workday (today))</p>

<pre><code>(+ 1 1)
(otherBigCalc)))
</code></pre>

<p>;; after compilation the call gets <em>transformed</em> into:
(if (workday (today)) (+ 1 1) (otherBigCalc))
```</p>

<p dir="ltr">The ` is called syntax quote, it disables evaluation much like quote does (it just also namespaces everything inside for your convenience). The ~ is called an unquote, and it turns evaluation back on. In any given space, if you have a function called (id), and you called it like (`~id), it would mean the same as just calling (id), because you turned off evaluation, then turned it back on. Above, the bigCalc parameters are filled with the actual values passed in, the lists unevaluated of ‘(+ 1 1) and ‘(otherBigCalc). I like to think of the return from a macro as a “template” to replace the original call with. Take the call (ifWorkday (+ 1 1) (otherBigCalc)). When calling the macro, the last thing returned from the macro is expected to be a list of clojure code to replace the original call at compile time. So, at compile time, (ifWorkday (+ 1 1) (otherBigCalc)) is replaced with (if (workday (today)) (+ 1 1) (otherBigCalc)) which is the return from the macro.</p>


<p dir="ltr">But that is a stupid example. Making your own if statements is the most basic uses of macros. But it demonstrates the point: macros generate code. This is profound, but hard to grasp for the first time. Macros expand code before compilation time, and therefore can be used to generate lots of code automatically.</p>




<p>
For extra credit, let’s take a bigger example in the same vein as our custom ifWorkday. I am making a game, and in it, I want an easy abstraction that gives me back one of several options with a custom percent chance. Ideally, something like
</p>


<p><code>clojure
(if25 (doFirst) (doSecond))
</code></p>

<p>
where the number corresponds to the percent chance that the next item will be executed and returned. In this example, (doFirst) will only happen 25% of the time and (doSecond) 75% of the time. This demonstrates a more interesting use of macros, the ability to generate other functions (or even other macros). Here is the code:
</p>


<p><code>`` clojure
(defmacro make-percents []
 </code>(list ~@(map (fn [num]</p>

<pre><code>              (let [macro-name (symbol (str "if" num))]    
                `(defmacro ~macro-name [x# y#]               
                  `(if (&gt; ~~num (rand-int 100)) ~x# ~y#))))  
            (range 100))))
</code></pre>

<p>(make-percents)
```</p>

<p>
This macro only needs to be called once, and what it does is generates this:
</p>


<p><code>clojure
(defmacro if0 [x__2603__auto__ y__2604__auto__]
  `(if (&gt; 0 (rand-int 100)) ~x__2603__auto__ ~y__2604__auto__))
(defmacro if1 [x__2604__auto__ y__2605__auto__]
  `(if (&gt; 1 (rand-int 100)) ~x__2604__auto__ ~y__2605__auto__))
(defmacro if2 [x__2606__auto__ y__2607__auto__]
  `(if (&gt; 2 (rand-int 100)) ~x__2606__auto__ ~y__2607__auto__))
;;...
(defmacro if99 [x__2609__auto__ y__2601__auto__]
  `(if (&gt; 99 (rand-int 100)) ~x__2609__auto__ ~y__2601__auto__))
</code></p>

<p dir="ltr">I hope the profundity of this hits you like a ton of bricks. With under 10 lines of macro code (and calling it) we auto-generated 100 macros! This 10 lines of code gets expanded to 100 more lines! Sure, this is a simple, almost silly example, but imagine what you could do with this sort of power. In a more complex example, you could be auto-generating vast amounts of code this way, code that you don’t have to write every time by hand. Don't let the x__2506__auto__ parameter names scare you, I will explain that in a bit.</p>


<p>
Those generated macros should not be too hard to understand after the previous ifWorkday macro, and they can be called just like we expect. Let's deconstruct (make-percents).
</p>


<p><code>clojure
`(list ~@(map (fn [num]  
</code></p>

<p dir="ltr">The ~@ is like unquote from above, the only difference is instead of just unquoting a list to be evaluated, it extracts the values from the list and sticks them in place. I like to think of it as just removing the outer parens in the unquoted list.</p>


<p><code>clojure
(let [x ‘(1 2 (3 4))]
  `(+ 8 ~@x))
;; =&gt; (clojure.core/+ 8 1 2 (3 4))
</code></p>

<p dir="ltr">The (list) function is just how we make a list of elements.</p>


<p><code>clojure
(list ‘a ‘b ‘c)
;;=&gt; (a b c)
</code></p>

<p>
The (map) function has two arguments: the first, a function; the second, a list of elements to “map” over.
</p>


<p>``` clojure
~@(map (fn [num] (&hellip;))</p>

<pre><code>   (range 100))
</code></pre>

<p>```</p>

<p dir="ltr">As you can see here, the ~@() tells us to unquote the whole form, re-enabling the evaluation, and therefore running the map call. The map then calls the anonymous function 100 times, with the num being the numbers 0..99. Inside the anon function we have a let binding:</p>


<p><code>clojure
(let [macro-name (symbol (str "if" num))]
</code></p>

<p dir="ltr">This line is more simple, it makes a let that binds to the value macro-name a symbol that looks like ‘if1, ‘if2, .. depending on which iteration of the loop you are on.</p>


<p><code>clojure
`(defmacro ~macro-name [x# y#]                
  `(if (&gt; ~~num (rand-int 100)) ~x# ~y#))))
</code></p>

<p dir="ltr">Here is the actual returned “template” of the macro. The # at the end of the parameter name ensures that it is unique, which is really really useful when you consider that the code returned from a macro replaces the call in place. To make sure you don’t accidentally double bind the same name, clojure will give you a warning like “cannot let unqualified name” if you try to let a value without including the # at the end inside a template, another really handy feature. What gets generated by x# looks something like x__2506__auto__ which is guaranteed to be unique. The reason you need this is in case there was another value bound to x inside your code, it could cause a conflict, and in certain circumstances, really break your code, so this prevents such conflicts. You should only need these when creating parameters or let bindings inside the template. All the values "outside" the template do not need to have the # appended to their names, since they will not actually be a part of the returned template.</p>


<p dir="ltr">The only odd thing here is the double ~~num. Notice how many quote levels deep we are. It is possible to unquote to “step” back up a level in the template. By the time we get to the ~~num, the original function parameter of num was two “levels” higher, so to access it, we have to “step up” two levels. Let me highlight it in colors, to make it easier to see.</p>


<p><img src="/images/macro.jpg" title="" ></p>

<p dir="ltr">See how by unquoting ~macro-name one level in line 3, and unquoting ~~num two levels on line 4, we bring them both back “up” to the “red” level where they were defined? Similarly, by unquoting ~x# and ~y# one level on line 4, we bring them back “up” to their “blue” definition level? This is an incredibly powerful tool that allows immense expansion of code in a tiny amount of space. If you think of the returned code form as a “template”, this quoting and unquoting lets you step in and out of evaluation with ease.</p>


<p dir="ltr">In the end, when the (make-percents) macro is called, it produces 100 macros that are callable just like any other macro. To tell the whole story, I wrote this into my game, then decided I wanted a more sophisticated macro that could take any number of percentages, but this remained a good way to explain this specific pattern of looped macro generation.</p>


<p dir="ltr">Hopefully, this article caused you to see how incredibly powerful macros can be, allowing effectively infinite auto-generation of code. The field of macros is still very under-explored, as most languages do not allow them at all, they remain a largely undiscovered, and yet incredibly powerful tool.</p>


<p dir="ltr">For further reading, I highly recommend Let Over Lambda, the first 6 chapters of which are free <a href="http://letoverlambda.com/index.cl/toc">here</a>. Let Over Lambda is written with examples in Common Lisp, but the macro parts are very similar in Clojure, so is a valuable read.</p>


<p>&nbsp;</p>
]]></content>
  </entry>
  
</feed>
