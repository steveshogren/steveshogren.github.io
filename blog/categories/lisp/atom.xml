<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: lisp | Deliberate Software]]></title>
  <link href="http://deliberate-software.com/blog/categories/lisp/atom.xml" rel="self"/>
  <link href="http://deliberate-software.com/"/>
  <updated>2015-10-29T17:53:56-04:00</updated>
  <id>http://deliberate-software.com/</id>
  <author>
    <name><![CDATA[Steve Shogren]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Intro To Macros]]></title>
    <link href="http://deliberate-software.com/intro-to-macros/"/>
    <updated>2013-08-19T00:00:00-04:00</updated>
    <id>http://deliberate-software.com/intro-to-macros</id>
    <content type="html"><![CDATA[<p>
Macros are the most powerful way to manipulate the syntax of your language. Macros make it possible to completely modify your language to match your domain. To explain them, think for a minute about functions using the simple “substitution model” used to teach functions to beginner programmers. The substitution model has the reader replace a function call with the body of the called function.
</p>


<pre><code class="ruby">def doCalc ()
   return 1 + 2
end
def doAwesome (x) 
   return doCalc() + x
end 

#before substitution...
def test () 
   return doAwesome(3)
end

# when substituted...
def test ()
   return (1 + 2) + 3
end
</code></pre>

<p>
Ignoring scoping, the function/call system allows for immense power in programing languages. The function lets you "expand" a simple call into a much larger block of code. The expanded code can be vastly large. In our example above, the (doCalc) function is small, but it reality it could be doing hundreds of lines of code, which also would have to be substituted in place. The difference is real functions do not work this way. Real functions have their values evaluated before getting passed in as parameters.
</p>


<p dir="ltr">Macros are similar to the substitution model, with one expressed difference: by default, macros operate on the text of the code itself, not the values. Think of how expansion works in the simple if statement.</p>


<pre><code class="ruby">if workday(today()) do
  x = 1 + 1
else
  x = doOtherHugeCalc()
end
</code></pre>

<p dir="ltr">Does the huge calc function execute each time? Not at all, you are guaranteed that only one will happen at any given run through that block of code.</p>


<p dir="ltr">Let’s say you wanted to make a generic function that would abstract away that call, and let you return the values, maybe something like this:</p>


<pre><code class="ruby">def ifworkday(first, second)
  if workday(today()) do
    return first
  else
    return second
  end
end
x = ifworkday(1 + 1, doOtherHugeCalc())

#when the values are “shown”
def ifworkday(2, 3)
  if workday(today()) do
    return 2
  else
    return 3
  end
end
x = ifworkday(2, 3) # CALLED BOTH FUNCTIONS
</code></pre>

<p>
But wait, now BOTH functions get called, you are doing exactly twice as many huge calcs as needed. Now, those familiar with javascript probably are already itching with the solution, "JUST WRAP THEM IN ANONYMOUS FUNCTIONS!!!". I hear you, sure that works in this super simple example, but macros let you do this without that extra wordiness.  Macros defer evaluating parameters. Think of a macro as a function, but the biggest difference is parameters DON'T get called till you choose to call them.
</p>


<pre><code>#if it is a macro...
defmacro ifworkday(first, second)
  if workday(today()) do
    return first
  else
    return second
  end
end
ifworkday(1+1, doOtherHugeCalc())

#when the values are “shown”
defmacro ifworkday("1+1", "doOtherHugeCalc()")
  if workday(today()) do
    return eval("1+1")
  else
    return eval("doOtherHugeCalc()")
  end
end
</code></pre>

<p dir="ltr">Now, in this simple ruby example, I had to use strings and eval to approximate what happens with macros in other languages. Since this is unwieldy, let’s switch to clojure, where it is more natural.</p>


<p>I said that macros defer evaluation, they do that, but they also do much more. Lets look at a clojure list.</p>

<pre><code class="clojure">‘(a b c d)
;;=&gt; (a b c d)
</code></pre>

<p dir="ltr">This is a list of four symbols. Symbols are basically like an enum or a keyword that only equals itself. So it is possible to say:</p>


<pre><code class="clojure">(= ‘a ‘a)
;;=&gt; true
</code></pre>

<p dir="ltr">but that’s pretty much it. If I tried to evaluate a symbol, it would complain that the symbol has no definition, since it is trying to treat it like a variable lookup.</p>


<pre><code class="clojure">;; nothing gets evaluated inside the list at all..
‘(a b c) 
</code></pre>

<p dir="ltr">Now you are left with a list of symbols, unevaluated. The defmacro form, for each parameter, gives you such a list of unevaluated symbols.</p>


<pre><code class="clojure">;;before compilation
(defmacro ifWorkday [bigCalc1, bigCalc2]
  `(if (workday (today))
    ~bigCalc1
    ~bigCalc2))

;; the call
(ifWorkday (+ 1 1) (otherBigCalc))

;;... after compilation...
(defmacro ifWorkday [(+ 1 1), (otherBigCalc)]
  `(if (workday (today))
    (+ 1 1)
    (otherBigCalc)))
;; after compilation the call gets _transformed_ into:
(if (workday (today)) (+ 1 1) (otherBigCalc))
</code></pre>

<p dir="ltr">The ` is called syntax quote, it disables evaluation much like quote does (it just also namespaces everything inside for your convenience). The ~ is called an unquote, and it turns evaluation back on. In any given space, if you have a function called (id), and you called it like (`~id), it would mean the same as just calling (id), because you turned off evaluation, then turned it back on. Above, the bigCalc parameters are filled with the actual values passed in, the lists unevaluated of ‘(+ 1 1) and ‘(otherBigCalc). I like to think of the return from a macro as a “template” to replace the original call with. Take the call (ifWorkday (+ 1 1) (otherBigCalc)). When calling the macro, the last thing returned from the macro is expected to be a list of clojure code to replace the original call at compile time. So, at compile time, (ifWorkday (+ 1 1) (otherBigCalc)) is replaced with (if (workday (today)) (+ 1 1) (otherBigCalc)) which is the return from the macro.</p>


<p dir="ltr">But that is a stupid example. Making your own if statements is the most basic uses of macros. But it demonstrates the point: macros generate code. This is profound, but hard to grasp for the first time. Macros expand code before compilation time, and therefore can be used to generate lots of code automatically.</p>




<p>
For extra credit, let’s take a bigger example in the same vein as our custom ifWorkday. I am making a game, and in it, I want an easy abstraction that gives me back one of several options with a custom percent chance. Ideally, something like
</p>


<pre><code class="clojure">(if25 (doFirst) (doSecond))
</code></pre>

<p>
where the number corresponds to the percent chance that the next item will be executed and returned. In this example, (doFirst) will only happen 25% of the time and (doSecond) 75% of the time. This demonstrates a more interesting use of macros, the ability to generate other functions (or even other macros). Here is the code:
</p>


<pre><code class="clojure">(defmacro make-percents []
  `(list ~@(map (fn [num]                                     
                  (let [macro-name (symbol (str "if" num))]    
                    `(defmacro ~macro-name [x# y#]               
                      `(if (&gt; ~~num (rand-int 100)) ~x# ~y#))))  
                (range 100))))
(make-percents)
</code></pre>

<p>
This macro only needs to be called once, and what it does is generates this:
</p>


<pre><code class="clojure">(defmacro if0 [x__2603__auto__ y__2604__auto__]
  `(if (&gt; 0 (rand-int 100)) ~x__2603__auto__ ~y__2604__auto__))
(defmacro if1 [x__2604__auto__ y__2605__auto__]
  `(if (&gt; 1 (rand-int 100)) ~x__2604__auto__ ~y__2605__auto__))
(defmacro if2 [x__2606__auto__ y__2607__auto__]
  `(if (&gt; 2 (rand-int 100)) ~x__2606__auto__ ~y__2607__auto__))
;;...
(defmacro if99 [x__2609__auto__ y__2601__auto__]
  `(if (&gt; 99 (rand-int 100)) ~x__2609__auto__ ~y__2601__auto__))
</code></pre>

<p dir="ltr">I hope the profundity of this hits you like a ton of bricks. With under 10 lines of macro code (and calling it) we auto-generated 100 macros! This 10 lines of code gets expanded to 100 more lines! Sure, this is a simple, almost silly example, but imagine what you could do with this sort of power. In a more complex example, you could be auto-generating vast amounts of code this way, code that you don’t have to write every time by hand. Don't let the x__2506__auto__ parameter names scare you, I will explain that in a bit.</p>


<p>
Those generated macros should not be too hard to understand after the previous ifWorkday macro, and they can be called just like we expect. Let's deconstruct (make-percents).
</p>


<pre><code class="clojure">`(list ~@(map (fn [num]  
</code></pre>

<p dir="ltr">The ~@ is like unquote from above, the only difference is instead of just unquoting a list to be evaluated, it extracts the values from the list and sticks them in place. I like to think of it as just removing the outer parens in the unquoted list.</p>


<pre><code class="clojure">(let [x ‘(1 2 (3 4))]
  `(+ 8 ~@x))
;; =&gt; (clojure.core/+ 8 1 2 (3 4))
</code></pre>

<p dir="ltr">The (list) function is just how we make a list of elements.</p>


<pre><code class="clojure">(list ‘a ‘b ‘c)
;;=&gt; (a b c)
</code></pre>

<p>
The (map) function has two arguments: the first, a function; the second, a list of elements to “map” over.
</p>


<pre><code class="clojure">~@(map (fn [num] (...))
       (range 100))
</code></pre>

<p dir="ltr">As you can see here, the ~@() tells us to unquote the whole form, re-enabling the evaluation, and therefore running the map call. The map then calls the anonymous function 100 times, with the num being the numbers 0..99. Inside the anon function we have a let binding:</p>


<pre><code class="clojure">(let [macro-name (symbol (str "if" num))] 
</code></pre>

<p dir="ltr">This line is more simple, it makes a let that binds to the value macro-name a symbol that looks like ‘if1, ‘if2, .. depending on which iteration of the loop you are on.</p>


<pre><code class="clojure">`(defmacro ~macro-name [x# y#]                
  `(if (&gt; ~~num (rand-int 100)) ~x# ~y#)))) 
</code></pre>

<p dir="ltr">Here is the actual returned “template” of the macro. The # at the end of the parameter name ensures that it is unique, which is really really useful when you consider that the code returned from a macro replaces the call in place. To make sure you don’t accidentally double bind the same name, clojure will give you a warning like “cannot let unqualified name” if you try to let a value without including the # at the end inside a template, another really handy feature. What gets generated by x# looks something like x__2506__auto__ which is guaranteed to be unique. The reason you need this is in case there was another value bound to x inside your code, it could cause a conflict, and in certain circumstances, really break your code, so this prevents such conflicts. You should only need these when creating parameters or let bindings inside the template. All the values "outside" the template do not need to have the # appended to their names, since they will not actually be a part of the returned template.</p>


<p dir="ltr">The only odd thing here is the double ~~num. Notice how many quote levels deep we are. It is possible to unquote to “step” back up a level in the template. By the time we get to the ~~num, the original function parameter of num was two “levels” higher, so to access it, we have to “step up” two levels. Let me highlight it in colors, to make it easier to see.</p>


<p><img src="/images/macro.jpg" title="" ></p>

<p dir="ltr">See how by unquoting ~macro-name one level in line 3, and unquoting ~~num two levels on line 4, we bring them both back “up” to the “red” level where they were defined? Similarly, by unquoting ~x# and ~y# one level on line 4, we bring them back “up” to their “blue” definition level? This is an incredibly powerful tool that allows immense expansion of code in a tiny amount of space. If you think of the returned code form as a “template”, this quoting and unquoting lets you step in and out of evaluation with ease.</p>


<p dir="ltr">In the end, when the (make-percents) macro is called, it produces 100 macros that are callable just like any other macro. To tell the whole story, I wrote this into my game, then decided I wanted a more sophisticated macro that could take any number of percentages, but this remained a good way to explain this specific pattern of looped macro generation.</p>


<p dir="ltr">Hopefully, this article caused you to see how incredibly powerful macros can be, allowing effectively infinite auto-generation of code. The field of macros is still very under-explored, as most languages do not allow them at all, they remain a largely undiscovered, and yet incredibly powerful tool.</p>


<p dir="ltr">For further reading, I highly recommend Let Over Lambda, the first 6 chapters of which are free <a href="http://letoverlambda.com/index.cl/toc">here</a>. Let Over Lambda is written with examples in Common Lisp, but the macro parts are very similar in Clojure, so is a valuable read.</p>


<p>&nbsp;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Clojure... Debugger?]]></title>
    <link href="http://deliberate-software.com/clojure-debugger/"/>
    <updated>2013-08-17T00:00:00-04:00</updated>
    <id>http://deliberate-software.com/clojure-debugger</id>
    <content type="html"><![CDATA[<p>I was at the Clojadelphia meetup on Thursday, and got an excellent run through of the tools.trace library from Tim Visher. He has submitted a pull request to the original authors, with his expanded and very clear documentation found <a title="here" href="https://github.com/timvisher/what-does-tools-trace-do/blob/master/src/what_does_tools_trace_do/core.clj">here</a>.
<br />
<br />
One call from the library in particular really stood out, a call for finding out what form threw an exception out of many.
<br />
<br />
<code>clojure
;; trace-forms "Trace all the forms in the given body. Returns any
;; underlying uncaught exceptions that may make the forms fail."
(trace-forms
 (let [a (+ 1 1)
       b (* 2 2)
       c (* a b (/ 4 0))]
   c))
;; =&gt; ArithmeticException Divide by zero
;;      Form failed: (/ 4 0)
;;      Form failed: (* a b (/ 4 0))
;;      Form failed: (let* [a (+ 1 1) b (* 2 2) c (* a b (/ 4 0))] c)
;;      Form failed: (let [a (+ 1 1) b (* 2 2) c (* a b (/ 4 0))] c)
;;      clojure.lang.Numbers.divide (Numbers.java:156)
</code>
<br />
<br />
Which is incredibly cool. At the time, I could see using that all the time for helpful benefits. In the last few days though, I realized a more obvious function has been far more helpful to my daily development: deftrace. Deftrace just replaces a defn, and does the same, but it also prints out the ins and outs of the function.
<br />
<br />
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="c1">;; example up from clouredocs.org:</span>
</span><span class='line'>  <span class="c1">;; &lt;a href=&quot;http://clojuredocs.org/clojure_contrib/clojure.contrib.trace/deftrace&quot;&gt;http://clojuredocs.org/clojure_contrib/clojure.contrib.trace/deftrace&lt;/a&gt;</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">deftrace</span> <span class="nv">fib</span> <span class="p">[</span><span class="nv">n</span><span class="p">]</span>
</span><span class='line'>    <span class="p">(</span><span class="k">if </span><span class="p">(</span><span class="nb">or </span><span class="p">(</span><span class="nb">= </span><span class="nv">n</span> <span class="mi">0</span><span class="p">)</span> <span class="p">(</span><span class="nb">= </span><span class="nv">n</span> <span class="mi">1</span><span class="p">))</span>
</span><span class='line'>      <span class="mi">1</span>
</span><span class='line'>      <span class="p">(</span><span class="nb">+ </span><span class="p">(</span><span class="nf">fib</span> <span class="p">(</span><span class="nb">- </span><span class="nv">n</span> <span class="mi">1</span><span class="p">))</span> <span class="p">(</span><span class="nf">fib</span> <span class="p">(</span><span class="nb">- </span><span class="nv">n</span> <span class="mi">2</span><span class="p">)))))</span><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span>  <span class="p">(</span><span class="nf">fib</span> <span class="mi">4</span><span class="p">)</span>
</span><span class='line'>  <span class="c1">;; =&gt; 5</span>
</span><span class='line'>  <span class="c1">;; 1&gt; TRACE t2742: (fib 4)</span>
</span><span class='line'>  <span class="c1">;;    TRACE t2743: | (fib 3)</span>
</span><span class='line'>  <span class="c1">;;    TRACE t2744: | | (fib 2)</span>
</span><span class='line'>  <span class="c1">;;    TRACE t2745: | | | (fib 1)</span>
</span><span class='line'>  <span class="c1">;;    TRACE t2745: | | | =&gt; 1</span>
</span><span class='line'>  <span class="c1">;;    TRACE t2746: | | | (fib 0)</span>
</span><span class='line'>  <span class="c1">;;    TRACE t2746: | | | =&gt; 1</span>
</span><span class='line'>  <span class="c1">;;    TRACE t2744: | | =&gt; 2</span>
</span><span class='line'>  <span class="c1">;;    TRACE t2747: | | (fib 1)</span>
</span><span class='line'>  <span class="c1">;;    TRACE t2747: | | =&gt; 1</span>
</span><span class='line'>  <span class="c1">;;    TRACE t2743: | =&gt; 3</span>
</span><span class='line'>  <span class="c1">;;    TRACE t2748: | (fib 2)</span>
</span><span class='line'>  <span class="c1">;;    TRACE t2749: | | (fib 1)</span>
</span><span class='line'>  <span class="c1">;;    TRACE t2749: | | =&gt; 1</span>
</span><span class='line'>  <span class="c1">;;    TRACE t2750: | | (fib 0)</span>
</span><span class='line'>  <span class="c1">;;    TRACE t2750: | | =&gt; 1</span>
</span><span class='line'>  <span class="c1">;;    TRACE t2748: | =&gt; 2</span>
</span><span class='line'>  <span class="c1">;;    TRACE t2742: =&gt; 5</span>
</span></code></pre></td></tr></table></div></figure>
<br />
<br />
At this point in the demo, the room was leaping out of their chairs laughing in sheer delight at how awesome this is. It is ultimately such a simple idea, and yet it&rsquo;s execution is brilliant and inconceivably handy.
<br />
<br />
At first, I thought, &ldquo;well that is an incredibly cool party trick, but a party trick nonetheless&rdquo;. A few days of regular clojure development later, I realized the profundity of this library.
<br />
<br />
I have had on my list of &ldquo;pain points&rdquo; an item to learn how to debug clojure code. Once in a while, I have felt the need to find out exactly what was going on at a certain point, and had to awkwardly put in (do (pprint x) x) statements everywhere. Clearly though, that is lame.
<br />
<br />
Here is the grand reveal. <strong>Concepts and tools that other languages have sometimes look very different in clojure.</strong> &ldquo;Well, duh&rdquo;, you say. I am not talking about syntax! I am talking about the <em>tools.</em>
<br />
<br />
I wanted a debugger (and, yes, I know at least traditional one exists for clojure), and so that is what I would have looked for: the traditional &ldquo;put in a breakpoint, run the code, pause at that place, inspect values, etc&rdquo;. When I first saw tools.trace, the image of a &ldquo;debugger replacement&rdquo; did not immediately enter my head. But, tools.trace basically gives me almost all the benefit of a traditional debugger at effectively no hassle or cost. Just now I was developing some code, and got stuck on a spot where something unexpected happened, and with only a second&rsquo;s hassle, replaced a few defns with deftrace. I re-ran my code in the repl, and now got a printout of exactly what the in&rsquo;s and out&rsquo;s were, and all of a sudden it clicked. &ldquo;I just found my new debugger&rdquo;, and, &ldquo;wow, this debugger is way less hassle&rdquo;.
<br />
<br />
No, of course this doesn&rsquo;t do everything a full debugger does, but at least for the foreseeable future, it probably will do enough most of the time. The first time I need a real full debugger, I will go looking for it, but for now, I suspect this gets me my 80% benefit for way less than 20% hassle.
<br />
<br />
The discovery of such tools is what is making learning clojure such a profoundly rewarding journey for me. I am being taught to think about the &ldquo;default ide&rdquo; tools in such a different light. Watching as community members distill out these sort of High-Value concentrate tools using Clojure&rsquo;s meta-programming is simply the most mind altering thing I have experienced in programming.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Lisp REPL]]></title>
    <link href="http://deliberate-software.com/lisp-repl/"/>
    <updated>2011-06-04T00:00:00-04:00</updated>
    <id>http://deliberate-software.com/lisp-repl</id>
    <content type="html"><![CDATA[<p>
  So, working through the Land of Lisp book, getting the hang of it.
</p>


<p>
Chapter Six, the author starts off by talking a little about
  the Common Lisp REPL, or Read-Eval-Print-Loop that you use as sort
  of the "command line" for interacting with lisp. It is pretty cool,
  you type in code, and it executes. And then he opens the hood a
  little:
</p>


<pre><code class="clojure">(defun repl ()
    (loop (print (eval (read)))))
</code></pre>

<p>
WHAAAAAAAAAAAAAAA??!?!?!
</p>


<p>
I just about spit my drink all over the monitor laughing. The
function <strong>eval()</strong> evaluates whatever text is passed in
as code, in this case, from the command line via the obviously
named <strong>read</strong> and after executing
it, <strong>print()</strong> prints the result, and it just does that
forever till you quit.
</p>


<p>
That means, you could make one of these for any language that can
evaluate strings into code. I know python has one built-in. Php can
evaluate code with eval, and a quick search shows a highly nifty (and
robust from the looks of
it) <a href="https://github.com/facebook/phpsh">REPL for php</a>
complements of facebook. Sweet. Or, you can use php -a for the
interactive mode.
</p>

]]></content>
  </entry>
  
</feed>
