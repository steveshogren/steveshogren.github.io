<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: architecture | Deliberate Software]]></title>
  <link href="http://deliberate-software.com/blog/categories/architecture/atom.xml" rel="self"/>
  <link href="http://deliberate-software.com/"/>
  <updated>2016-02-19T07:08:38-05:00</updated>
  <id>http://deliberate-software.com/</id>
  <author>
    <name><![CDATA[Steve Shogren]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Pop Culture Architecture]]></title>
    <link href="http://deliberate-software.com/pop-culture-architecture/"/>
    <updated>2016-02-19T06:55:30-05:00</updated>
    <id>http://deliberate-software.com/pop-culture-architecture</id>
    <content type="html"><![CDATA[<blockquote><p>&ldquo;ActiveRecord is so hot right now!&rdquo; - comment in 2006</p></blockquote>

<p>Pop Culture Architecture is the current &ldquo;fad&rdquo; of the day. I have seen it be
microservices, business capabilities, CQRS, test driven development,
service-oriented architecture, ORMs, and ActiveRecord. Each of these have been
fashionable at some point.</p>

<p>Fashion is ultimately a signaling mechanism for status. We are attracted to
fashionable architectures because they signal we have worked on elite teams. The
more difficult or costly the trade-offs of the architecture, the more elite and
special our team must have been to implement it successfully.</p>

<h2>Example: Microservices</h2>

<p>Microservices is a current fashionable design. Microservices have very clear
pros and cons. They come with the ability to have a huge team or a fragmented
deployment that potentially allows for horizontal scaling. For that ability, you
will pay the immense costs: loss of strong consistency and transactions, a
labyrinthine operational footprint and deployment, increased communication
effort, expensive integration testing, and a code base that takes longer to
program. <a href="http://martinfowler.com/articles/microservice-trade-offs.html">(1)</a>.</p>

<p>If you have a small team or system that does not need horizontal scaling on
every single component, a microservice architecture is unlikely to solve your
communication or trust issues. You will spend dollars on deployment, consistency
issues, distributed debugging, and basic programming just to save a penny on
communication and teamwork.
<a href="http://www.stackbuilders.com/news/the-hidden-costs-of-microservices">(2)</a></p>

<p>For most teams, the logical conclusion probably will be: a microservice
architecture solves problems we don&rsquo;t have.</p>

<p>Microservices remain fashionable because they indicate work at the size and
scale of a handful of elite companies. You would only likely encounter a couple
hundred companies in the world that have a development staff so large or loads
so high as to truly require such a system. Because of the rarity of actual need,
it is a perfect signaling mechanism for status.</p>

<p>Saying that you implemented a microservice architecture implies &ldquo;my team was so
large or my product so popular, my team could afford to pay almost any cost to
meet the demand.&rdquo;</p>

<p>Carefully consider your architecture decisions. Do not allow fashion to dictate
your choices. Take pride in selecting the appropriate architecture for the
project, no matter how unpopular.</p>
]]></content>
  </entry>
  
</feed>
