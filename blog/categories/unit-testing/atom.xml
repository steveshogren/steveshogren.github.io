<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Unit Testing | Deliberate Software]]></title>
  <link href="http://steveshogren.github.io/blog/categories/unit-testing/atom.xml" rel="self"/>
  <link href="http://steveshogren.github.io/"/>
  <updated>2015-03-09T08:17:52-04:00</updated>
  <id>http://steveshogren.github.io/</id>
  <author>
    <name><![CDATA[Steve Shogren]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Where to Store Known Issues]]></title>
    <link href="http://steveshogren.github.io/known-issue-storage/"/>
    <updated>2014-06-14T22:05:00-04:00</updated>
    <id>http://steveshogren.github.io/known-issue-storage</id>
    <content type="html"><![CDATA[<p>Unit tests are the best place to store known issues.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Good Design, Java, or Unit Testing. Pick two.]]></title>
    <link href="http://steveshogren.github.io/di-is-a-hack/"/>
    <updated>2014-05-06T12:05:00-04:00</updated>
    <id>http://steveshogren.github.io/di-is-a-hack</id>
    <content type="html"><![CDATA[<p>Every codebase I have seen or heard of that uses dependency injection
for all dependencies also performs strict unit testing. Why is that?
What about unit testing and DI are so linked?</p>

<p>You cannot have unit testing in Java/C# without dependency injection.</p>

<p>If you have ever seen a codebase in Java/C# that has ten injected
classes, right there, you have a codebase that does heavy unit
testing. If you are deep into the unit testing culture, you will have
been taught that it is a good design to use DI everywhere. Is it
really? Do the contortions required to do DI make your code easier to
use/reuse/refactor? Or do you do it because you have to? Can you think
of a single time where DI made anything easier?</p>

<p>The TDD proponents realized that you cannot reasonably perform unit
testing without DI in Java/C#, and so they have argued that a
completely dependency injected codebase is a good design. In reality,
DI for unit testing is a hack because Java/C# are so ill-suited to
unit testing.</p>

<p>For example, how would we unit test a function that talks to the
database in C# without a framework that requires mappings and global
singletons? We would put an interface around the database connection,
then pass it into the constructor through an optional parameter. Our
test would then make another implementor of that interface, and pass
it in when testing. This is par for the course in Java as well.</p>

<p>``` csharp
// DBConnection.cs
public interface IDBConnection { }
public class DBConnection : IDBConnection{ }</p>

<p>// RepositoryFactory.cs
using System;
using System.Collections.Generic;
using System.Configuration;
using Helpers;</p>

<p>namespace Repositories
{</p>

<pre><code>public class RepositoryFactory {
    IDBConnection con;
    public RepositoryFactory(IDBConnection con) {
        this.con = con;
    }
    public RepositoryFactory() : this(new DBConnection()) { }
    public void Insert(string sql) {
        this.con.Execute(sql);
    }
}
</code></pre>

<p>}
```</p>

<p>Tests grow in maintenance difficulty with the size of the function
being tested. Often this leads to a design with many small
one-function classes. This is actually not a bad thing! Rather than
having a single reason to change, these classes have a single reason
to &ldquo;test&rdquo;. Usually, such a design will have several classes in a row
that each only calls the next. This &ldquo;chain&rdquo; of classes together are
cohesive, but instead of being a single class together, they are all
split apart. Such a functional design would normally be fine, except
every function needs a twenty line wrapper of namespaces, imports,
interfaces, and constructors.</p>

<p>Comparatively, in languages like Javascript, Ruby, and Clojure,
replacing a function for testing is easy! Every function does not need
a twenty-line wrapper, instead we simply replace the function we want
to &ldquo;inject&rdquo; with a new function. Here is an example in Javascript:</p>

<p>``` javascript
function Insert(sql) { getConnection().Execute(sql);}
function getConnection() { return new DatabaseConnection(); }</p>

<p>// &ldquo;Mock&rdquo; the getConnection function in a unit test
getConnection = function() { return { Execute: function(sql) {}}};
```</p>

<p>I am now able to test my &ldquo;Insert&rdquo; function without it calling the real
dependencies. My design can take whatever shape best fits the problem,
without constraining itself to &ldquo;what works for testing&rdquo;.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Don't Mock Concrete Classes]]></title>
    <link href="http://steveshogren.github.io/dont-mock-concrete-classes/"/>
    <updated>2011-05-24T00:00:00-04:00</updated>
    <id>http://steveshogren.github.io/dont-mock-concrete-classes</id>
    <content type="html"><![CDATA[<p>(They have thin skin)</p>


<p>I have been
reading <a href="http://www.amazon.com/Growing-Object-Oriented-Software-Guided-Tests/dp/0321503627/ref=sr_1_1?ie=UTF8&amp;s=books&amp;qid=1303935530&amp;sr=8-1"
target="_blank">G.O.O.S.</a> and honestly, much of it has been just a
reiteration. Until chapter 20, that is. I get to the section Don't
Mock Concrete Classes, and it clicks.
</p>


<p>
 Mocking concrete classes used to be my bread and butter. Almost every
 unit test I wrote for the last year had several mocked concrete
 implementations, to pass in as dependencies of the system under test.
</p>


<p>
What do I mean by that? Imagine a class that takes one dependency
through the constructor like this:
</p>


<p>``` php
class Velocity {
  public function __construct (PayoffCalc $PayoffCalc) {</p>

<pre><code>$this-&gt;_PayoffCalc = $PayoffCalc;
</code></pre>

<p>  }
  public function toFloat() {</p>

<pre><code>$paymentPerDay = $this-&gt;_PayoffCalc-&gt;getPaymentPerDay();
return $this-&gt;_calculate($paymentPerDay);
</code></pre>

<p>  }
}
```</p>

<p>
Would have a test driving it, looking like this:
</p>


<p>``` php
public function test_velocity_validDailyPayment() {
  $paymentPerDay = 3;
  $expectedVelocity = 1392;
  //Mock PayoffCalc->getPaymentPerDay() to return 3
  $PayoffCalc = $this->getMock(&lsquo;PayoffCalc&rsquo;, array(&lsquo;getPaymentPerDay&rsquo;));
  $PayoffCalc->expects($this->once())</p>

<pre><code>         -&gt;method('getPaymentPerDay')
         -&gt;will($this-&gt;returnValue($paymentPerDay));
</code></pre>

<p>  $Velocity = new Velocity($PayoffCalc);
  $this->assertEquals($expectedVelocity, $Velocity->toFloat());
}
```
</p></p>

<p>
For several months now, writing unit tests this way has become
increasingly irritating to me, for several reasons. First off, notice
how phpunit does a mock? With a string for the classname and the
method to mock. Obviously, in small scale this duplication is
manageable, but imagine for a second thousands of unit tests all
mocking this way, and you will realize it gets out of hand fast. More
than once in the last year I have set out to refactor a classname or
method signature, to have dozens of failing unit tests, because they
all mock the <em>string</em> of the old name.
</p>


<p>
 Secondly, and more importantly, I find this to be brittle because you
 are locking yourself into an implementation of the class you need
 mocked. What if I wanted to move that getPaymentPerDay to a different
 class? Or I changed that version of getPaymentPerDay to
 getPaymentPerMonth? I would have to traipse through every one of
 those brittle mocks and rewrite their duplicated, crystalline
 structure.
</p>


<p>
 Stupid.
</p>


<p>
My inner frustration was so great as to cause me to start thinking up
all sorts of mad ways to get around this issue. Store the code needed
to build that mock as text on the class itself, to be parsed and
executed on the fly? Check. Create massive hierarchical testing
libraries to build the mocks? Check. And all these did was mask the
real issue. <strong>I was mocking the concrete
implementation.</strong>
</p>


<p>
 So, what would mocking the interface be? Well, PayoffCalc actually
 has two public methods: getPayoffDate() and getPaymentPerDay(). The
 Velocity class only needs getPaymentPerDay(), but by mocking the
 concrete class, we are forcing it to depend on
 the <strong>whole</strong> (undefined) interface of PayoffCalc.
 Velocity does not need getPayoffDate(), but it is in the interface we
 give it (in the form of the concrete PayoffCalc).
</p>


<p>
 Whoa. Sounds
 like <a href="http://en.wikipedia.org/wiki/Interface_segregation_principle"
 target="_blank">ISP</a>. Written about by Bob Martin. Fifteen years
 ago. *Forehead smack*
</p>


<p>
I make an interface for this concept of PaymentPerDayRetriever, for
lack of a
better <a href="http://martinfowler.com/bliki/RoleInterface.html"
target="_blank">Role</a>.
</p>


<p><code>php
interface PaymentPerDayRetriever {
  public function getPaymentPerDay();
}
</code></p>

<p>
Then use the interface in the test:
</p>


<p>``` php
public function test_velocity_validDailyPayment() {</p>

<pre><code>$paymentPerDay = 3;
$expectedVelocity = 1392;
//Mock PayoffCalc-&gt;getPaymentPerDay() to return 3
$PayoffCalc = $this-&gt;getMock('PaymentPerDayRetriever');
$PayoffCalc-&gt;expects($this-&gt;any())
    -&gt;method('getPaymentPerDay')
    -&gt;will($this-&gt;returnValue($paymentPerDay));
   $Velocity = new Velocity($PayoffCalc);
$this-&gt;assertEquals($expectedVelocity, $Velocity-&gt;toFloat());
</code></pre>

<p>}
```</p>

<p>
By mocking the interface, I have freed my Velocity class from knowing
about the rest of the old PayoffCalc interface, and when I realize
later that my PayoffCalc really is doing two totally separate things,
I can just move the PaymentPerDayRetriever interface to
getPaymentPerDay's new home (probably on the PaymentRepository, not
shown here).
</p>


<p>
 While this example only used one method per interface, in reality, it
 would have all the methods necessary to complete that aspect of the
 class.
</p>


<p>
Fascinating.
</p>

]]></content>
  </entry>
  
</feed>
