<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Meta Game | Deliberate Software]]></title>
  <link href="http://steveshogren.github.io/blog/categories/meta-game/atom.xml" rel="self"/>
  <link href="http://steveshogren.github.io/"/>
  <updated>2014-07-26T14:24:56-04:00</updated>
  <id>http://steveshogren.github.io/</id>
  <author>
    <name><![CDATA[Steve Shogren]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[What Book Should I Read Next?]]></title>
    <link href="http://steveshogren.github.io/next-book/"/>
    <updated>2014-07-26T11:46:00-04:00</updated>
    <id>http://steveshogren.github.io/next-book</id>
    <content type="html"><![CDATA[<p>&ldquo;It&rsquo;s my first job, what book should I read first?&rdquo;</p>

<p>Recently, a few developers I am mentoring were curious about what book
to read first. Even mid and senior level developers I&rsquo;ve known
sometimes struggle with this question.</p>

<p>If you want to be truly great, you have to read technical books and
white papers, and you have to learn new programming languages. You
could figure the content out yourself from first principles, but you
will be about 50 years behind those who just read the
books. Additionally, if you stick to a certain language, you are
limiting yourself to only thinking about a problem in a way common to
the language.</p>

<p>Just like with adding new features to a project, you should prioritize
your learning.</p>

<p>I&rsquo;d start by getting into the mindset that you will need roughly a
decade and at least ten thousand high quality hours to become a master
programmer. To be able to get that many high-value hours, you will
need to carefully select your jobs, and constantly be learning new
things that actually make you a better developer.</p>

<h2>Languages</h2>

<pre><code>    "A language that doesn't affect the way you think about programming,
    is not worth knowing." - Alan Perlis
</code></pre>

<p>I agree with <a
href="http://michaelochurch.wordpress.com/2012/07/27/six-languages-to-master/">other developers</a> who assert that a language is <a
href="http://en.wikiquote.org/wiki/Alan_Perlis">not worth learning</a>
unless it teaches you something new and mind-expanding. There are exceptions of course. Maybe you want to switch stacks to get an awesome high-value job. By all means, learn the new stack.</p>

<p>If you want to follow the extremely good <a
href="http://pragprog.com/the-pragmatic-programmer">advice of others</a> and learn one new programming language a year, make each
one count. For example, if you are a Ruby guy, it is safe to say you
will learn nothing of really any mind-expanding value if you try to
learn PHP, Python, JavaScript, or Perl.</p>

<p>Same for the family of Java, C++, C#, or VB.NET. One of those is plenty.</p>

<p>Instead shoot for languages that will really beef up your thought
process. I like the advice given by <a href="http://norvig.com/21-days.html">Peter Norvig</a>:</p>

<pre><code>     "Learn at least a half dozen programming languages. Include one
     language that supports class abstractions (like Java or C++), one that
     supports functional abstraction (like Lisp or ML), one that supports
     syntactic abstraction (like Lisp), one that supports declarative
     specifications (like Prolog or C++ templates), one that supports
     coroutines (like Icon or Scheme), and one that supports parallelism
     (like Sisal)."
</code></pre>

<p>I would add to that my own personal list: a language that forces you
to use monands for controlling side-effects (Haskell), and a language
that allows for dependent types (Idris).</p>

<p>If you are saying, &ldquo;wow, in Python, you have to put a colon at the end
of the function signature line, unlike in Ruby, that blows my mind&rdquo;,
or &ldquo;wow, in Java, the String keyword is uppercase instead of
lowercase!&rdquo; chances are you are getting a very low return for your
investment of time.</p>

<p>What is important about a new language is <em>not</em> a new syntax. A new
syntax is just cruft that gets in the way of the new concepts. A new
concept might be closures. If you have always worked in Java, a
closure will really expand your mind. Or macros. If you have never
seen macros, the concept alone is completely foreign, not just the
syntax. That is where the value is. A good test if you are learning
something new is if you have to research what the concept even means,
without even needing to see the syntax first. For example, when I
started learning monads, I didn&rsquo;t even need to see the syntax for how
Haskell does them, I didn&rsquo;t even understand the concept <em>at all</em>, so I
could read pretty much anything about the concept and get value out of
it. That is the high value content.</p>

<h2>Frameworks</h2>

<p>I would say very few frameworks are going to expand your mind in a way
that is worth the effort to learn them. Some very select frameworks
can cause you to think of a problem in a novel way and thus expand
your mind (off the top of my head: React.js, Core.Async, Akka,
Datomic) but those are very few and far between.</p>

<p>Obviously, in production use, frameworks have their place, and they
can provide an immense boost to your day-to-day productivity and
safety, but very few overall will expand your mind in such a way that
would make you better at the craft. It is not hard to reason why. A
framework can only do what is possible in the language. If the
language is only so powerful, the framework cannot be more powerful
than that. You will be using tools that you could&rsquo;ve written yourself
with your current skill level, but you won&rsquo;t even get the benefit of
writing it yourself. Hopefully, those tools will be safer and save you
a lot of time, but saved time cranking out widgets at work will not
directly cause you to better understand programming.</p>

<h2>Paradigms</h2>

<p>It is fashionable these days to get into functional programming. If
you haven&rsquo;t learned a language that supports a functional paradigm, I
highly recommend that as a good place to start. That being the case,
don&rsquo;t forget to add a logic, a literate, and a declarative programming
language to your list too (you have ten years remember, you&rsquo;ll need a
list). Why not pile on a stack based language too?</p>

<h2>Libraries</h2>

<p>While it is important to be aware of the libraries in your space, I
would say these often provide the least mind-expanding
opportunities. A library, much like a framework, is usually
constrained by the power of the language. In most languages, libraries
are just convenience abstractions at or below the same abstraction
layer as the rest of your code. I would never consider doing my
day-to-day work without the full power of available libraries, but
they are not going to help me think any better about the work.</p>

<h2>&ldquo;Meta&rdquo; books</h2>

<p>A vast number of books exist that attempt to impart something of a
&ldquo;mindset&rdquo; for the developer. Usually, the author is retelling his
experiences, which can be entertaining, but of limited reuse. The best
meta books are those that use actual research and data to try to
explain our industry. Books like Peopleware, Code Complete, and
Pragmatic Programmer are great in this regard. These best books can
cause you to see the creation of software artifacts with a totally
different light: e.g. I remember first reading about using a
programming language to generate automatically the source files for a
given project. At the time for me, it was revolutionary.</p>

<h2>Pattern Books</h2>

<p>I lately have come to think &ldquo;pattern books&rdquo; like Domain Driven Design,
Design Patterns, Patterns of Enterprise Architecture, Refactoring, etc
are just a way to try to replicate missing features in a language of a
lower power. These seem to be written for entirely Java and C#, and are mostly
complex solutions to complex problems created by the lack of power of the language. Apparently, I
am not alone: <a
href="http://www.c2.com/cgi/wiki?AreDesignPatternsMissingLanguageFeatures">Are Design Patterns Missing Language Features?</a></p>

<p>That being said, I think some parts of these books are helpful,
specifically, the ubiquitous language ideas from Domain Driven
Design. If your team has decided on always using the terms from a
certain book, and you are the only person who does not know them, I do
recommend at least skimming it just to ensure smooth communication.</p>

<h2>Suggestions</h2>

<p>I won&rsquo;t suggest too many books or languages, but those I do are very
highly recommended.</p>

<ul>
<li><a href="http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-4.html#%_toc_start">Structure and Interpretation of Computer Programs</a>

<ul>
<li>The best book I&rsquo;ve ever read. No other book I&rsquo;ve read even comes close to beating this for sheer value per minute as this book. Do all the exercies, and you&rsquo;ll be way ahead of the curve.</li>
</ul>
</li>
<li>Code Complete</li>
<li>Clean Code</li>
<li>Pragmatic Programmer</li>
<li>Productive Programming</li>
<li>Peopleware</li>
</ul>


<h2>Wrap up</h2>

<p>It takes courage to step outside your comfort zone and learn something
new. You might be the only person learning something new on your
team. That is ok! Don&rsquo;t worry about &ldquo;converting&rdquo; everyone else to the
path of learning, and do not make fun of them or the only language
they know. (Developers who only know one language take any comment
good or bad about &ldquo;their&rdquo; language as a comment about themselves.) If
you do make fun of them, you will start to resent them. It&rsquo;ll make you
look like an outsider, and they will ignore you and finally push you
out of the team.</p>

<p>When you learn a new thing, be very careful to not run around trying
to use it everywhere. I am very careful to not use any new tool in
production until I&rsquo;ve &ldquo;moved on&rdquo; to learning another tool, so I could
critically consider the best tool for the job without the &ldquo;honeymoon&rdquo;
effect clouding my judgment.</p>

<p>My experience has been: keep getting better, and you will find
yourself in better and better places to work. A person who puts in the
effort to really master the craft is easy to spot and hard to
fake. Most people want to work with those who think like them, and you
cannot think like a master engineer only knowing one tool, so get
started now, and have fun!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Learn to Database]]></title>
    <link href="http://steveshogren.github.io/Learn-To-Database/"/>
    <updated>2014-04-16T00:00:00-04:00</updated>
    <id>http://steveshogren.github.io/Learn-To-Database</id>
    <content type="html"><![CDATA[<p>
  "... and it has to return 45,000 records a minute, or we are all
  screwed."
</p>


<p> <p> Monday morning, we inherited a legacy codebase. Tuesday, the
  word came down on stone tablets. Forty-five thousand records a
  minute, and no amount of political maneuvering or incremental gains
  were going to do. Too many broken promises. The last team mass quit
  over three months, leaving us the two most junior
  developers. Someone high up promised big, and the buck stopped with
  us.
</p> <p> &ldquo;Does anyone even know the throughput now?&rdquo;
</p> <p> We still don&rsquo;t even have the dumb thing running on our
  machines. Two weeks later we have it running and enough data to test
  it. 2500 records a minute. When scaled to 45000 records it is still
  going 30 minutes later, so it doesn&rsquo;t even scale linearly. We are
  screwed.
</p> <p> Most of us are front-end developers who stepped forward when
  everyone else stepped back. Databases are a distant memory,
  something we maybe did a few jobs back. You &ldquo;join&rdquo; tables, right?
  What we know of this process is it selects from 2-3 dozen databases
  using an ORM while running through an engine that does some
  supposedly massive calculations on the data, returning a message with
  several hundred fields. It can&rsquo;t be that hard to speed up.
</p> <p> &ldquo;We need a new architecture, with read-optimized databases
  and queue-based messaging.&rdquo;
</p> <p> None of us have ever built such a system, but we have read
  about it, and like the faithful we nod solemnly in agreement. Why
  not? If the database is read-optimized, surely it will perform like
  we need. But a few desist.
</p> <p> Like paratroopers dropped into unknown territory without a
  map, we start to canvas the code, looking for landmarks. We split
  into two teams, one to try to speed up the current system, the other
  to start on the new architecture. Two teams trying two different
  approaches doubles our chances, right? Whiteboards around our desks
  fill with maps, glossaries, and diagrams. My team starts to dissect
  this mostly home-made ORM.
</p> <p> &ldquo;Why is this selecting from the same table twice?&rdquo;
</p> <p> The ORM generated query selects a list of id&rsquo;s from table A,
  then puts those id&rsquo;s into a list as a filter for the same table:
</p> <p>
  SELECT * FROM A WHERE ID IN (SELECT ID FROM A WHERE &hellip;)
</p> <p> We scratch our heads a bit, but hey, that can&rsquo;t hurt
  anything, surely the database figures that sort of stuff out? Isn&rsquo;t
  that what&hellip; indexes do? Our most database-savvy developer can&rsquo;t
  stop coming back to that query. He says it doesn&rsquo;t smell
  right. Finally, he takes out the &ldquo;WHERE IN&rdquo; filter, shims in the
  query, and runs the process.
</p> <p>
  &ldquo;Guys, the whole thing, all 45k came back in 40 seconds.&rdquo;
</p> <p> We scoff at him, good joke! Our profiling showed time chewed
  up fairly evenly at every level throughout the entire
  process, not just the initial query. So the process came back,
  just empty, right? And who knows what Ancient Ones you disturbed by
  messing around with what the ORM generates, it will probably never
  work again. We run it again, 40 seconds, correct count of
  records. Odd, freak coincidence. We run it with the old filter still
  in place, it comes back 30+ minutes later, same exact data. Whoa,
  wait, what?
</p> <p> Turns out, this ORM uses SELECT-WHERE-IN for every entity
  join. That first SELECT FROM A WHERE ID IN (SELECT ID FROM A WHERE
  &hellip;) was used as the base criteria for every single lazy look-up of
  every entity on A, which were legion. What looked like slowness
  across the entire process was really ORM lazy loading at every
  level, with that first SELECT-WHERE-IN as the final filter in a line
  of nested SELECTS, some four levels deep. That initial bad query
  gets run countless times, and when it is slow, the whole system is
  slow.
</p> <p> This is the story of how I learned an important lesson: if
  you are going to database, LEARN TO DATABASE.
</p></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Challenge - Code Every Day]]></title>
    <link href="http://steveshogren.github.io/streaks/"/>
    <updated>2014-01-28T00:00:00-05:00</updated>
    <id>http://steveshogren.github.io/streaks</id>
    <content type="html"><![CDATA[<p>
  You know what will make you a phenomenally better developer?
  Deliberate practice. How do you get such practice? By doing it every
  single day. Random bursts of effort over the odd weekend will gain
  you practically nothing comparatively, even if the time investment
  is the same. Your mind needs repetition and consistent effort to
  improve. So what do you want to get better at?  Pick your highest
  value subject: vim, regex, functional programming, meta-programming,
  OO, TDD, async co-routines, threading, graphics, web, etc, etc, and
  practice it every single day. Easy as that.
</p>


<p>
  When GitHub first came out with the "streak" feature on the front
  page, I realized it was time to stop my binge coding on the
  occasional weekend and start a system. Inspired by other recent
  system-based successes (working out every day), I decided to code
  every day for a year.
</p>


<p>
  I quickly realized that anything requiring detailed plans and
  designs is harder to do. Working though a book, on the other hand,
  is easy to start and stop. I started working through a book I had
  tried to read before: Let Over Lambda.
</p>


<p>
  Let Over Lambda is intense, filled with deeply complex concepts
  written in Common Lisp, a language with which I was only passingly
  familiar. But I managed to get through it without hardly any
  difficulty. How did I do that?
</p>


<p>
  I got a cheap netbook, and started to code on the train ride home.
  Interestingly, without any internet, I was much less distracted, and
  could just sit down and be in the zone within the minute (this from
  the guy whom it takes 20+ minutes to get in the zone at work). With
  only a limited span of ~25 minutes, I had no time to waste, and
  without people to talk to my brain just falls into it. I can only
  pinpoint a few times I could not get into the zone, and those were
  extreme circumstances of exhaustion or illness.
</p>


<p>
  In ten months, I have:
  <ul>
    <li>
      worked through Let Over Lambda once and read it twice
    </li>
    <li>
      worked twice through the PLAI programming languages book
      (once in Scheme and once in F#)
    </li>
    <li>
      read Clojure Programming, F# 3.0 Programming, and am currently
      in Real World Haskell
    </li>
    <li>
      completed the exercises up to chapter three of SICP
    </li>
    <li>
      authored a small Clojure library for run time type checking
      (don't use mine, use Prismatic's)
    </li>
    <li>
      prepared and given a two hour talk about macros at a local meet-up
    </li>
  </ul>
  Pretty incredible for only ~25 minutes a day! That is more
  programming books than I had read in the previous 2 years. I have
  improved mightily in such a short time, and it does not feel
  stressful in the least. Now, when I get home, if I feel like
  watching movies, cooking, or playing board games/Dark Souls all
  night, no problem! I can relax knowing I have accomplished my goals
  for the day. All in all, the last ten months have been incredible:
  some of the most rewarding, relaxing, and fulfilling months of my
  life.
</p>


<p>
  Before you scoff and point out that not everyone can take the train
  to work, consider this: get a portable computer, load up your
  environment, tools, and some pdfs. The next morning, leave for work
  ~25 minutes early. You will probably get in way sooner due to the
  decreased traffic (now you have earned back that time). Sit quietly
  in your car, and without the distractions of internet or other
  people, knock out a little programming. Maybe start with SICP (the
  best programming book I have ever read). See how much you can read
  and do before work starts. Do that for a month, every day. I
  guarantee you will learn something amazing.
</p>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The 5:01 Developer]]></title>
    <link href="http://steveshogren.github.io/501-developer/"/>
    <updated>2013-12-14T00:00:00-05:00</updated>
    <id>http://steveshogren.github.io/501-developer</id>
    <content type="html"><![CDATA[<p>
  Can we agree for this post that money, energy, time, and effort are
  all forms of power? Like literally, if I wanted to build a building,
  I am going to need tools, skills, materials, labor. I can use the
  most liquid form of power I have (cash) to acquire all these things,
  or I can use a much less liquid form of power (my time) to harvest,
  extract, refine, learn, and build my building myself. Usually,
  economies of scale mean it is dramatically more efficient for me to
  specialize in one way of converting time into liquid power. Then,
  when I need something, I simply pass that money on to someone else
  who is also a specialist.
</p>


<p>
  Now you know why I don't quarry my own stone to build an
  amphitheater in my back yard.
</p>


<p>
  When you work a job, you are converting one form of power you have:
  time (and usually skills), into another much more liquid form of
  power: money. One can extend the model to include calories and
  shelter (the power to sleep safely) along with time and skills.
  Great, this is just basic economics, right? You need power (money)
  to buy power (food and shelter) to buy power (time) to convert back
  into more power (money). Since you are "harvesting" something finite
  and therefore scarce (time out of your short life), if you are
  disciplined and lucky, you can consistently end up with a net
  positive.
</p>


<p>
  On to the point! I read a post today mentioning
  the <a href="http://www.hanselman.com/blog/DarkMatterDevelopersTheUnseen99.aspx">"5:01 developer"</a>. It made me mad.
</p>


<p>
  Ideas like this are so subtle they just seep into your psyche. I
  don't think anyone would say under normal conditions, "I should
  really work for free today". But, effectively, that is what this
  whole phrase is about. The phrase lets people who cram eight hours
  of work into ten hours "get back" at those that get the same work
  done in six to eight. To clarify, this title is not about "saving
  the company" or "giving back to society"; those are unusual
  conditions. No, it is a chastisement of developers who do not "give
  back to the company". Sort of a tax, for the privilege of getting
  paid to work there, you should, according to this ideal, just give
  back some of that power they gave you. Thinking about this with the
  power model, you should accept money to work there in exchange for
  your time, but, when the time comes, you should deliberately
  short-change yourself by giving them extra time. Like some sort of
  weird tip.
</p>


<p>
  Hopefully this sounds as ridiculous as it really is.
</p>


<p>
  Now, in that post, the author sort of backpedals a little bit,
  saying that <i>what he really meant</i> was a developer who stops
  thinking about development as soon as work is over: someone not
  passionate. The issue I have is the whole wording of that phrase
  assumes a passion for their <i>job</i>, not a passion for
  their <i>craft</i>.
</p>


<p>
  I do not think it makes sense to demand every person
  be <i>passionate</i> about the job they are doing. There have been
  many times I have (even at a job I normally loved) done long,
  boring, and fruitless work. I did not do that work out of my passion
  for the "Mission: Save the World of Enterprise Banking", but because
  I am a professional: I do what needs to be done to the best of my
  abilities.
</p>


<p>
  I think professionalism is very important. In others I work with, I
  want to see the attitude that causes someone to stay abreast in
  their field. I want to be around those who keep their own saws
  sharp, who come in and work hard, and who push themselves and those
  around them to be best they can.
</p>


<p>
  Back to overtime: in my experience, very few offices care enough
  about their developers to let them sharpen their saws at work, so
  why would you waste your precious free time there? Will they pay you
  more for it? Doubtful. Will they be less likely to fire you when
  times get tough? <i>Maybe</i>. Sounds to me like a lot of
  speculation. A lot of investment for a marginal or non-existent
  return. If you want more money: either ask for a raise, go take a
  raise at a new job, or work a second job on the side. Those have a
  direct impact on your income. Putting in extra hours hoping someone
  will notice and reward you for it makes about as much sense as
  assuming you will get a raise for wearing the boss's favorite color
  every day.
</p>


<p>
  Consider the person who stays one extra hour a day as an
  "investment". The typical end of the year raise scale I have seen in
  the US in companies larger than 30 people is a 0-5% increase a
  year. Uncommonly does someone get more than that, and should not be
  considered a usual practice. The typical best you can expect is
  5%, maybe a bonus (in four diverse jobs, none gave bonuses, so I
  haven't considered them personally). Back to the extra hour a day. Not
  completely out there, not putting in a vast amount extra, right?
  Well, one extra hour is 12.5% percent more hours a day. But the most
  you can expect, on average, is 5%, if you are lucky! To put it in
  perspective, I have seen guys put in 12 hour days and get fired
  because the boss didn't get along with them.
</p>


<p>
  At a <i>few</i> points in my career, I worked longer hours. Once it
  was because I truly enjoyed the work and it was fun. Another time it
  was because I felt like the extra time was going to directly pay off
  as an investment (it didn't). A few times I have stuck around to
  "wrap this off" or "help out with something deeply unusual that has
  to be done outside normal work hours". I recently recommended to my
  little brother he work longer hours, as he was hired without many
  needed skills and on shaky footing with the boss. He worked out a
  deal where he spent two extra hours a day for a couple months
  reading and practicing to get "caught up". His boss got to see his
  hustle when he was the first one in and last one out every day; he
  got to study away from the distractions of everyday life. <b>In all
  circumstances, make overtime the exception, never the rule.</b>
</p>


<p>
  One last point. Before you think me a selfish jerk about my free
  time, know that I make it a daily habit to spend 30-60 minutes
  outside work advancing my development skills. I practice interactive
  rebases, work through awesome books, do online courses, advance side
  projects, contribute to open source, give local meetup talks, and
  learn new languages. These are the basics of what I feel is
  necessary to sustain and advance myself as a professional. If I
  simply worked a 45-50 hour work week instead, I personally would not
  have the motivation to <i>afterwards</i> stay so abreast of
  important changes in the development world. I would become much less
  effective over time, never getting any better. When the need for new
  paradigms or technologies arose, I would be so stuck in a rut that
  fear and ignorance would drive all my decisions.
</p>


<p>
  Treat overtime like an investment, and make it wisely. You are
  literally mining your life for time, so make sure you are
  comfortable with your investment strategies.
</p>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Sorry, But Refactorings Are Not Free (Technical Debt Interest)]]></title>
    <link href="http://steveshogren.github.io/refactoring-not-free/"/>
    <updated>2013-05-27T00:00:00-04:00</updated>
    <id>http://steveshogren.github.io/refactoring-not-free</id>
    <content type="html"><![CDATA[<p dir="ltr">Sometimes, it’s far more efficient to leave certain <a href="http://en.wikipedia.org/wiki/Technical_debt">technical debts</a> unpaid.</p>


<p dir="ltr">I’m not saying we should leave messes, instead I am saying that cleaning and fixing technical debt is so important we must prioritize the most important changes first, by highest value to the team. You don't just do whatever feature is next alphabetically do you? Nope, so neither should you do that with refactorings.</p>


<p dir="ltr">Not all technical debts are created equal: they consist of varying amounts of interest as well as principal. We still don’t have a way to accurately count the cost of technical debt. Fortunately, a little effort goes a long way toward estimating the its “payoff price”. Much like paying off a real debt, paying the highest-interest debts first makes the most sense.</p>


<p dir="ltr">I’ll give you a real life example of some technical debt repayments. Last month at my work, we all agreed that all our namespaces, project names, and assembly names were woefully out of date. The naming confusion hadn't cost us a lot of time, but, like an annoying paper cut, we felt the pain whenever we looked at it. The system had outgrown the single small product it once was, and the names had not grown with it. A few project names did not even match up with their folders, causing extra disorientation every time anyone read them. We all voted to make updating all that cruft our “dev chore” of the week. Unfortunately, we did not weigh the relative cost versus the value of that cleanup to the team.</p>


<p dir="ltr">Three weeks later, we were still neck-deep in cleanup. The renaming process caused many subtle bugs because of a variety of unconsidered issues. Our work ground to a halt as we put all hands on deck to finish the task and fix all the bugs.</p>


<p dir="ltr">We hadn’t considered the terms on that technical debt. The principal was high: paying it cost weeks of nonstop effort. What about the interest? At best, it was tiny, fractions of a percent of the time it took to pay it off. How long will it take us to make that time back? Five years? Ten?</p>


<p dir="ltr">Now consider another common refactoring: renaming a private function. What does it cost to fix a badly named local function? Practically nothing, just a few keystrokes. What does it cost to leave it undone? You have to look at that bad function definition each time you work in that file. Leaving the technical debt would cost more than paying it down. Why wouldn’t you immediately pay down such a debt?</p>


<p dir="ltr">Clearly, this is not an exact science, but our refactorings will take on a very critical dimension when we add interest to the technical debt metaphor. I now evaluate any refactoring effort that would take longer than a few minutes in this mindset, thinking critically about what I do and why. I keep my big technical debt chores in a list prioritized by interest (regardless of the principal), so there is never any doubt what my next task should be.</p>

]]></content>
  </entry>
  
</feed>
