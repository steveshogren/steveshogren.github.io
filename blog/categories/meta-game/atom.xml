<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: meta game | Deliberate Software]]></title>
  <link href="http://deliberate-software.com/blog/categories/meta-game/atom.xml" rel="self"/>
  <link href="http://deliberate-software.com/"/>
  <updated>2015-10-29T09:05:51-04:00</updated>
  <id>http://deliberate-software.com/</id>
  <author>
    <name><![CDATA[Steve Shogren]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Interview Humiliation]]></title>
    <link href="http://deliberate-software.com/on-defeat/"/>
    <updated>2015-10-29T19:01:00-04:00</updated>
    <id>http://deliberate-software.com/on-defeat</id>
    <content type="html"><![CDATA[<p>One day, I went into an interview, and I was humiliated.</p>

<h3>The Setup</h3>

<p>I used to think very highly of myself. This was early on in the TDD craze, and I
was one of the best I knew at it. I knew interfaces, classes, mocking
frameworks, and best practices. I&rsquo;d been taught all the tricks from some very
smart people, and my confidence was high. Not only that, but I&rsquo;d just finished
at work the restoration of an abandoned legacy codebase to a bug-free, fully
tested state completely on my own.</p>

<p>I&rsquo;d shipped Java, PHP, Perl, C#, and VB.NET, and I hadn&rsquo;t been programming more
than a couple years. My first job, they&rsquo;d made me a team lead over some very
senior developers within a year of my hire date. I was learning Clojure and
Common Lisp, and had just shipped an Android game I made entirely alone
(including the 2D physics engine).</p>

<p>I thought I was incredible. Yet, due to an overwhelming sense of Imposter
Syndrome, I keenly knew that there were things I didn&rsquo;t know. I&rsquo;m mostly self
taught, so a lot of common CS concepts felt alien. I was waking up before work
and teaching myself algorithms, lisps, and math.</p>

<p>At the time, I did not enjoy my job. I felt like my vast talents were wasted,
and I was determined to get what I deserved. My arrogance pushed me to
unhappiness at my job and to tirelessly struggle to be better than everyone else
around me.</p>

<p>Enter Company A.</p>

<p>I flew through the phone screen &ldquo;this is the best phone screen we&rsquo;ve seen!&rdquo; Of
course it is. &ldquo;Your resume is very impressive.&rdquo; Oh, I know!</p>

<p>I get to the on-site interview.</p>

<h3>The On-Site</h3>

<p>I hadn&rsquo;t been thoughtful enough to ask what to wear, so I wore a suit. I was
asked to present a project I&rsquo;d worked on, and I picked my recently shipped
physics game that was up on Google Play. I walked into the reception area a few
minutes early.</p>

<pre><code>"You are 25 minutes late."
</code></pre>

<p>What?! I have the email saying 9:30! No matter, I can salvage this. I walk into
a conference room with a dozen people sitting around a table looking bored and
pissed.</p>

<pre><code>"Let's see your presentation."
</code></pre>

<p>I start to open up my laptop.</p>

<pre><code>"Oh, wow, Linux, what is this, 2003? I'd hoped I'd never have to see the
grub boot screen again! Can't you afford a real machine?"
</code></pre>

<p>They only have the Mac projector cable. No adapter. I&rsquo;d thought ahead, and
handed one of the developers a thumb drive with the presentation and code.
Meanwhile the interviewers are joking and laughing to each other at my choice of
clothes.</p>

<pre><code>"A suit, classic, where are you interviewing after this, a sales job?"
</code></pre>

<p>I start presenting about the 2D physics engine I&rsquo;d written for my game. One of
the most interesting parts to me was how I&rsquo;d first written it without any unit
testing, following just Clean Code practices. I then re-wrote it using heavy
TDD. The design turned out very different both times, which I thought was
interesting to see how TDD had influenced the design.</p>

<p>About five minutes in, I am cut off:</p>

<pre><code>"This presentation is bullshit. You have no evidence, nothing valuable to
show, just spurious subjective opinions. You've put up a straw man and now
are trying to knock it down assuming we are idiots. I've seen enough."
</code></pre>

<p>I remain calm and professional, and start to address the raised concerns. I play
the meta-game, wondering if perhaps this is a test to see how I&rsquo;ll react when
questioned and embarrassed. Even if this wasn&rsquo;t a test, I was determined to be
the most professional in the room and finish with my head held high.</p>

<p>Five developers walk out before I can finish my first sentence. One of the
remaining interviewers asks if I could live code them a web scraper in any
language. I turn my laptop around (still no projector) and ask if PHP is
acceptable. They are a Python shop, and PHP is the closest to what they use that
I am comfortable using when this nervous.</p>

<pre><code>"PHP? Gross. I suppose if it is all you know..."
</code></pre>

<p>Unfortunately, I&rsquo;ve got so much adrenaline in me that it takes me a few tries to
log in. I get on a roll after five minutes, and write the scraper. They throw me
a few more requirements, and within a half hour I&rsquo;ve written stories for and
completed them all. At least two of the interviewers seem quite impressed.
Someone looks at their watch, &ldquo;wow, that&rsquo;s all the stories we have, I guess
let&rsquo;s break for lunch.&rdquo;</p>

<p>Lunch is a 35 minute walk up a hill in humid 93F weather, and I am wearing a
suit and dress shoes. When we get back from lunch I am hot, tired, and
foot-sore. I distinctly remember my feet blistering inside my sweat-soaked
patent leather shoes. I am called into the conference room again. At this point,
I am genuinely curious if this is some sort of extreme patience/calmness test,
or if I am being filmed for a reality show. No such luck.</p>

<p>At the head of the table is the developer who &ldquo;called me out&rdquo; for my
presentation. He looks at me, rolls his eyes, and asks in the most sarcastic
tone I have ever heard:</p>

<pre><code>"So, got any questions for me?"
</code></pre>

<p>I ask a few normal questions, meanwhile he is constantly checking his watch and
rolling his eyes. He answers briefly and rudely. I thank him for his time, and
ask him if there is more. He laughs.</p>

<pre><code>"Oh, we are done here."
</code></pre>

<p>I am shown to the door.</p>

<p>I sit in the car for a half hour, wondering what just happened. I look over to
the passenger seat piled high with text books I have been studying, books on
language design, compilers, algorithms, physics engines, TDD, and productivity.</p>

<p>I was asked none of it.</p>

<h3>Aftermath</h3>

<p>I found out later their recruiter had given me and many other candidates the
wrong time. She was fired shortly after.</p>

<p>I never found out if I had done something to make everyone so angry. I now
suspect that they were massively turned off by a host of things. Polyglot
programming, practicing TDD, the suit, the not Mac, and the late arrival
probably all contributed to an immediate disqualification. I rationally realize
they were terrible and treated me terribly, but the embarrassment is still
there.</p>

<p>A number of times I have woken up in a cold sweat having dreamt about that
interview. In the large scheme of things, a bad interview is such a small thing,
but fear is fear.</p>

<p>Few events in my professional life have shaped me as much as that interview. I
have turned it into a forge for my talent, the anvil on which I beat my pride.
When I don&rsquo;t know something, I am more willing to shrug and laugh it off, all
while learning as fast as I can. When I am humiliated professionally, I know
I&rsquo;ve come through worse and thrived.</p>

<h3>Break The Cycle</h3>

<p>Lastly, this story fills me with an overwhelming desire to never continue the
cycle of abuse. I strive every interview to try to respectfully work with the
candidate, and never humiliate them. I want every person I interview to leave
feeling loved as a human and respected, even if they are completely incapable to
perform the duties of the job.</p>

<p>When I ask a question, if they struggle, we work it out together. When I ask for
code, we write it together, even if that means I have to do all the work. I can
make myself their servant, while still assessing their skill with accuracy and
dispassion. Those with the skill will show it, and those without will not feel
humiliated. I let them interview me, and if that means they want me to go up to
the whiteboard and struggle through a merge sort, so be it. In this way, I push
back against the interview culture that normalizes degradation and humiliation.</p>

<p>If you are interviewing others, take a serious look at your practices. Would a
failed candidate feel humiliated and disrespected? What will they tell their
coworkers and friends at meetups about your company? Will they talk about
feeling respected, and how they hope to get the chance to work with you one day?
Or will they talk of a group of self-righteous jerks who abuse their power to
make others feel small? You can break the cycle.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SimpleMock: Language Agnostic Unit Test Mocking]]></title>
    <link href="http://deliberate-software.com/simplemock-unit-test-mocking/"/>
    <updated>2015-08-13T06:53:00-04:00</updated>
    <id>http://deliberate-software.com/simplemock-unit-test-mocking</id>
    <content type="html"><![CDATA[<p>SimpleMock is a pattern for reducing TDD damage. You can use the pattern to
organize your testing code without mocking or complicated dependency injection.</p>

<p>SimpleMock works in any language with closures that can be passed around by
reference, so off the top of my head: C#, Java, F#, Scala, PHP, C++, Ruby, and
Python. I&rsquo;m sure you can think of others.</p>

<h2>Example:</h2>

<p>Here is a brief (if a bit silly) example of the final pattern:</p>

<pre><code class="csharp">public class LineCounter {
    internal Func&lt;string, IEnumerable&lt;string&gt;&gt; _readLines = File.ReadLines;

    public string CountLines(string filename) {
        return _readLines(filename).Count();
    }
}

/// Test Code
[TestCase]
public void TestLineCounter () {
    var sut = new LineCounter();
    // "SimpleMock" of File.ReadLines
    sut._readLines = (string x) =&gt; new List&lt;string&gt;{"test", "that"};

    var result = sut.CountLines("test");

    Assert.AreEqual(2, result);
}
</code></pre>

<h2>Benefits</h2>

<ul>
<li>Reduced boilerplate</li>
<li>Saves interfaces for real polymorphism</li>
<li>Simplifies test code</li>
<li>Reduces testing concerns in production code</li>
<li>Removes need for fragile IoC containers</li>
<li>Encourages better abstraction design</li>
<li>Can convert one class at a time!</li>
</ul>


<p>The SimpleMock pattern promotes a better design of your abstractions and simpler
tests. The pattern also reduces boilerplate and the pollution of your production
code with testing concerns.</p>

<p>If you aren&rsquo;t familiar with the normal pattern of unit test mocking using
interfaces, dependency injection, and mock libraries, scroll down to &ldquo;The
Non-SimpleMock Way&rdquo; at the end of the post.</p>

<h2>SimpleMock Pattern</h2>

<p>The SimpleMock pattern is aptly named.</p>

<ol>
<li>Replace Test-Only Interfaces With Functions</li>
<li>Define Dependencies Inline</li>
<li>Write Better Abstractions</li>
</ol>


<h2>Step One: Replace Test-Only Interfaces With Functions</h2>

<p>My examples are in C# because that is what I got paid to write today - it is
freshest in memory. C# has an incredible ability to create and pass around
lambdas and function references. Here is an example of using functions instead
of interfaces.</p>

<pre><code class="csharp">public class CurrentTime : ICurrentTime {
    public DateTime GetCurrentTime() {
        return DateTime.Now();
    }
}
public class Translator {
    private Func&lt;DateTime&gt; _getCurrentTime;

    public Translator() : this(new CurrentTime().GetCurrentTime) {}

    public Translator(Func&lt;DateTime&gt; getCurrentTime) {
        this._getCurrentTime = getCurrentTime;
    }

    public string Translate(string input) {
        return string.Format("{0}: {1}", _getCurrentTime().ToString(), input);
    }
}

/// Test Code
[TestCase]
public void TestCurrentTimeTranslator () {
    var now = DateTime.Now;

    var sut = new Translator(() =&gt; now);

    var result = sut.Translate("test");

    Assert.AreEqual(now.ToString() + ": test", result);
}
</code></pre>

<p>The test code is quite simple! No longer do we need the dependency on third
party mocking libraries, or the relatively complicated setup logic. Instead we
can simply inject the lambda at runtime, replacing that pointer. We didn&rsquo;t need
the whole interface, really we just needed the simple signature of the function.</p>

<h2>Step 2: Define Dependencies Inline</h2>

<p>We can take it even a step further. Why use constructor injection at all? Since
all we really want is a single mutable dispatch table row, why not just make it
that way?</p>

<pre><code class="csharp">public class Translator {
    internal Func&lt;DateTime&gt; _getCurrentTime = new CurrentTime().GetCurrentTime;

    public string Translate(string input) {
        return string.Format("{0}: {1}", _getCurrentTime().ToString(), input);
    }
}

/// Test Code
[TestCase]
public void TestCurrentTimeTranslator () {
    var now = DateTime.Now;
    var sut = new Translator();
    sut._getCurrentTime = () =&gt; now;

    var result = sut.Translate("test");

    Assert.AreEqual(now.ToString() + ": test", result);
}
</code></pre>

<p>We&rsquo;ve cleaned up our nasty multi-line indirection into a single dispatch line.
&ldquo;Go to definition&rdquo; now takes me to the actual line with the actual called
function. We&rsquo;ve replaced a dependency on a class based interface with a function
signature. The function signature <em>is</em> the interface!</p>

<p>You probably noticed we have lost something with this final version. We have
lost the ability to inject polymorphic behavior through the constructor. If you
need it, simply go back to injecting the interface in the constructor or by
passing it into the function itself. In practice, I have found this is needed
very rarely, making the SimpleMock pattern a better tool to reach for first.</p>

<h2>Step 3: Write Better Abstractions</h2>

<p>Lastly, SimpleMock actually promotes better designs. For example, a coworker was
writing some tests today and ran into a complicated situation. Take the
following sanitized code:</p>

<pre><code class="csharp">public class WorkDoer {
    internal Action&lt;Thing&gt; ignoreElements = new ThingIgnorer().IgnoreElements;
    internal Action&lt;Thing&gt; removeIgnoredElements = new ThingRemover().RemoveElements;

    public void IgnoreAndRemoveThings(Thing t1, Thing t2) {
        ignoreElements(t1);
        ignoreElements(t2);
        removeIgnoredElements(t1);
        removeIgnoredElements(t2);
    }
}
</code></pre>

<p>How would you check that each section was called? Our naive solution was a
complicated lambda with a &ldquo;timesCalled&rdquo; counter and an if statement to assert
against each argument, but it turns nasty quickly:</p>

<pre><code class="csharp">/// Nasty test code
[TestCase]
public void TestWorkDoer () {
    var sut = new WorkDoer();

    var ignoredCalledTimes = 0;
    sut.ignoreElements = (t) =&gt; {
        ignoredCalledTimes++;
        if (ignoredCalledTimes == 1) {
            Assert.AreEqual(t1, t);
        } else {
            Assert.AreEqual(t2, t);
        }
    };
    var removedCalledTimes = 0;
    sut.removeIgnoredElements = (t) =&gt; {
        removedCalledTimes++;
        if (removedCalledTimes == 1) {
            Assert.AreEqual(t1, t);
        } else {
            Assert.AreEqual(t2, t);
        }
    };

    var t1 = new Thing();
    var t2 = new Thing();

    var result = sut.IgnoreAndRemoveThings(t1, t2);
    Assert.AreEqual(2, removedCalledTimes);
    Assert.AreEqual(2, ignoredCalledTimes);
}
</code></pre>

<p>Yuck! The test is an absolute catastrophe. I see a mess of mixed concerns.
Conditionals?! In a test?! Unconscionable.</p>

<p>In situations like this, we have two easy options. Option one is to just use
a third party mocking library, replacing the functions from inside the test
code. This gives us access to all the sophisticated mocking tools available.</p>

<p>My preferred option is seeking to decomplect the production code by using better
abstractions.</p>

<p>I have found that strong reliance of mocking libraries enables worse designs.
Consider the code, what makes it so hard to test? Not knowing which element is
called when, doing the same work on two parameters, and reference mutation all
make this a poor abstraction. Why not simplify?</p>

<pre><code class="csharp">public class WorkDoer {
    internal Func&lt;Thing, Thing&gt; ignoreElements = new ThingIgnorer().IgnoreElements;
    internal Func&lt;Thing, Thing&gt; removeIgnoredElements = new ThingRemover().RemoveElements;

    public List&lt;Thing&gt; IgnoreAndRemoveThings(List&lt;Thing&gt; ts) {
        return ts.Select(t =&gt; removeIgnoredElements(ignoreElements(t)));
    }
}

/// Simpler test
[TestCase]
public void TestWorkDoer () {
    var sut = new WorkDoer();
    var expected = new Thing();
    var ts = new List&lt;Thing&gt;{new Thing()};

    sut.ignoreElements = (t) =&gt; new Thing();

    sut.removeIgnoredElements = (t) =&gt; {
        Assert.AreEqual(t, sut.ignoreElements(t));
        return expected;
    };

    var result = sut.IgnoreAndRemoveThings(ts);

    Assert.AreEqual(expected, result.First())
}
</code></pre>

<p>Much better! Yes, we had to change a few signatures. We get the same work done,
but now the code is actually a lot more useful. Our test code is comparable with
anything you&rsquo;d find using a mocking library. I am absolutely okay with using a
mocking library when needed, but I always carefully consider my abstractions and
design first.</p>

<p>If mocking libraries and IoC containers are the chainsaws of the testing world,
then SimpleMock is the garden shears. Sometimes the chainsaw is the only tool
for the job, and that is fine. But for most work around the yard, you can leave
the chainsaw in the shed.</p>

<h2>Conclusion</h2>

<p>I’ve shown how you can really simplify your code with SimpleMock. The dispatch
row is clear and easy to read. We have removed some third party mocking
dependencies. You can remove a lot of the boilerplate &ldquo;for making it more
testable&rdquo; from your code. The test code is greatly simplified, and injection a
breeze. The result: much simpler code, just as easy to test.</p>

<p>Thanks to Shuwei Chen for helping me put this together!</p>

<h2>The Non-SimpleMock Way</h2>

<p>If you are familiar with unit test mocking with interfaces, this part is
probably boring. Feel free to skip.</p>

<p>The traditional way of performing C# unit test mocking involves dependency
injection and interface mocking using a mocking library. For dependency
injection, it is common to use a tool like Ninject or hand-rolled constructor
injection. For mocking, a library like Moq or Rhino Mocks is standard. Here is
an example of a class and its testing code without any business logic.</p>

<pre><code class="csharp">public interface ICurrentTime {
    DateTime GetCurrentTime();
}

public class CurrentTime : ICurrentTime {
    public DateTime GetCurrentTime() {
        return DateTime.Now();
    }
}

public class Translator {
    private readonly ICurrentTime ct;

    public Translator() : this(new CurrentTime()) {}

    public Translator(ICurrentTime currentTime) {
        this.ct = currentTime;
    }

    public string Translate(string input) {
        return string.Format("{0}: {1}", ct.GetCurrentTime().ToString(), input);
    }
}

/// Test Code with Moq
[TestCase]
public void TestCurrentTimeTranslator () {
    var rightNow = DateTime.Now;
    var mock = new Mock&lt;ICurrentTime&gt;();

    mock.Setup(a=&gt;a.GetCurrentTime()).Returns(rightNow);

    var sut = new Translator(mock.Object);

    var result = sut.Translate("test");

    Assert.AreEqual(rightNow.ToString() + ": test", result);
}
</code></pre>

<p>If you&rsquo;ve done much C# unit testing, this should look familiar. We want to
inject some code that is potentially long-running or dynamic. We put that code
into a class, add an interface, then inject that interface into the class we
want to test. To test it, we mock the interface, creating a different concrete
class at test runtime which implements that interface. We can setup that mock to
respond with anything, which we use for assertions.</p>

<h2>What&rsquo;s Wrong with the Non-SimpleMock Way?</h2>

<p>The first problem is we have created a whole interface just for testing.
Interfaces are for polymorphism, but we don&rsquo;t really need polymorphism for this
class. We simply want to mock it. The constructor injection is also test code
polluting our business logic.</p>

<p>What we have done is create a very small and primitive dispatch table. The
table has one row: something that has a function with the signature of <code>() -&gt; DateTime</code> or, as it is known in C#: <code>Func&lt;DateTime&gt;</code>.  We will need to make
this primitive dispatch table for every single mock in every single class we
wish to test. That&rsquo;s a lot of boilerplate!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Language Safety Score Mark 2]]></title>
    <link href="http://deliberate-software.com/safety-rank-part-2/"/>
    <updated>2015-07-24T10:13:00-04:00</updated>
    <id>http://deliberate-software.com/safety-rank-part-2</id>
    <content type="html"><![CDATA[<p>I want to make a model that predicts bugs.</p>

<p>I previously wrote a table for scoring language safety:
<a href="http://deliberate-software.com/programming-language-safety-algorithm/">Programming Language Safety Score</a>,
but it was extremely time consuming to score new languages or make modifications.</p>

<h2>Simplify, Simplify</h2>

<p>After being told I was <a href="https://en.wikipedia.org/wiki/Overfitting">overfitting</a>
the data, I&rsquo;ve attempted to clean up by simply checking if each category is
enforced, possible, or impossible. I score each as either 1 (language enforced),
0 (possible, but you have to remember to do it), or -1 (impossible). When the
magnitudes of the new model are compared with the previous model, they come out
very similar. The shape of the curve pretty much stays the same, which I was
told indicates that the character count weighting was a variable that didn&rsquo;t
matter.</p>

<p><img class="center" src="/images/rplot.jpg" title="&lsquo;image&rsquo; &lsquo;images&rsquo;" ></p>

<p>The code I used to generate the plot and normalize the scores can be found here:
<a href="https://github.com/steveshogren/datasciencecoursera/blob/817dec79e36b6e9a6c5a8fd5700aff7cc394b9d4/scoreplot.R">scorePlot.R</a></p>

<h2>Safety Definitions</h2>

<p>A definition of the safety checks is as follows:</p>

<p><div ng-app="TableApp2">
<div ng-controller="TableCtrl">
<table class="langtable">
<tr><th>Check</th> <th>Description</th></tr>
<tr ng-repeat="check in langChecks">
<td> {{ check.name }} </td>
<td>  {{ check.desc }}  </td>
</tr>
</table></p>

<p>The new scores are shown here, with a lot more languages added in:</p>

<p><p class="lead">
<div style="overflow-x:scroll">
<table class="langtable">
<tr>
<th>Safety Check</th>
<th></th>
<th>
<select ng-options="getName(lang) for lang in allLanguages" ng-model="languages[0]"></select>
</th>
<th>
<select ng-options="getName(lang) for lang in allLanguages" ng-model="languages[1]"></select>
</th>
<th>
<select ng-options="getName(lang) for lang in allLanguages" ng-model="languages[2]"></select>
</th>
<th>
<select ng-options="getName(lang) for lang in allLanguages" ng-model="languages[3]"></select>
</th>
</tr>
<tr ng-repeat="check in langChecks" score-row name="check.name" row-key="check.key"></tr>
<tr class="totals"><td>Totals</td>
<td></td>
<td ng-repeat="lang in langTotals track by $index">
 {{ lang }} 
</td>
</tr>
<tr class="totals"><td>Magnitude</td>
<td></td>
<td ng-repeat="lang in langTotals track by $index">
 {{ percentageTotals(lang) }}% 
</td>
</tr>
</table>
</div></p>

<p>Current Languages:
<span ng-repeat="lang in allLanguages">
 {{ getName(lang) }}: {{ allLangTotals[$index] }}, 
</select></p>

<h2>So, What&rsquo;s the Point?</h2>

<p>To see how this model corresponds with data in the real world, I used the GitHub
API to query for the number of bugs created in repositories with more than 15
forks created in a span from 2011 to 2015. Commits were counted by summing the
commit counts of all contributors.</p>

<p>I decided to rely on the count of commits as a standard for a unit of work. My
assumption was that across fifty different projects, the commit sizes would
average out. Once the unit of work was decided on, I wanted to find the ratio of
bugs per commit for each language.</p>

<p>I collected the ratio of bugs logged per commit for each repository, and after
grouping by primary language, removed the top and bottom 25% using the
bug/commit ratio, which is a common practice in statistics to help find a more
accurate average. I summed the bugs and commits of those remaining repositories
grouped by language, finding a total average bug/commit ratio for each language
grouping. Here is that data, sorted by safety score.</p>

<p><table class="langtable">
<tr><th>Language</th>
<th>Bugs</th>
<th>Commits</th>
<th>Repositories</th>
<th>Bug/Commits</th>
<tr ng-repeat="lang in languageRatios">
<td> {{ lang.name }} </td>
<td> {{ lang.bugs }} </td>
<td> {{ lang.commits }} </td>
<td> {{ lang.repos }} </td>
<td> {{ getBugsRatio(lang) }} </td>
</tr>
</table></p>

<p>Here are the languages sorted by safety score with bug/commit ratios:</p>

<p><img class="center" src="/images/errorChart.jpg" title="&lsquo;image&rsquo; &lsquo;images&rsquo;" >
<img class="center" src="/images/bugsAverage.jpg" title="&lsquo;image&rsquo; &lsquo;images&rsquo;" ></p>

<p>I took the magnitude of the safety scores and the bug/commit ratios. After
inverting the safety scores, I overlaid them both onto a single graph.</p>

<p><img class="center" src="/images/bothMags.jpg" title="&lsquo;image&rsquo; &lsquo;images&rsquo;" ></p>

<p>Immediately it is obvious that Ruby, Python, PHP, and Clojure all seem to strongly
buck the trend, but otherwise the languages follow a pretty consistent slope
down in bugs. Taking the correlation gives a
<a href="https://en.wikipedia.org/wiki/Pearson_product-moment_correlation_coefficient">correlation coefficient</a>
of .55</p>

<h2>What About Unit Tests?</h2>

<p>Thinking that Ruby, Clojure, PHP, and Python might not correlate well due to some
other factor, I collected data on how many tests each repository had. I counted
the number of files containing &ldquo;test&rdquo; or &ldquo;spec&rdquo;, which gave the following,
sorted by tests per commit:</p>

<p><table class="langtable">
<tr><th>Language</th>
<th>Tests</th>
<th>Commits</th>
<th>Repositories</th>
<th>Tests/Commits</th></tr>
<tr ng-repeat="lang in sorter(languageRatios)">
<td> {{ lang.name }} </td>
<td> {{ lang.test }} </td>
<td> {{ lang.commits }} </td>
<td> {{ lang.repos }} </td>
<td> {{ getTestsRatio(lang) }} </td>
</tr>
</table></p>

<p>PHP, Python, and Ruby all have a higher then average number of tests, but
Clojure does not. Additionally, Go, Scala, and Java all also have a higher than
average number of tests, yet they score relatively average in bugs/commit.</p>

<h2>Conclusion</h2>

<p>In conclusion, the current safety model I have proposed seems to account for a
moderate reduction in bugs per commit across the sampled languages, but is not
the only factor. It currently is unable to account for a significantly lower
than expected bug count in Ruby and Clojure.</p>

<h2>Special Thanks</h2>

<p>Special thanks to (in alphabetical order):
<a href="https://twitter.com/traffichazard/">Patrick Boe</a> (Haskell, Sniff Test),
<a href="http://asymmetrical-view.com/">Kyle Burton</a> (General Advice),
Nils Creque (Listening Board),
Max Haley (Python, Ruby, Teaching me how to math),
<a href="https://github.com/danielmiladinov">Daniel Miladinov</a> (Java, Scala, Morale Support),
Keith O'Brien (Ruby and JS),
<a href="https://github.com/arlaneenalra">Chris Salch</a> (CoffeeScript and JS),
and <a href="https://github.com/timvisher">Tim Visher</a> (Clojure).</p>

<p>Additional thanks to the posters on
<a href="https://www.reddit.com/r/rust/comments/3egx49/language_safety_score_mark_2/">/r/rust</a>,
including <a href="https://www.reddit.com/user/notriddle">/u/notriddle</a>,
<a href="https://www.reddit.com/user/killercup">/u/killercup</a>, and
<a href="https://www.reddit.com/user/diegobernardes">/u/diegobernardes</a> who put together the Rust score.</p>

<h2>Complaints Department</h2>

<p>Did I mess up something about a language here, or am I missing a safety check? I&rsquo;ll happily take pull
requests for new languages:
<a href="https://github.com/steveshogren/blog-source/blob/master/source/javascripts/sliders2.js">blog source</a>. Just
pick an existing language, edit the name and values, and &ldquo;copy to clipboard&rdquo; to
build your own language data structure. Send it to me in a PR and I&rsquo;ll include
it along with a thanks on the page.</p>

<p><div ng-show="showRealName">
<h2>Select Language:
<select ng-options="lang.name for lang in allLanguages" ng-model="selectedLang"></select>
<button ng-click="copyToClipboard(selectedLang)">Copy Changes to Clipboard</button>
</h2>
<h2><input ng-model="selectedLang.name"></input></h2>
<table class="langtable">
<tr><th>Check</th><th>Option</th></tr>
<tr ng-repeat="check in langChecks">
<td style="background-color: {{scoreClass(score(selectedLang[check.key]))}} ">
 {{ check.name }}:  {{score(selectedLang[check.key]) }} 
</td>
<td>
<select ng-options="enforcedNice(e) for e in enforcedTypes" ng-model="selectedLang[check.key].enforced"></select>
</td>
</tr>
</table></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Learning Lisp Was Hard]]></title>
    <link href="http://deliberate-software.com/learning-lisp-was-hard/"/>
    <updated>2015-06-17T07:02:00-04:00</updated>
    <id>http://deliberate-software.com/learning-lisp-was-hard</id>
    <content type="html"><![CDATA[<p>Several times in the last week people have lamented to me that they &ldquo;just don&rsquo;t
get Lisp&rdquo;. After hearing it for the third time, I thought back to my experience
learning a Lisp.</p>

<p>When I set out to learn a Lisp, I expected it would be easy.</p>

<p>I figured, &ldquo;I am pretty awesome at PHP, and have worked professionally in Perl,
Python, and Java, this should be a cakewalk!&rdquo;. I&rsquo;d read Paul Graham&rsquo;s essays on
how Lisp is his secret weapon, and figured I needed to get into this secret
weapon stuff. My ego said, &ldquo;since Paul is amazing, and I am too, I&rsquo;ll be a
natural!&rdquo;</p>

<p>I expected to tinker around with &ldquo;Lisp&rdquo; (I didn&rsquo;t know there was more
than one) and shortly master it to be able to ship a website with it.</p>

<p>What happened instead took me a little longer&hellip;</p>

<ul>
<li>05/11 - 06/11 - ~15 Hrs Attempted <em>Land Of Lisp</em> (gave up)</li>
<li>04/12 - 08/12 - ~60 Hrs Rewrote a PHP side project in Clojure</li>
<li>08/12 - 08/12 - ~5 Hrs Attempted <em>Let Over Lambda</em> (gave up)</li>
<li>08/12 - 09/12 - ~10 Hrs Read <em>Clojure Programming</em> twice</li>
<li>09/12 - 12/12 - ~30 Hrs Took <em>CS173 Programming Languages</em> online at Brown University</li>
<li>05/13 - 07/13 - ~50 Hrs Worked through <em>Let Over Lambda</em></li>
<li>05/13 - 07/14 - ~250 Hrs Worked through <em>SICP</em></li>
<li>07/14 - Shipped production Clojure code</li>
</ul>


<p>This shows only the major events: books and large projects, but doesn&rsquo;t show all
the countless blogs, tutorials, and tiny projects that also filled in the gaps.</p>

<p>I think Lisps started to &ldquo;click&rdquo; for me around mid 2013, about two years after
deciding that I&rsquo;d &ldquo;tinker around&rdquo; for a bit before &ldquo;mastering&rdquo; it. I was
approximately 170 hours in at that point. The book that finally made it all
click was <em>Let Over Lambda</em>, but it took me two attempts and almost a year of
pre-learning to be able to understand enough to internalize the material.</p>

<p>All said and done, I spent approximately 420 hours between Common Lisp, Racket,
Typed Racket, and Clojure before I felt confident enough to suggest shipping
Clojure at work. I don&rsquo;t claim to be a fast learner at all, and I fully expect
some people will snort with derision at how much time it took me - which is kind
of the point of this post.</p>

<p>This timeline should show those who are struggling that what you are feeling is
normal. Learning anything new is hard. The more &ldquo;new&rdquo; it is, the harder it will
be. Clojure, macros, emacs, and a repl workflow are all very different from
everything I was used to and significantly more powerful than I would&rsquo;ve
guessed. It took a long time for that to become normal, and for that power to
sink in and become a tool I anticipated having.</p>

<p>If you are struggling and feel like a failure, understand <em>there is no wrong
way</em>. It might take you a long time of repeated exposure before the alien
tooling starts to look familiar, and then comfortable. Maybe that book you are
struggling with actually IS too advanced, so find an easier one, and circle back
to the harder book later. Maybe, like me, you need some part of many different
books, tutorials, side projects, and katas.</p>

<p>If you are struggling learning and in the Philly area, I am happy to meet up to
chat. I am also happy to help over the wire as well. I understand how
demoralizing the constant battle is to learn something new, especially when it
feels like your ego is on the line and the whole internet is pressuring you to
learn new things. Don&rsquo;t give up, it&rsquo;s not impossible.</p>

<h1>Was it worth it?</h1>

<p>I can anticipate the follow up question: &ldquo;was it worth it?&rdquo; Absolutely yes. I
now feel a fluid comfort with my current professional stack (C#, F#, Clojure,
and JS) that previously I did not have. I am significantly more productive at
programming, regardless of the language. Work that was previously challenging is
now trivial, and work that was previously &ldquo;impossible&rdquo; now feels fun and
challenging. Was it learning Lisp specifically that caused all those changes?
Probably not, but I believe it was learning something far outside my normal
comfort zone that made the difference. I think I would have had equivalent
experiences had I invested that time learning Scala (the ML parts), Haskell,
Idris, J, R, Forth, etc.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Superiority Fatigue]]></title>
    <link href="http://deliberate-software.com/superiority-fatigue/"/>
    <updated>2015-05-14T19:13:00-04:00</updated>
    <id>http://deliberate-software.com/superiority-fatigue</id>
    <content type="html"><![CDATA[<p>Learning new tools, technologies, and methodologies is
hard. Counter-intuitively, the most exhausting part is <em>after</em> you&rsquo;ve gained a
good comprehension of the tool, and now, filled with excitement, you try to
explain it to someone else.</p>

<p>They almost always react with hostility.</p>

<p>What is going on? You just took time to learn this exciting tool that could save
everyone a lot of time, and not only do they not care, but they resent you for
it!  Don&rsquo;t they see how this could be great for everyone?</p>

<p>The issue, like humans, is complex and dynamic. Maybe they feel like you&rsquo;ve now
made them look lazy in comparison. Maybe they have tried other tools in the past
only to discover they weren&rsquo;t as a good as promised. Maybe they are afraid they
won&rsquo;t be able to learn the new tool as quickly as they need to, and will be left
behind. Maybe they are afraid all the time they spent learning the existing
tools will have been wasted. Maybe they are comfortable where they are, and
don&rsquo;t care about increased productivity. Maybe they are tired of learning new
things.</p>

<p>Most times I have seen this, I think the root emotion is fear. Fear of failure,
of change, of being embarrassed, of looking inferior. Fear is a powerful
emotion.</p>

<p>When you respond with further hostility, this only will compound their
fear. Should they put their comfort and ego before the needs of the business?
No, but your counterattack will only further prove to them that their fear was
deserved.</p>

<p>The final hardest part of learning a new tool is when you are forced to use an
inferior tool. Suddenly that liberating fresh air of power is replaced with a
suffocating claustrophobia of weakness. Even if the tool isn&rsquo;t really that
inferior, it now <em>feels</em> terrible. It becomes worse when you and many others
around you agree with the better value proposition of a new tool, and yet you
are still required to use the inferior tool due to someone in power blocking you
for political reasons.</p>

<p>For the developer who sets out to learn new things, you must learn to deal with
inferior tools. Once you start learning, you will always find yourself in a
situation where you are required to use an inferior tool. For me, this has been
one of the hardest things to face in my career.</p>
]]></content>
  </entry>
  
</feed>
