<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: meta game | Deliberate Software]]></title>
  <link href="http://deliberate-software.com/blog/categories/meta-game/atom.xml" rel="self"/>
  <link href="http://deliberate-software.com/"/>
  <updated>2016-02-19T17:11:44-05:00</updated>
  <id>http://deliberate-software.com/</id>
  <author>
    <name><![CDATA[Steve Shogren]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Pop Culture Architecture]]></title>
    <link href="http://deliberate-software.com/pop-culture-architecture/"/>
    <updated>2016-02-19T06:55:30-05:00</updated>
    <id>http://deliberate-software.com/pop-culture-architecture</id>
    <content type="html"><![CDATA[<blockquote><p>&ldquo;ActiveRecord is so hot right now!&rdquo; - comment in 2006</p></blockquote>

<p>Pop Culture Architecture is the current &ldquo;fad&rdquo; of the day. I have seen it be
microservices, business capabilities, CQRS, service-oriented architecture,
Domain-Driven Design, test driven development, ORMs, ActiveRecord, and MVC. Each
of these have been fashionable at some point.</p>

<p>Fashion is ultimately a signaling mechanism for status. We are attracted to
fashionable architectures because they signal we have worked on elite teams. The
more difficult or costly the trade-offs of the architecture, the more elite and
special our team must have been to implement it successfully.</p>

<h2>Example: Microservices</h2>

<p>Microservices is a current fashionable design. Microservices have very clear
pros and cons. They come with the ability to have a huge team or a fragmented
deployment that potentially allows for horizontal scaling. For that ability, you
will pay the immense costs: loss of strong consistency and transactions, a
labyrinthine operational footprint and deployment, increased communication
effort, expensive integration testing, and a code base that takes longer to
program. <a href="http://martinfowler.com/articles/microservice-trade-offs.html">(1)</a>.</p>

<p>If you have a small team or system that does not need horizontal scaling on
every single component, a microservice architecture is unlikely to solve your
communication or trust issues. You will spend dollars on deployment, consistency
issues, distributed debugging, and basic programming just to save a penny on
communication and teamwork.
<a href="http://www.stackbuilders.com/news/the-hidden-costs-of-microservices">(2)</a></p>

<p>For most teams, the logical conclusion probably will be: a microservice
architecture solves problems we don&rsquo;t have.</p>

<p>Microservices remain fashionable because they indicate work at the size and
scale of a handful of elite companies. You would only likely encounter a couple
hundred companies in the world that have a development staff so large or loads
so high as to truly require such a system. Because of the rarity of actual need,
it is a perfect signaling mechanism for status.</p>

<p>Saying that you implemented a microservice architecture implies &ldquo;my team was so
large or my product so popular, my team could afford to pay almost any cost to
meet the demand.&rdquo;</p>

<p>Carefully consider your architecture decisions. Do not allow fashion to dictate
your choices. Take pride in selecting the appropriate architecture for the
project, no matter how unpopular.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Development Disappointment Disorder]]></title>
    <link href="http://deliberate-software.com/development-disappointment-disorder/"/>
    <updated>2016-02-04T16:58:25-05:00</updated>
    <id>http://deliberate-software.com/development-disappointment-disorder</id>
    <content type="html"><![CDATA[<blockquote><p>&ldquo;We&rsquo;ve never had a successful release&rdquo;</p></blockquote>

<p>You just finished this really hard feature. The whole thing was worse than
anyone realized. Not only that, but the feature wasn&rsquo;t clearly explained, so you
lost time churning on the actual requirements. Despite all the confusion,
iteration, and technical challenges, you managed to get it working! You look
back, savoring how much you have learned and grown.</p>

<p>You show it off to the product owner. He barely seems to hear you. His shoulders
slump in disappointment.</p>

<blockquote><p>&ldquo;Great, but we are still four weeks behind.&rdquo;</p></blockquote>

<p>Your team is infected with <strong>Development Disappointment Disorder</strong>.</p>

<p>It looks different in every team. The manager who sets unreasonable deadlines
then demands overtime. The project manager who gets angry at every little thing.
Developers who feel they need to point fingers to shift the blame. The boss who
is never happy no matter what is achieved. The team that feels they have never
had a successful release.</p>

<h2>Unreasonable Expectations</h2>

<p><strong>Development Disappointment Disorder is caused by unreasonable expectations.</strong>
Someone thinks, hopes, or wishes they can get 100 units of productivity from a
team and codebase that only can sustain 30-40 units. They want the impossible,
and no amount of cajoling, pressuring, yelling, or passive aggressive comments
will change reality.</p>

<p>Productivity is not completely a people problem. Every team has an upper limit
to what they can produce in a system. The human mind has boundaries. Very real
limits exist given the team&rsquo;s size and existing codebases. While new technical
tools and libraries enable more productive teams, these changes often are
hindered by an existing codebase. The team with a multi-million line C# codebase
is not going to get much value from the productivity gains possible with
Haskell&rsquo;s type system.</p>

<p>You cannot rush software development without incurring a drop in quality,
stability, or maintainability. The work is complex and difficult: every expert
in our field agrees with adages like &ldquo;adding developers to a late project makes
it later.&rdquo;</p>

<h2>Suggestions</h2>

<ul>
<li><p><strong>For the technical staff:</strong> How accurate are your estimates? How consistent
is your throughput? Do you regularly under-estimate your features? Do
developers often say, &ldquo;oh, that&rsquo;s only&hellip;&rdquo;? Are some types of features &ldquo;always
late&rdquo;?</p>

<p>You must learn to be blameless in this situation, and that means striving to
give as accurate an estimate as you can with what you have. Throwing estimates
out without much thought only makes things worse. How long did a similar
feature take last time? If you regularly have inaccurate estimates in a
certain area of the system, put extra care into those estimates, working to
provide the best estimate you can.</p></li>
<li><p><strong>For the business:</strong> There is only so many units of productivity that fit
into a given time frame.You need to assess every feature and estimate, and
consider the risk with each.</p>

<p>Acting disappointed, angry, or passive aggressive will not get you more
features, it will only demotivate the technical staff. You will get more
consistency, because they will consistently work slower. You will get more
hours, but each hour will see a
<a href="http://www.igda.org/?page=crunchsixlessons">massive drop in valuable work.</a></p></li>
</ul>


<blockquote><p>Acting disappointed, angry, or passive aggressive will not get you more features</p></blockquote>

<p>  If you are unhappy with the work produced, you need to consider why. Were you
  told it would be sooner? Did you promise that to someone? What changed since
  then? If the feature isn&rsquo;t actually needed, why did you pick it? If spending
  twice as much made it not worthwhile, was it really a good choice?</p>

<p>  What would happen if you didn&rsquo;t promise <em>when</em> the features would be done?
  Either way, your promise doesn&rsquo;t change when it will be done, it just adds
  risk to your credibility. Often the only thing to be gained by giving out
  estimates and time-lines is risk. Unless the customer is truly blocked on your
  estimate, simply communicate what you are doing, not when you hope it will be
  done.</p>

<blockquote><p>Often the only thing to be gained by telling customers an estimate is risk</p></blockquote>

<ul>
<li><strong>For the team:</strong> Celebrate your successes. Abolish the notion of a &ldquo;failed
release&rdquo;. Build up a culture that finds little victories throughout the
release.</li>
</ul>


<p>With these tools you can fight Development Disappointment Disorder. You can
start to celebrate what you do accomplish. <strong>A team that is energized and motivated will accomplish more.</strong> The team that celebrates their work will strive for more.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Designing A Compassionate Interview For A High Performing Individual]]></title>
    <link href="http://deliberate-software.com/compassionate-interviewing/"/>
    <updated>2016-01-11T07:01:58-05:00</updated>
    <id>http://deliberate-software.com/compassionate-interviewing</id>
    <content type="html"><![CDATA[<p><img class="right emailImage" src="/images/2.Why_Algorithm_Important.png" width="400" title="&lsquo;finding&rsquo; &lsquo;finding&rsquo;" ></p>

<p>After my post <a href="http://deliberate-software.com/on-defeat/">Interview Humiliation</a>, a number of
people have asked me how I interview compassionately. I strive to make my interviews as
stress-free and respectful as possible while still rendering a yes/no at the end.</p>

<p>Any good interview process needs to start with goals:</p>

<ul>
<li>Respect the candidate&rsquo;s time</li>
<li>Make the candidate comfortable</li>
<li>Under-skilled candidates should feel no shame</li>
<li>Both passing and failing candidates should want to tell their friends to
apply</li>
<li>We should render the same decision if the interview is repeated multiple
times (with different exercises each time)</li>
<li>The candidate should know the process in advance and not be able to earn a
pass through short term &ldquo;cramming&rdquo;</li>
<li>The candidate should feel we are all working collaboratively, instead of us
against them</li>
</ul>


<h2>The Ideal Candidate</h2>

<p><img class="right emailImage" src="/images/whiteboards2.jpg" width="400" title="&lsquo;whiteboard 'whiteboard&rsquo;" ></p>

<p>We want to hire for high-level skills. Fast learning, strategic thinking, good
design, and emotional intelligence are more important than rote memorization. We
care more about &ldquo;ability to grow&rdquo; than &ldquo;current skills&rdquo;. Our job does not
involve whiteboard coding, puzzle questions, or anything that can be discovered
with a decent IDE, so those are left out.</p>

<p>We care a lot about &ldquo;no jerks&rdquo;. We want our workplace to be fun, relaxing, and
supportive. We want candidates who are comfortable being wrong and corrected
regularly, and who can correct others politely.</p>

<p>We do not care about any question that could be easily be answered by Google. If
an internet search can easily answer the question, it is pointless to care if
the human in front of me happens to know it. Given the search revolution of the
last decade, the value of memorized facts falls to almost zero. Facts as a proxy
for actual job skill probably used to be accurate until the internet allowed
every interview question to become public record.</p>

<h2>Scoring</h2>

<p>I hope someone one day invents a perfect productivity score! For now, counting
bugs, features, correct answers, etc, are all proxies that poorly represent
actual productivity. If those actually worked, why don&rsquo;t we use them for raises,
bonuses, and reviews? Because. They. Do. Not. Work.</p>

<blockquote><p>Counting bugs, features, correct answers, etc, are all proxies that poorly
represent actual productivity</p></blockquote>

<p>A well-designed rubric <em>can</em> work. A rubric is a way of measuring the
&ldquo;un-measurable&rdquo;. You probably have seen them in year-end reviews. A grid with
categories on one side, and a 1-5 score with a paragraph explanation for each.
We only score what has to be explained with a description from the interviewers.</p>

<blockquote><p>&ldquo;How was the candidate&rsquo;s communication skills?&rdquo;</p>

<p>&ldquo;They misunderstood me only a few times, and I only had trouble understanding
them once or twice. The watchers all felt like the communication was pretty
good. They were definitely above average: &frac34;.&rdquo;</p>

<p>&ldquo;How about design skills?&rdquo;</p>

<p>&ldquo;They were able to clearly design every abstraction. They deeply understood
passing functions as values, see how this takes a function for polymorphism?
We prodded a bit, and they were able to give a couple other ways to achieve
the same behavior. We all agreed it was best the way it was. All said, they
did most of the heavy lifting for this whole project, and it is superbly
designed: 4/4&rdquo;</p></blockquote>

<h2>Our Process</h2>

<p>To &ldquo;level-set&rdquo; our expectations, we had several of our developers at different
levels perform the interview live in front of the team. We made them use various
languages and exercises they had never seen before. This &ldquo;level-setting&rdquo; helped
us to see how known good developers perform when way out of their element and
uncomfortable.</p>

<p>All interviews are assigned to developers randomly, and all are expected to
participate. The candidate should have two developers around at all time, to
prevent bias by any individual. One pairs while the others rotate watching
silently. The watchers are expected to stay quiet, to prevent confusion.</p>

<p>Before the first interview, the candidate is sent something very much like this
document. We think there is no way someone could &ldquo;fake us out&rdquo; on any criteria.
The things we look for take years of practice to cultivate, so &ldquo;cramming&rdquo; should
not help much (if at all). The one exception to that is if they have never heard
of Test Driven Development, we do recommend they Google it for a few minutes, as
prior knowledge helps smooth the phone screen considerably.</p>

<h3>Phone Screen</h3>

<p>We pair program over the internet using a shared programming environment called
<a href="c9.io">Cloud9</a>. We (currently) have projects set up for Java, JavaScript,
Python, Ruby, and C#. The candidate may choose their desired language. We then
pair program using Test Driven Development to build out a well defined exercise.
The candidate may entirely verbally &ldquo;navigate&rdquo;, while one of our programmers
entirely &ldquo;drives&rdquo; and types out the code. This is acceptable.</p>

<p>If the candidate has never seen any of those languages, Google or asking the
interviewer is totally fair game, and does not count against them. If the
candidate has completely no idea, the interviewer is expected to politely
complete the task while keeping the candidate engaged.</p>

<p>The phone screen is under an hour, with 30 minutes for the pair programming.
The remaining time is for questions about our office. We let them drive the
second half of the interview, asking us questions about what our team and
process is like. We attempt to answer clearly and honestly, both good and bad.</p>

<h3>In-Person</h3>

<p>The in-person interview is from 9:30 to 3:00. We are not thrilled with how much
time it takes and would like to shorten it, but so far have no superior
alternatives.</p>

<p>At the start of the day, we spend 30 minutes chatting and asking questions back
and forth. Our questions are meant to tell us about the candidate&rsquo;s background
and &ldquo;programming philosophy&rdquo;: books read, favorite languages, interesting
projects they&rsquo;ve worked on, etc. We allow them as many questions as they would
like.</p>

<p>The rest of the day is very much like a &ldquo;typical day at work&rdquo;, but with
programming exercises instead of production code. We pair program on the
exercises, following the same flow from the phone screen. The exercises have no
&ldquo;tricks&rdquo;, they are reasonably straightforward and don&rsquo;t require any prior domain
or CS theory knowledge. Throughout the day, the candidate is free to get food,
drinks, and run to the restroom.</p>

<p>The developer who is pairing has a primary role of making the candidate feel
comfortable and accomplish any effort with a 50/50 split of effort. If the
candidate really is struggling, the developer is expected to keep working with
the candidate, even to the point of doing the hard parts and giving them the
easy parts. A completely unskilled candidate will see their pair doing all the
work with a smile and politely asking for &ldquo;help&rdquo; with variable names and such.</p>

<p>The developer pair is also expected to give the candidate some time to think
if they are lost. The candidate at the end of the interview should feel like
they have a complete understanding of what happened. The exercises are
designed to be &ldquo;too much to finish&rdquo;, and as such finishing the exercises is
not a success criteria as much as working well together and writing
maintainable code.</p>

<p>We feel this gives us a highly accurate understanding of a candidate&rsquo;s skill,
while still putting them at ease. Many times we&rsquo;ve seen a terrified candidate
light up fifteen minutes into a pairing session while watching their developer
pair do most of the work. Something about seeing code written &ldquo;activates&rdquo; even
the most nervous candidate. All the thoughts of nerves turn into a concrete
&ldquo;oh, wait, I know what he just did, and I&rsquo;ve got an opinion on that!&rdquo;</p>

<h2>Conclusion</h2>

<p>We like this process because it is exactly what our job is like. We pair program
for a lot of work, and the interview is meant to give candidates a sample of
that. No one should show up for their first day of work and say, &ldquo;wait, I
actually hate pair programming.&rdquo; By thinking through our goals and an &ldquo;ideal
candidate&rdquo;, we were able to design a process that meets those goals.</p>

<p>I recommend you take an hour to write out your goals and needs. Then see how
your interview process matches. Are you looking for a &ldquo;human Google&rdquo;? Does your
job involve whiteboard coding? Would telling the candidate the exact process in
advance with all the questions let them game the system? Because every single
interview question I&rsquo;ve seen is up on Google to be found and memorized on easy
to read lists. How much time does your process take? Could it be shortened? Does
it require the candidate to spend a lot of time at home? You might be surprised
at what you find!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How Daily Meditation Improved My Technical Leadership]]></title>
    <link href="http://deliberate-software.com/daily-meditation-greatly-improved-my-technical-leadership/"/>
    <updated>2015-12-14T07:50:38-05:00</updated>
    <id>http://deliberate-software.com/daily-meditation-greatly-improved-my-technical-leadership</id>
    <content type="html"><![CDATA[<p><img class="right emailImage" src="/images/meditation.jpg" width="200" title="&lsquo;meditation&rsquo; &lsquo;meditation&rsquo;" ></p>

<p>A couple years ago, a coworker told me a success story about mindful meditation.
He explained how his wife took a class that required an hour of daily meditation
for a whole month. He reported that she found it uncomfortable, but the effects
were astounding. She claimed to feel more relaxed, more focused, and more
&ldquo;herself&rdquo;. She found new reserves of motivation. She dropped the book she&rsquo;d been
trying to write for years, and started a business. After that business failed,
she started another, this time successfully.</p>

<p>Immediately convinced, I started by listening to guided
<a href="https://en.wikipedia.org/wiki/Mindfulness#Mindfulness_meditation">mindfulness meditations</a>
on YouTube and <a href="https://www.headspace.com/science">phone apps</a>. After a couple
weeks of that, I started doing breathing exercises on my own while sitting
listening to rain sounds. I made a habit of doing it for about an hour every day
on my lunch break. A few months later, I hated it.</p>

<p>For whatever reason, after each session I would feel very uncomfortable. I would
be confronted with emotions that made me feel worthless and embarrassed. My mind
was bringing forward all these painful memories and feelings. Over time, I
started to dread the lunch break.</p>

<h2>The Revelation</h2>

<p>Then, one day, I had a profound sense of understanding. I realized what was
causing these negative emotions. I was in the middle of a major push to guide
our team to adopt a new programming language. While I&rsquo;d led many such
initiatives before, I saw that I&rsquo;d always had the same struggles. My ego and
self-worth were so tied into &ldquo;my&rdquo; campaigns that I wasn&rsquo;t able to clearly hear
criticism. When people pointed out legitimate concerns or weaknesses, I would
get embarrassed and take it as a personal failure.</p>

<p>I could see, from the very beginning, my current &ldquo;campaign&rdquo; had been poorly
executed. After researching the new technology for a long time, I felt like I
saw a place where it could solve some of our needs. Instead of carefully writing
out a proposal, I &ldquo;half-jokingly&rdquo; brought it up whenever I could. When the
listeners didn&rsquo;t immediately react positively, I quickly retracted the idea,
&ldquo;just kidding&rdquo;. Over weeks I dropped not-so-subtle hints, &ldquo;this would be better
with&hellip;&rdquo;, or, &ldquo;we wouldn&rsquo;t have this problem if&hellip;&rdquo;. Instead of convincing
anyone of anything, I just broadcasted to everyone how insecure I felt about the
issue. Everyone could clearly see that I cared, but I was too afraid to put
myself out there and make a serious suggestion. For months nothing changed, and
I felt more and more bitter that &ldquo;my idea&rdquo; wasn&rsquo;t being listened to. In reality,
I hadn&rsquo;t even made a serious suggestion yet!</p>

<p>Eventually, the people around me started to listen and research the new
language. They agreed it really did solve a need we had. After a while, enough
people got on board that we started using it more. Even then, I held tightly to
&ldquo;my idea&rdquo;, afraid that it would prove to be a failure. When someone ran into
issues, I would get defensive. Even though I tried to keep my emotions in check,
I clearly took any criticism of the language as if it was a personal failing, no
matter how legitimate. I&rsquo;d tightly coupled my ego to my ideas, and I always had.</p>

<p>After a few months of meditating, this idea rocked my world. My negative
emotions came from a realization that my actions were not in line with my
values. I don&rsquo;t want my self-worth to be tied to a simple tool. No tool is worth
it. Every tool fails. I&rsquo;d sold myself short, lowered my self-worth to that of a
tool. This completely blocked my ability to be an effective technical leader.</p>

<p>I couldn&rsquo;t hear criticism of my ideas without getting defensive, so I couldn&rsquo;t
think critically. I couldn&rsquo;t help work out solutions to the best of my ability,
because that would mean admitting personal failure. Every side comment or
momentary struggle felt like a catastrophe.</p>

<p>After realizing this, I felt a wave of relief. My emotional struggle leading
this programming language change made sense! And I had an easy way out! I simply
had to distance myself from my ideas, separate my self-worth from my tools. The
more I meditated, the easier it got.</p>

<h2>Present Day</h2>

<p>While I still sometimes get the old pang of embarrassment or defensiveness, now
I understand where it comes from, and how to move forward. I can let my ideas
go. I can consider ideas critically. I can make changes and adjustments if the
ideas are not working.</p>

<p>This summer I decided to write up my learning. I wanted to always be able to
look back and remember these important lessons. My write-up was the seed for the
book <a href="https://leanpub.com/convincingcoworkers">Convincing Coworkers</a>. I explain
the lessons learned from implementing a half dozen major technical changes, and
how I learned to lead without letting my ego cloud my thinking.</p>

<p>If you want to become a more effective leader, I highly recommend a practice of
daily meditation. Meditation gives your mind a chance to deeply consider your
actions and values. It allows your subconscious to reflect on what and why you
act.</p>

<p>Not everyone will struggle from the same issues as me. Every leader has a
different set of challenges and situations. Meditation lets your mind analyze
your unique weaknesses and strengths, coming up with a tailored perspective.
Meditating allows your mind to creatively look for ways to improve itself. While
rarely comfortable, this process can have incredible benefits.</p>

<h2>Appendix: &ldquo;I&rsquo;m uncomfortable with the connotations of meditation&rdquo;</h2>

<p>You may feel uncomfortable with meditation because of its current strong
associations with religion. Meditation is not inherently religious. I consider
meditation like an exercise routine for the mind. If you are religious, and
exercise your body as a form of religious expression, exercise is a religious
practice. If you are not religious, and you exercise to improve your health and
well-being, exercise is a secular practice. Meditation is just a form of mental
exercise. Simple as that.</p>

<p>Meditation is a tool, and the tool wielder determines its use. Don&rsquo;t let a fear
of the connotations of meditation stop you from experiencing improved
leadership, creativity, and focus!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Conj 2015 - Teaching Clojure]]></title>
    <link href="http://deliberate-software.com/teaching-clojure/"/>
    <updated>2015-11-18T11:19:10-05:00</updated>
    <id>http://deliberate-software.com/teaching-clojure</id>
    <content type="html"><![CDATA[<p>My talk at Conj 2015, enjoy!
<a href="https://www.youtube.com/watch?v=BsLiPt90HDo">Teaching Clojure</a></p>
]]></content>
  </entry>
  
</feed>
