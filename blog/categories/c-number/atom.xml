<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: c# | Deliberate Software]]></title>
  <link href="http://deliberate-software.com/blog/categories/c-number/atom.xml" rel="self"/>
  <link href="http://deliberate-software.com/"/>
  <updated>2016-02-19T17:11:44-05:00</updated>
  <id>http://deliberate-software.com/</id>
  <author>
    <name><![CDATA[Steve Shogren]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[SimpleMock: Language Agnostic Unit Test Mocking]]></title>
    <link href="http://deliberate-software.com/simplemock-unit-test-mocking/"/>
    <updated>2015-08-13T06:53:00-04:00</updated>
    <id>http://deliberate-software.com/simplemock-unit-test-mocking</id>
    <content type="html"><![CDATA[<p>SimpleMock is a pattern for reducing TDD damage. You can use the pattern to
organize your testing code without mocking or complicated dependency injection.</p>

<p>SimpleMock works in any language with closures that can be passed around by
reference, so off the top of my head: C#, Java, F#, Scala, PHP, C++, Ruby, and
Python. I&rsquo;m sure you can think of others.</p>

<h2>Example:</h2>

<p>Here is a brief (if a bit silly) example of the final pattern:</p>

<pre><code class="csharp">public class LineCounter {
    internal Func&lt;string, IEnumerable&lt;string&gt;&gt; _readLines = File.ReadLines;

    public string CountLines(string filename) {
        return _readLines(filename).Count();
    }
}

/// Test Code
[TestCase]
public void TestLineCounter () {
    var sut = new LineCounter();
    // "SimpleMock" of File.ReadLines
    sut._readLines = (string x) =&gt; new List&lt;string&gt;{"test", "that"};

    var result = sut.CountLines("test");

    Assert.AreEqual(2, result);
}
</code></pre>

<h2>Benefits</h2>

<ul>
<li>Reduced boilerplate</li>
<li>Saves interfaces for real polymorphism</li>
<li>Simplifies test code</li>
<li>Reduces testing concerns in production code</li>
<li>Removes need for fragile IoC containers</li>
<li>Encourages better abstraction design</li>
<li>Can convert one class at a time!</li>
</ul>


<p>The SimpleMock pattern promotes a better design of your abstractions and simpler
tests. The pattern also reduces boilerplate and the pollution of your production
code with testing concerns.</p>

<p>If you aren&rsquo;t familiar with the normal pattern of unit test mocking using
interfaces, dependency injection, and mock libraries, scroll down to &ldquo;The
Non-SimpleMock Way&rdquo; at the end of the post.</p>

<h2>SimpleMock Pattern</h2>

<p>The SimpleMock pattern is aptly named.</p>

<ol>
<li>Replace Test-Only Interfaces With Functions</li>
<li>Define Dependencies Inline</li>
<li>Write Better Abstractions</li>
</ol>


<h2>Step One: Replace Test-Only Interfaces With Functions</h2>

<p>My examples are in C# because that is what I got paid to write today - it is
freshest in memory. C# has an incredible ability to create and pass around
lambdas and function references. Here is an example of using functions instead
of interfaces.</p>

<pre><code class="csharp">public class CurrentTime : ICurrentTime {
    public DateTime GetCurrentTime() {
        return DateTime.Now();
    }
}
public class Translator {
    private Func&lt;DateTime&gt; _getCurrentTime;

    public Translator() : this(new CurrentTime().GetCurrentTime) {}

    public Translator(Func&lt;DateTime&gt; getCurrentTime) {
        this._getCurrentTime = getCurrentTime;
    }

    public string Translate(string input) {
        return string.Format("{0}: {1}", _getCurrentTime().ToString(), input);
    }
}

/// Test Code
[TestCase]
public void TestCurrentTimeTranslator () {
    var now = DateTime.Now;

    var sut = new Translator(() =&gt; now);

    var result = sut.Translate("test");

    Assert.AreEqual(now.ToString() + ": test", result);
}
</code></pre>

<p>The test code is quite simple! No longer do we need the dependency on third
party mocking libraries, or the relatively complicated setup logic. Instead we
can simply inject the lambda at runtime, replacing that pointer. We didn&rsquo;t need
the whole interface, really we just needed the simple signature of the function.</p>

<h2>Step 2: Define Dependencies Inline</h2>

<p>We can take it even a step further. Why use constructor injection at all? Since
all we really want is a single mutable dispatch table row, why not just make it
that way?</p>

<pre><code class="csharp">public class Translator {
    internal Func&lt;DateTime&gt; _getCurrentTime = new CurrentTime().GetCurrentTime;

    public string Translate(string input) {
        return string.Format("{0}: {1}", _getCurrentTime().ToString(), input);
    }
}

/// Test Code
[TestCase]
public void TestCurrentTimeTranslator () {
    var now = DateTime.Now;
    var sut = new Translator();
    sut._getCurrentTime = () =&gt; now;

    var result = sut.Translate("test");

    Assert.AreEqual(now.ToString() + ": test", result);
}
</code></pre>

<p>We&rsquo;ve cleaned up our nasty multi-line indirection into a single dispatch line.
&ldquo;Go to definition&rdquo; now takes me to the actual line with the actual called
function. We&rsquo;ve replaced a dependency on a class based interface with a function
signature. The function signature <em>is</em> the interface!</p>

<p>You probably noticed we have lost something with this final version. We have
lost the ability to inject polymorphic behavior through the constructor. If you
need it, simply go back to injecting the interface in the constructor or by
passing it into the function itself. In practice, I have found this is needed
very rarely, making the SimpleMock pattern a better tool to reach for first.</p>

<h2>Step 3: Write Better Abstractions</h2>

<p>Lastly, SimpleMock actually promotes better designs. For example, a coworker was
writing some tests today and ran into a complicated situation. Take the
following sanitized code:</p>

<pre><code class="csharp">public class WorkDoer {
    internal Action&lt;Thing&gt; ignoreElements = new ThingIgnorer().IgnoreElements;
    internal Action&lt;Thing&gt; removeIgnoredElements = new ThingRemover().RemoveElements;

    public void IgnoreAndRemoveThings(Thing t1, Thing t2) {
        ignoreElements(t1);
        ignoreElements(t2);
        removeIgnoredElements(t1);
        removeIgnoredElements(t2);
    }
}
</code></pre>

<p>How would you check that each section was called? Our naive solution was a
complicated lambda with a &ldquo;timesCalled&rdquo; counter and an if statement to assert
against each argument, but it turns nasty quickly:</p>

<pre><code class="csharp">/// Nasty test code
[TestCase]
public void TestWorkDoer () {
    var sut = new WorkDoer();

    var ignoredCalledTimes = 0;
    sut.ignoreElements = (t) =&gt; {
        ignoredCalledTimes++;
        if (ignoredCalledTimes == 1) {
            Assert.AreEqual(t1, t);
        } else {
            Assert.AreEqual(t2, t);
        }
    };
    var removedCalledTimes = 0;
    sut.removeIgnoredElements = (t) =&gt; {
        removedCalledTimes++;
        if (removedCalledTimes == 1) {
            Assert.AreEqual(t1, t);
        } else {
            Assert.AreEqual(t2, t);
        }
    };

    var t1 = new Thing();
    var t2 = new Thing();

    var result = sut.IgnoreAndRemoveThings(t1, t2);
    Assert.AreEqual(2, removedCalledTimes);
    Assert.AreEqual(2, ignoredCalledTimes);
}
</code></pre>

<p>Yuck! The test is an absolute catastrophe. I see a mess of mixed concerns.
Conditionals?! In a test?! Unconscionable.</p>

<p>In situations like this, we have two easy options. Option one is to just use
a third party mocking library, replacing the functions from inside the test
code. This gives us access to all the sophisticated mocking tools available.</p>

<p>My preferred option is seeking to decomplect the production code by using better
abstractions.</p>

<p>I have found that strong reliance of mocking libraries enables worse designs.
Consider the code, what makes it so hard to test? Not knowing which element is
called when, doing the same work on two parameters, and reference mutation all
make this a poor abstraction. Why not simplify?</p>

<pre><code class="csharp">public class WorkDoer {
    internal Func&lt;Thing, Thing&gt; ignoreElements = new ThingIgnorer().IgnoreElements;
    internal Func&lt;Thing, Thing&gt; removeIgnoredElements = new ThingRemover().RemoveElements;

    public List&lt;Thing&gt; IgnoreAndRemoveThings(List&lt;Thing&gt; ts) {
        return ts.Select(t =&gt; removeIgnoredElements(ignoreElements(t)));
    }
}

/// Simpler test
[TestCase]
public void TestWorkDoer () {
    var sut = new WorkDoer();
    var expected = new Thing();
    var ts = new List&lt;Thing&gt;{new Thing()};

    sut.ignoreElements = (t) =&gt; new Thing();

    sut.removeIgnoredElements = (t) =&gt; {
        Assert.AreEqual(t, sut.ignoreElements(t));
        return expected;
    };

    var result = sut.IgnoreAndRemoveThings(ts);

    Assert.AreEqual(expected, result.First())
}
</code></pre>

<p>Much better! Yes, we had to change a few signatures. We get the same work done,
but now the code is actually a lot more useful. Our test code is comparable with
anything you&rsquo;d find using a mocking library. I am absolutely okay with using a
mocking library when needed, but I always carefully consider my abstractions and
design first.</p>

<p>If mocking libraries and IoC containers are the chainsaws of the testing world,
then SimpleMock is the garden shears. Sometimes the chainsaw is the only tool
for the job, and that is fine. But for most work around the yard, you can leave
the chainsaw in the shed.</p>

<h2>Conclusion</h2>

<p>Iâ€™ve shown how you can really simplify your code with SimpleMock. The dispatch
row is clear and easy to read. We have removed some third party mocking
dependencies. You can remove a lot of the boilerplate &ldquo;for making it more
testable&rdquo; from your code. The test code is greatly simplified, and injection a
breeze. The result: much simpler code, just as easy to test.</p>

<p>Thanks to Shuwei Chen for helping me put this together!</p>

<h2>The Non-SimpleMock Way</h2>

<p>If you are familiar with unit test mocking with interfaces, this part is
probably boring. Feel free to skip.</p>

<p>The traditional way of performing C# unit test mocking involves dependency
injection and interface mocking using a mocking library. For dependency
injection, it is common to use a tool like Ninject or hand-rolled constructor
injection. For mocking, a library like Moq or Rhino Mocks is standard. Here is
an example of a class and its testing code without any business logic.</p>

<pre><code class="csharp">public interface ICurrentTime {
    DateTime GetCurrentTime();
}

public class CurrentTime : ICurrentTime {
    public DateTime GetCurrentTime() {
        return DateTime.Now();
    }
}

public class Translator {
    private readonly ICurrentTime ct;

    public Translator() : this(new CurrentTime()) {}

    public Translator(ICurrentTime currentTime) {
        this.ct = currentTime;
    }

    public string Translate(string input) {
        return string.Format("{0}: {1}", ct.GetCurrentTime().ToString(), input);
    }
}

/// Test Code with Moq
[TestCase]
public void TestCurrentTimeTranslator () {
    var rightNow = DateTime.Now;
    var mock = new Mock&lt;ICurrentTime&gt;();

    mock.Setup(a=&gt;a.GetCurrentTime()).Returns(rightNow);

    var sut = new Translator(mock.Object);

    var result = sut.Translate("test");

    Assert.AreEqual(rightNow.ToString() + ": test", result);
}
</code></pre>

<p>If you&rsquo;ve done much C# unit testing, this should look familiar. We want to
inject some code that is potentially long-running or dynamic. We put that code
into a class, add an interface, then inject that interface into the class we
want to test. To test it, we mock the interface, creating a different concrete
class at test runtime which implements that interface. We can setup that mock to
respond with anything, which we use for assertions.</p>

<h2>What&rsquo;s Wrong with the Non-SimpleMock Way?</h2>

<p>The first problem is we have created a whole interface just for testing.
Interfaces are for polymorphism, but we don&rsquo;t really need polymorphism for this
class. We simply want to mock it. The constructor injection is also test code
polluting our business logic.</p>

<p>What we have done is create a very small and primitive dispatch table. The
table has one row: something that has a function with the signature of <code>() -&gt; DateTime</code> or, as it is known in C#: <code>Func&lt;DateTime&gt;</code>.  We will need to make
this primitive dispatch table for every single mock in every single class we
wish to test. That&rsquo;s a lot of boilerplate!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Language Safety Score Mark 2]]></title>
    <link href="http://deliberate-software.com/safety-rank-part-2/"/>
    <updated>2015-07-24T10:13:00-04:00</updated>
    <id>http://deliberate-software.com/safety-rank-part-2</id>
    <content type="html"><![CDATA[<p>I want to make a model that predicts bugs.</p>

<p>I previously wrote a table for scoring language safety:
<a href="http://deliberate-software.com/programming-language-safety-algorithm/">Programming Language Safety Score</a>,
but it was extremely time consuming to score new languages or make modifications.</p>

<h2>Simplify, Simplify</h2>

<p>After being told I was <a href="https://en.wikipedia.org/wiki/Overfitting">overfitting</a>
the data, I&rsquo;ve attempted to clean up by simply checking if each category is
enforced, possible, or impossible. I score each as either 1 (language enforced),
0 (possible, but you have to remember to do it), or -1 (impossible). When the
magnitudes of the new model are compared with the previous model, they come out
very similar. The shape of the curve pretty much stays the same, which I was
told indicates that the character count weighting was a variable that didn&rsquo;t
matter.</p>

<p><img class="center" src="/images/rplot.jpg" title="&lsquo;image&rsquo; &lsquo;images&rsquo;" ></p>

<p>The code I used to generate the plot and normalize the scores can be found here:
<a href="https://github.com/steveshogren/datasciencecoursera/blob/817dec79e36b6e9a6c5a8fd5700aff7cc394b9d4/scoreplot.R">scorePlot.R</a></p>

<h2>Safety Definitions</h2>

<p>A definition of the safety checks is as follows:</p>

<p><div ng-app="TableApp2">
<div ng-controller="TableCtrl">
<table class="langtable">
<tr><th>Check</th> <th>Description</th></tr>
<tr ng-repeat="check in langChecks">
<td> {{ check.name }} </td>
<td>  {{ check.desc }}  </td>
</tr>
</table></p>

<p>The new scores are shown here, with a lot more languages added in:</p>

<p><p class="lead">
<div style="overflow-x:scroll">
<table class="langtable">
<tr>
<th>Safety Check</th>
<th></th>
<th>
<select ng-options="getName(lang) for lang in allLanguages" ng-model="languages[0]"></select>
</th>
<th>
<select ng-options="getName(lang) for lang in allLanguages" ng-model="languages[1]"></select>
</th>
<th>
<select ng-options="getName(lang) for lang in allLanguages" ng-model="languages[2]"></select>
</th>
<th>
<select ng-options="getName(lang) for lang in allLanguages" ng-model="languages[3]"></select>
</th>
</tr>
<tr ng-repeat="check in langChecks" score-row name="check.name" row-key="check.key"></tr>
<tr class="totals"><td>Totals</td>
<td></td>
<td ng-repeat="lang in langTotals track by $index">
 {{ lang }} 
</td>
</tr>
<tr class="totals"><td>Magnitude</td>
<td></td>
<td ng-repeat="lang in langTotals track by $index">
 {{ percentageTotals(lang) }}% 
</td>
</tr>
</table>
</div></p>

<p>Current Languages:
<span ng-repeat="lang in allLanguages">
 {{ getName(lang) }}: {{ allLangTotals[$index] }}, 
</select></p>

<h2>So, What&rsquo;s the Point?</h2>

<p>To see how this model corresponds with data in the real world, I used the GitHub
API to query for the number of bugs created in repositories with more than 15
forks created in a span from 2011 to 2015. Commits were counted by summing the
commit counts of all contributors.</p>

<p>I decided to rely on the count of commits as a standard for a unit of work. My
assumption was that across fifty different projects, the commit sizes would
average out. Once the unit of work was decided on, I wanted to find the ratio of
bugs per commit for each language.</p>

<p>I collected the ratio of bugs logged per commit for each repository, and after
grouping by primary language, removed the top and bottom 25% using the
bug/commit ratio, which is a common practice in statistics to help find a more
accurate average. I summed the bugs and commits of those remaining repositories
grouped by language, finding a total average bug/commit ratio for each language
grouping. Here is that data, sorted by safety score.</p>

<p><table class="langtable">
<tr><th>Language</th>
<th>Bugs</th>
<th>Commits</th>
<th>Repositories</th>
<th>Bug/Commits</th>
<tr ng-repeat="lang in languageRatios">
<td> {{ lang.name }} </td>
<td> {{ lang.bugs }} </td>
<td> {{ lang.commits }} </td>
<td> {{ lang.repos }} </td>
<td> {{ getBugsRatio(lang) }} </td>
</tr>
</table></p>

<p>Here are the languages sorted by safety score with bug/commit ratios:</p>

<p><img class="center" src="/images/errorChart.jpg" title="&lsquo;image&rsquo; &lsquo;images&rsquo;" >
<img class="center" src="/images/bugsAverage.jpg" title="&lsquo;image&rsquo; &lsquo;images&rsquo;" ></p>

<p>I took the magnitude of the safety scores and the bug/commit ratios. After
inverting the safety scores, I overlaid them both onto a single graph.</p>

<p><img class="center" src="/images/bothMags.jpg" title="&lsquo;image&rsquo; &lsquo;images&rsquo;" ></p>

<p>Immediately it is obvious that Ruby, Python, PHP, and Clojure all seem to strongly
buck the trend, but otherwise the languages follow a pretty consistent slope
down in bugs. Taking the correlation gives a
<a href="https://en.wikipedia.org/wiki/Pearson_product-moment_correlation_coefficient">correlation coefficient</a>
of .55</p>

<h2>What About Unit Tests?</h2>

<p>Thinking that Ruby, Clojure, PHP, and Python might not correlate well due to some
other factor, I collected data on how many tests each repository had. I counted
the number of files containing &ldquo;test&rdquo; or &ldquo;spec&rdquo;, which gave the following,
sorted by tests per commit:</p>

<p><table class="langtable">
<tr><th>Language</th>
<th>Tests</th>
<th>Commits</th>
<th>Repositories</th>
<th>Tests/Commits</th></tr>
<tr ng-repeat="lang in sorter(languageRatios)">
<td> {{ lang.name }} </td>
<td> {{ lang.test }} </td>
<td> {{ lang.commits }} </td>
<td> {{ lang.repos }} </td>
<td> {{ getTestsRatio(lang) }} </td>
</tr>
</table></p>

<p>PHP, Python, and Ruby all have a higher then average number of tests, but
Clojure does not. Additionally, Go, Scala, and Java all also have a higher than
average number of tests, yet they score relatively average in bugs/commit.</p>

<h2>Conclusion</h2>

<p>In conclusion, the current safety model I have proposed seems to account for a
moderate reduction in bugs per commit across the sampled languages, but is not
the only factor. It currently is unable to account for a significantly lower
than expected bug count in Ruby and Clojure.</p>

<h2>Special Thanks</h2>

<p>Special thanks to (in alphabetical order):
<a href="https://twitter.com/traffichazard/">Patrick Boe</a> (Haskell, Sniff Test),
<a href="http://asymmetrical-view.com/">Kyle Burton</a> (General Advice),
Nils Creque (Listening Board),
Max Haley (Python, Ruby, Teaching me how to math),
<a href="https://github.com/danielmiladinov">Daniel Miladinov</a> (Java, Scala, Morale Support),
Keith O'Brien (Ruby and JS),
<a href="https://github.com/arlaneenalra">Chris Salch</a> (CoffeeScript and JS),
and <a href="https://github.com/timvisher">Tim Visher</a> (Clojure).</p>

<p>Additional thanks to the posters on
<a href="https://www.reddit.com/r/rust/comments/3egx49/language_safety_score_mark_2/">/r/rust</a>,
including <a href="https://www.reddit.com/user/notriddle">/u/notriddle</a>,
<a href="https://www.reddit.com/user/killercup">/u/killercup</a>, and
<a href="https://www.reddit.com/user/diegobernardes">/u/diegobernardes</a> who put together the Rust score.</p>

<h2>Complaints Department</h2>

<p>Did I mess up something about a language here, or am I missing a safety check? I&rsquo;ll happily take pull
requests for new languages:
<a href="https://github.com/steveshogren/blog-source/blob/master/source/javascripts/sliders2.js">blog source</a>. Just
pick an existing language, edit the name and values, and &ldquo;copy to clipboard&rdquo; to
build your own language data structure. Send it to me in a PR and I&rsquo;ll include
it along with a thanks on the page.</p>

<p><div ng-show="showRealName">
<h2>Select Language:
<select ng-options="lang.name for lang in allLanguages" ng-model="selectedLang"></select>
<button ng-click="copyToClipboard(selectedLang)">Copy Changes to Clipboard</button>
</h2>
<h2><input ng-model="selectedLang.name"></input></h2>
<table class="langtable">
<tr><th>Check</th><th>Option</th></tr>
<tr ng-repeat="check in langChecks">
<td style="background-color: {{scoreClass(score(selectedLang[check.key]))}} ">
 {{ check.name }}:  {{score(selectedLang[check.key]) }} 
</td>
<td>
<select ng-options="enforcedNice(e) for e in enforcedTypes" ng-model="selectedLang[check.key].enforced"></select>
</td>
</tr>
</table></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Case Study: Type-safe Domain Modeling in F#]]></title>
    <link href="http://deliberate-software.com/pattern-matching-case-study/"/>
    <updated>2015-03-14T09:42:00-04:00</updated>
    <id>http://deliberate-software.com/pattern-matching-case-study</id>
    <content type="html"><![CDATA[<p>Domain modeling in F# is significantly easier and safer than with the
traditional .NET languages. This is because of the increased safety of
pattern matching and the expressiveness of discriminated unions. These
concepts are not in C# or VB.NET, and therefore bring a new tool to
the table.</p>

<p>To illustrate this, I found some old code I&rsquo;d written to interact with
a legacy system. The system uses many single enums on a record to keep
track of statuses. When one changes, it can cause others to change as
well.</p>

<p>Here is a typical function that combines two enums to recalculate a
third.</p>

<pre><code class="csharp">        public static PositionType GetPositionType (MovementType movementType, ApplyToParty applyToParty)
        {
            if ((movementType == MovementType.Deliver &amp;&amp; applyToParty == ApplyToParty.Principal)
                || (movementType == MovementType.Return &amp;&amp; applyToParty == ApplyToParty.Counterparty))
                return PositionType.Held;
            if ((movementType == MovementType.Return &amp;&amp; applyToParty == ApplyToParty.Principal)
                || (movementType == MovementType.Deliver &amp;&amp; applyToParty == ApplyToParty.Counterparty))
                return PositionType.Posted;

            return PositionType.Undefined;
        }
</code></pre>

<p>With some regularity, new records are added to these types of enums,
causing a dangerous search and update across the system fixing all the
if/else or switch/case statements.</p>

<p>Right off the bat, pattern matching is a huge win here, taking a hard
to comprehend function and making the domain concepts clear.</p>

<pre><code class="fsharp">let GetPositionType = function
    | Deliver, Principal | Return, Counterparty -&gt; Held
    | Return, Principal | Deliver, Counterparty -&gt; Posted
    | MovementType.Undefined, _ | _, ApplyToParty.Undefined -&gt; PositionType.Undefined
</code></pre>

<p>If we add a new status to any of these, we will get a compiler warning
in every place letting us know. If that alone was the win, we&rsquo;d be
still be ahead by a lot. The domain is so clear here, I can print this
code out and hand it to my BA to ensure the logic is correct.</p>

<p>Next though, this got me thinking. Why does this set of three enums
have to be calculated? Why are they even separate? Ah, of course,
right now they are stored in the database and ORM objects, each with a
separate field and set of enum ids. Changing that would be costly.</p>

<p>What I want is a domain layer a level higher than the typical database
ORM classes, something to convert my ORM classes into that will be
able to do work in a safer way.</p>

<p>Rather than three enums that are supposed to change in lock step (but
might get out of date), I really want a concept of the three combined
and &ldquo;frozen&rdquo; together.</p>

<pre><code class="fsharp">type Direction = 
    | Held_Deliver_Principal
    | Held_Return_Counterparty
    | Posted_Return_Principal
    | Posted_Deliver_Counterparty

let GetDirection = function
   | Deliver, Principal  -&gt; Held_Deliver_Principal
   | Return, Counterparty -&gt; Held_Return_Counterparty
   | Return, Principal -&gt; Posted_Return_Principal
   | Deliver, Counterparty -&gt; Posted_Deliver_Counterparty
</code></pre>

<p>Now I have a combined Direction that merges the three concepts into
one. It is impossible with this new merged type to have an invalid
state across the three. Getting any of the types back out to convert
into the ORM classes or do some work is as simple as another match:</p>

<pre><code class="fsharp">let GetMovementTypeToSaveInORM = function
   | Held_Deliver_Principal | Posted_Deliver_Counterparty -&gt; Deliver
   | Posted_Return_Principal | Held_Return_Counterparty -&gt; Return

let GetSendFn = function
   | Held_Deliver_Principal | Posted_Return_Principal -&gt; SendMessageToPrincipal
   | Held_Return_Counterparty | Posted_Deliver_Counterparty -&gt; SendMessageToCounterparty
</code></pre>

<p>While it is possible to make an equivalent C# enum and combine these
in a similar way, it is inherently unsafe (nothing to guarantee you
covered every case) and therefore appropriately uncommon. The typical
answer for safe polymorphic dispatch in C# is to use an interface and
classes. Unfortunately, something still has to dispatch on that enum
id, either inside a class or at the time of class instantiation. That
is a vector for errors.</p>

<p>Because F# interops so well with C#, it is possible to build in a
domain layer in F# immediately that calls down to your C# ORM
classes. Converting from a set of dangerous C# enums into a
constrained and safe F# discriminated union is easy and will simplify
your domain to its essence.</p>

<p>For reasons like this, when I have to build something with a rich
domain, I reach for F#.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Programming Language Safety Score]]></title>
    <link href="http://deliberate-software.com/programming-language-safety-algorithm/"/>
    <updated>2015-02-17T14:13:00-05:00</updated>
    <id>http://deliberate-software.com/programming-language-safety-algorithm</id>
    <content type="html"><![CDATA[<p>I think the time has come for a standard programming language safety
score. I want to use this model to help show that the concept of
safety is much more nuanced than a binary bit of &ldquo;has strong-static
types&rdquo;.</p>

<p>When someone says &ldquo;programming language safety&rdquo;, it typically invokes
thoughts of unit tests, long build times, and red squiggles in an
IDE. But, in day-to-day development, there are so many times when we
are bitten by things that somehow just slip through the cracks.</p>

<p>I put together this scoring model to get a sense of how safe a
language is at the primitive level, and if it isn&rsquo;t safe by default,
how much it costs to manually make it safe. Since all abstractions
eventually result in a series of primitive operations, I decided that
focusing only on primitives would still be a valuable (if incomplete)
data point. While any good library will handle all primitive checks
and present the consumer with a well-designed abstraction, in the end,
the consumer is still left wiring libraries together, building their
own primitive abstractions for integration. Due to the impossibility of
measuring the quality of abstractions in all libraries for a language,
I left that entirely out of scope of this model, unless it is designed
as a primitive check.</p>

<p>By focusing on only primitive operations: making and calling
functions, naming data, working with sequences, and dealing with
language primitive data types, I slimmed down the large range of
possible error vectors to a small handful. While in some languages it
is common to use user-defined classes to wrap around a set of
primitives, those classes are still doing the same primitive work,
just hidden behind a user-created abstraction. The more ways it is
possible to make a &ldquo;mistake&rdquo; with a primitive, the more difficult it
is to build such good abstractions.</p>

<pre><code>This model is not about language "power".
</code></pre>

<p>This model is not about ranking the &ldquo;power&rdquo;, &ldquo;expressiveness&rdquo;, or
&ldquo;abstract-ability&rdquo; of a language. In any language that supports
abstractions (functions, classes, modules, naming data), I am
convinced, given enough code, all Turing complete langauges can do the
same work. This model is only about the costs to prevent unexpected
&ldquo;confusion&rdquo; between the programmer and the machine at the primitive
level.</p>

<p>Rather than focus on what is <em>possible</em> with a language, I will
instead focus on what is typically idiomatic to that community. For
example, if it is possible to achieve a level of safety in a language
but by doing something uncommon, that should not be counted.</p>

<p>To score a language, simply figure out how many characters it costs to
&ldquo;prevent&rdquo; a certain type of error, and add that to the
total. Newlines, spaces, and tabs do not count, but all other
punctuation does. If a specific check is language enforced, like F#&rsquo;s
Option or C#&rsquo;s parameter type enforcement, that is given a -30 (by
default) to make up for the lack of unit tests and code exercising
needed to run that &ldquo;path&rdquo;. Do not count import lines for libraries, as
importing the module will have a negligible effect on the code size
and complexity.</p>

<p>If there is a safety feature that is not possible to achieve
programmatically, we will add +30 (by default) for a &ldquo;every change run
and debug to fix&rdquo; cost, such as Java not having a way to prevent stack
overflow exceptions caused by recursion.</p>

<pre><code>A lower score is "safer", needing less (or no) code to achieve the same level of safety.
</code></pre>

<p>Rather than tell you my thoughts (or survey for) hard-coded
weightings, all checks are weighted the same by default. Feel free to
apply your own weightings, to better match to your or your team&rsquo;s
specific needs and preferences. The languages are masked by default to
protect the innocent. You can unmask the names and see the code used
below the table.</p>

<p><div ng-app="TableApp">
<div ng-controller="TableCtrl"></p>

<p>Language Enforced Bonus:
 {{ enforcedScore }} 
<input ng-model="enforcedScore" type="range" min="0" max="50" /></p>

<p>Language Inability Penalty:
 {{ inabilityPenalty }} 
<input ng-model="inabilityPenalty" type="range" min="0" max="50" /></p>

<p>Show Weights <input type="checkbox" ng-model="showWeights" />
<p class="lead">
<div style="overflow-x:scroll">
<table class="langtable">
<tr>
<th>Safety Check</th>
<th></th>
<th>
<select ng-options="getName(lang) for lang in allLanguages" ng-model="languages[0]"></select>
</th>
<th>
<select ng-options="getName(lang) for lang in allLanguages" ng-model="languages[1]"></select>
</th>
<th>
<select ng-options="getName(lang) for lang in allLanguages" ng-model="languages[2]"></select>
</th>
<th>
<select ng-options="getName(lang) for lang in allLanguages" ng-model="languages[3]"></select>
</th>
</tr>
<tr ng-repeat="check in langChecks" score-row name="check.name" row-key="check.key"></tr>
<tr class="totals"><td>Totals</td>
<td></td>
<td ng-repeat="lang in langTotals track by $index">
 {{ lang }} 
</td>
</tr>
<tr class="totals"><td>Magnitude</td>
<td></td>
<td ng-repeat="lang in langTotals track by $index">
 {{ percentageTotals(lang) }}% 
</td>
</tr>
</table>
</div></p>

<p><h3><input ng-model="showRealName" type="checkbox" /><span
ng-click="showRealName = !!!showRealName">Click to see backing code and unmask names</span></h3></p>

<p>Current Languages:
<span ng-repeat="lang in allLanguages">
 {{ getName(lang) }}: {{ allLangTotals[$index] }}, 
</select></p>

<p>I want to see your language represented here! I&rsquo;ll happily take pull
requests for new languages: <a href="https://github.com/steveshogren/blog-source/blob/master/source/javascripts/sliders.js">blog source</a>. Just
use the &ldquo;edit language&rdquo; and &ldquo;copy to clipboard&rdquo; to build your own
language data structure.</p>

<p>I would love to see every major language represented, including major
language &ldquo;idiom communities&rdquo;. For example, Clojure and Typed Clojure
are vastly different in abilities. Similarly &ldquo;Scala - The Better Java&rdquo;
and &ldquo;Scala - The JVM Haskell&rdquo; have vastly different idioms with
apparently very separate communities.</p>

<p><div ng-show="showRealName"> Feel free to put in your own examples by
playing with the samples below. Code surrounded with &lt;! !> is ignored
from the tally, since it would vary heavily based on the language and
desired result. Variable and type names are kept at single characters,
which are counted. Feel free to add in your own language below, and
use the copy feature to extract the data structure to use in a pull
request.</p>

<p><h2>Select Language:
<select ng-options="lang.name for lang in allLanguages" ng-model="selectedLang"></select>
</h2>
<button ng-click="showEdit = !showEdit">Edit Language</button>
<button ng-click="copyToClipboard(selectedLang)">Copy Changes to Clipboard</button>
<div ng-show="showEdit">
<h2><input ng-model="selectedLang.name"></input></h2>
<div ng-repeat="check in langChecks">
<h3> {{ check.name }} :  {{ score(selectedLang[check.key]) }}  </h3>
<p>
<textarea class="widetextarea" rows="5" ng-model="selectedLang[check.key].desc"></textarea>
<div>
Code: <select ng-options="enforcedNice(e) for e in enforcedTypes" ng-model="selectedLang[check.key].enforced"></select>
<div class="tablecode">1234567890123456789012345678901234567890</div>
<div class="tablecode" >  {{ cleanCode(selectedLang[check.key].rawCode) }}  </div>
<input type="text" style="width:90%;" ng-model="selectedLang[check.key].rawCode" />
</div>
</p>
</div>
</div></p>

<p><div ng-show="!showEdit">
<h2> {{ selectedLang.name }} </h2>
<div ng-repeat="check in langChecks">
<h3> {{ check.name }} :  {{ score(selectedLang[check.key]) }}  </h3>
<p>
 {{ selectedLang[check.key].desc }} 
<div>
Code:  {{ enforcedNice(selectedLang[check.key].enforced)  }} 
<div class="tablecode" ng-if="selectedLang[check.key].rawCode">1234567890123456789012345678901234567890</div>
<div class="tablecode" >  {{ cleanCode(selectedLang[check.key].rawCode) }}  </div>
<input type="text" style="width:90%;" ng-model="selectedLang[check.key].rawCode" />
</div>
</p>
</div>
</div>
</div></p>

<p>Hope this is a helpful way to think about language safety!</p>

<p>Special thanks to (in alphabetical order):
Patrick Boe <a href="https://twitter.com/traffichazard/">(twitter)</a>,
Kyle Burton <a href="http://asymmetrical-view.com/">(blog)</a>,
Daniel Miladinov <a href="https://github.com/danielmiladinov">(github)</a>,
Chris Salch <a href="https://github.com/arlaneenalra">(github)</a>, and
Tim Visher <a href="https://github.com/timvisher">(github)</a></p>
]]></content>
  </entry>
  
</feed>
